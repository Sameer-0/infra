


<%- include("../partials/head") %>
<style>
         hr{
            margin:  0 !important;
        }

        .timetable-container {
            width: var(--timetableWidth);
            background: #e6e6e6;
            /* border: 2px solid;    */
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            
        }

        .room-no {
            min-width: var(--roomNoWidth);
            max-width: var(--roomNoWidth);
            background: #006faa;
            color: #fff;
            /* border-right: 1px solid; */
            border-bottom: 1px solid;
            text-align: center;
            padding: 75px 0px;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            
        }

        .room-slots {
            width: var(--roomSlotWidth);
            min-height: 150px;
            position: relative;
            background-size: var(--breakIntervalWidth);
            background-image:
                linear-gradient(to right, grey 1px, transparent 1px)
        }



        .room {
            border: 1px solid black;
            min-height: 150px;
            max-height: 150px;
        }

        .event {
            position: absolute;
             /* width: var(--eventWidth); */
            background: #ffffff;
            word-break: break-word;
            height: 100%;
            /* overflow: hidden; */
            padding-right: calc(var(--breakIntervalWidth) + 2px);
            padding-left:  2px;
            padding-top: 5px;
            font-size: 14px;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            
        }

        .pending-event{
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            position: relative;
            
        }

        .pen-element{
            position: absolute;
            width:169px; 
            height:152px;
            border-left:1px solid rgb(255, 86, 86); 
            border-right:1px solid rgb(255, 86, 86);
            box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
        }
    
       

        .event:nth-child(even) .start-time{
            background-color: #dc3545 !important;
      
        }

        .event:nth-child(even) .end-time{
            background: #dc3545 !important;
        }
       

        .start-time{
            position: absolute;
            left: 0;
            bottom: 0;
            border-radius: 0!important;
            font-size: 0.75rem;
        }

        .end-time{
            position: absolute;
            right: var(--breakIntervalWidth);
            bottom: 0;
            border-radius: 0!important;
            font-size: 0.75rem;
        }

        .fa-arrows-left-right{
            position: absolute;
            right: calc(var(--breakIntervalWidth) + 78px - 7px);
            bottom: 0;
        }

        .break {
            position: absolute;
            height: 100%;
            width: var(--breakIntervalWidth);
            background-size: 3px;
            background: repeating-linear-gradient(45deg, #e9ecef, #adb5bd 15px);
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;  
            
        }

        .fixed-break{
            position: absolute;
            height: 100%;
            /* background-color: #006faa; */
            width: var(--fixedBreakWidth);
            background-size: 3px;
            background: repeating-linear-gradient(251deg, #212121, #444141 12px);
            color: #fff;
            font-size: 2.4rem;
            padding: 1px 18px;
            text-align: center;
            line-height: 0.75;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            

        }

        .occupied-event{
            position: absolute;
            background: repeating-linear-gradient(225deg, #9cceff, #fcfcfc 10px);
            height: 100%;
            text-align: center;
            padding: 75px 0px;
            font-weight: bold;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }
</style>
<%- include("../partials/leftSidebarTimeTable") %>
<%- include("../partials/header") %>
<!--Notificaion icon-->
<!--HEADER END-->

<div class="main-content">
    <!--DASHBOARD CONTENT START-->
    <div class="breadcrumbs-container">

        <ul class="breadcrumb">
            <% if(breadcrumbs){%> <% for (let crumbs of breadcrumbs){%>
            <li><a href="<%- crumbs.url%>"><%- crumbs.name%></a></li>
            <%} }%>
        </ul>
    </div>

    <%- include("../partials/timetableSimulationMenu") %>
    <div class="card table-card mb-1 timetable-filter-container">
        <div class="card-body" id="timetable-filter">
            <div class="row">
                <div class="input-groups col-md-4 col-sm-12">
                    <label for="program-name" class="d-flex justify-content-between">Select Program:</label>

                    <select name="program-name" id="program-name" class="form-select">
                        <option selected disabled value>--Select Program--</option>
                        <% if(programList.length>0){ %>
                        <option value="">All Programs</option>
                        <% } %>
                        <% for(let program of programList){%>
                        <option value="<%- program.id%>"><%-program.program_name%></option>
                        <%}%>
                    </select>
                </div>
                <div class="input-groups col-md-4 col-sm-12">
                    <label for="program-name">Select Session:</label>
                    <select name="session-name" id="session-name" class="form-select">
                        <option selected disabled value>--Select Session--</option>
                    </select>
                </div>

                <div class="input-groups col-md-4 col-sm-12">
                    <label for="program-name">Select Day:</label>
                    <select name="day" id="day" class="form-select" disabled>
                        <option selected disabled value>--Select Day--</option>
                        <% for(let day of dayList){%>
                        <option value="<%- day.id%>"><%- day.day_name %></option>
                        <%}%>
                    </select>
                </div>
            </div>
            <div class="my-3">
                <div class="table-searchbar-container"><button type="button"><i class="fas fa-search"></i> </button><input
                    type="search" id="searchkeyword" placeholder="Enter keywords" class="table-searchbar">
            </div>
            </div>
        </div>
    </div>

    <div class="card table-card">
        <div class="card-header table-card-header text-uppercase d-flex align-items-center justify-content-between">
            <div>
                <h5>Time Table</h5>
            </div>
            <div class="ms-auto me-2">
                <button class="btn btn-primary pending-events-modal my-2" data-target="#pendingEventModal"><i class="fa-solid fa-list-ul"></i> Pending Events</button>
                <a href="/admin/time-table-simulation/time-table/download" class="btn btn-danger"><span class="fa fa-download"></span>Download</a>
                
            </div>
        </div>

        <div class="card-body" style="overflow-x: auto;">
            <!-- <div class="table-searchbar-container"><button type="button"><i class="fas fa-search"></i> </button><input
                    type="search" id="searchkeyword" placeholder="Enter keywords" class="table-searchbar">
            </div> -->
            <div class="timetable-container">
       
            </div>
        </div>


    </div>


  <!-- Modal -->
  <div class="modal fade" id="slotModal" tabindex="-1" aria-labelledby="slotModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="slotModalLabel">Slot Details</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            
        </div>
        <div class="modal-footer">
          <!-- <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> -->
          <button type="button" class="btn btn-primary" id="drop-slot">Drop Slot</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Pending event list modal -->
  <div class="modal fade" id="pendingEventModal" tabindex="-1" aria-labelledby="pendingEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="pendingEventModalLabel">Pending Event List</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <table class="table pending-events-table">
                <thead>
                    <th>Sr.No</th>
                    <th>Program Name</th>
                    <th>Academic Session</th>
                    <th>Module Name</th>
                    <th>Division</th>
                    <th>Batch</th>
                    <th>Event Type</th>
                </thead>
                <tbody>

                </tbody>
            </table>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
          <!-- <button type="button" class="btn btn-primary" id="drop-slot">Drop Slot</button> -->
        </div>
      </div>
    </div>
  </div>

    <%- include("../partials/footer") %>
    <script src="/socket.io/socket.io.js"></script>

                        <script>
                            // $(document).ready(function () {


                                let socket = io();
                                socket.on('connect', () => {
                                    console.log('Socket Connection::::::::::::>>', socket.connected)
                                });

                                socket.emit('join', 'Timetable rescheduling module')

                                let  slugName = `<%-locals.slug %>`
                                let  userId = `<%-locals.userId %>`
                                console.log('slugName::::::::::::>>',slugName)
                                console.log('userId::::::::::::>>',userId)
                                let currentTd;
                                let roomList = JSON.parse(`<%- roomList %>`);
                                let programListJson = JSON.parse(`<%- programListJson %>`);
                                let pendingEventPrograms = JSON.parse(`<%- pendingEventPrograms%>`);
                                let pendingEventProgramLi = JSON.parse(`<%- pendingEventPrograms%>`);
                                var pendingEventProgramLids = pendingEventProgramLi.map(function (obj) {
                                                                                    return obj.program_lid;
                                                                                    });
                                    
                                    console.log('pending event programs::::::', pendingEventPrograms)
                      
                            //PENDING EVENT LIST   
                                $('.pending-events-modal').on('click', function() {
                                        console.log('yello hello')

                                        if($("#day").val()){
                                        let programLid = $("#program-name").val();
                                        let acadSessionLid = $("#session-name").val();

                                        let ApiObj = {
                                            url: '/admin/time-table-simulation/time-table/pending-events',
                                            type: 'POST',
                                            data: {
                                                programLid: programLid,
                                                acadSessionLid: acadSessionLid,
                                            },
                                            dataType: 'JSON'
                                        }

                                        ajaxApi(ApiObj).then(result => {

                                          console.log('result:::pending event>>>>>s', result)

                                          let tableRow = ``;
                                          let count = 1;
                                          if(result.length > 0){
                                            
                                                for(let penEvent of result){
                                                    tableRow += `<tr>`
                                                    tableRow += `<td> ${count++}`
                                                    tableRow += `<td> ${penEvent.program_name}`
                                                    tableRow += `<td> ${penEvent.acad_session}`
                                                    tableRow += `<td> ${penEvent.module_name}`
                                                    tableRow += `<td> ${penEvent.division}`
                                                    tableRow += `<td> ${penEvent.batch}`
                                                    tableRow += `<td> ${penEvent.event_name}`
                                                    tableRow += `<tr>`
                                                }
   
                                          }
                                          else{
                                            tableRow += `<tr> No Data Found </tr>`
                                          }

                                          $('#pendingEventModal .pending-events-table tbody').html(tableRow);
                                            $('#pendingEventModal').modal('show');
                                            //  }, 2000)
                                            //   $(this).attr('disabled','disabled');
                                        }).catch(error => {
                                            // showError(error.responseJSON)
                                        })
                                    }else{
                                        alert('Please Select Program, Session and Day')
                                    }

                                    })
                                
                            // SEARCH
                                $('#searchkeyword').on('input', function () {

                                    let searchStr = $(this).val().toLowerCase()

                                    if (searchStr.length > 1) {
                                    $('tr[data-room-no]').addClass('d-none')
                                    $('tr[data-room-no]').each(function (iTr, thisTr) {
                                        $(thisTr).find('td:not(:first-child)').each(function (iTd, thisTd) {
                                        if ($(thisTd).html().toLowerCase().includes(searchStr)) {
                                            $(thisTd).addClass('bg-info').parent().removeClass('d-none')
                                        } else {
                                            $(thisTd).removeClass('bg-info')
                                        }
                                        })

                                    })
                                    } else {
                                    $('tr[data-room-no]').removeClass('d-none')
                                    $('tr[data-room-no] td').removeClass('bg-info')
                                    }
                                    })

                                //DRAG EVENT
                                // initDrag()

                                //Getting session List Ajax
                                $("#program-name").on('change', function () {
                                    let programLid = $(this).val();

                                    if (!$('#day').attr('disabled')) {
                                        $('#day').val("")
                                        $('#day').attr('disabled', 'disabled');

                                    }

                                    let ApiObj = {
                                        url: '/admin/programs/sessions/program-sessions',
                                        type: 'POST',
                                        data: {
                                            programLid: programLid
                                        },
                                        dataType: 'JSON'
                                    }

                                    ajaxApi(ApiObj).then(result => {
                                        let sessionList = ``;

                                        if (result.length > 0) {
                                            sessionList +=
                                                `<option disabled selected value="">--Select Session--</option> <option value="">All Sessions</option>`;
                                            result.forEach(element => {
                                                sessionList += `<option value="${element.id}">
                                                    ${element.acad_session} 
                                                    </option>`
                                            });
                                        } else {
                                            // if($('#program-name').val() !== ""){
                                            sessionList +=
                                                `<option value=""> No Session Found! </option>`
                                            // }
                                            // else{
                                            //     sessionList += `<option value=""> All Session </option>`
                                            // }
                                        }
                                        sessionList += `</select>`;
                                        $("#session-name").html(sessionList)
                                    }).catch(error => {
                                        // showError(error.responseJSON)
                                    })
                                })


                                $("#session-name").on('change', function () {
                                    if ($('#day').attr('disabled')) {
                                        $('#day').removeAttr('disabled');
                                    }
                                    $('#day').val("")
                                })


                                $("#day").on('change', function () {

                                    let programLid = $("#program-name").val();
                                    let acadSessionLid = $("#session-name").val();
                                    let dayLid = $(this).val();

                                    let ApiObj = {
                                        url: '/admin/time-table-simulation/time-table/events',
                                        type: 'POST',
                                        data: {
                                            programLid: programLid,
                                            acadSessionLid: acadSessionLid,
                                            dayLid: dayLid
                                        },
                                        dataType: 'JSON'
                                    }

                                    ajaxApi(ApiObj).then(result => {
                                        console.log('2nd:::>>>', result)
                                        timeTableDisplay(result.eventList, result.allEventList)
                                        //  }, 2000)
                                        //   $(this).attr('disabled','disabled');
                                    }).catch(error => {
                                        // showError(error.responseJSON)
                                    })
                                })


                                $(document).on('click', '.timetable-simulation tbody td', function () {

                                    currentTd = $(this)
                                    let programList = ``;
            
                                    if ($(this).text() == "NA") {

                                        let programLid = parseInt($("#program-name").val());
                                        let acadSessionLid = $("#session-name").val();
                                        
                                        console.log('checking eventssss and programs for pending::::', typeof programLid)
                                        // console.log('checking eventssss and programs for pending::::2', typeof pendingEventProgramLids[0])
                                        // console.log('checking eventssss and programs for pending::::3', pendingEventProgramLids.includes(parseInt(programLid)))
                                        programList +=
                                            `<div class="mb-2" >Slot Available || ${$(this).attr('data-room-no')} || ${$(this).attr('data-start-time')}-${$(this).attr('data-end-time')}</div>`

                                            if (!$('#program-name').val()) {
                                                    programList +=
                                                        `<select class="form-select" id="program-name-modal">`;
                                                    programList +=
                                                        `<option value="" selected>--select Program--</option>`
                                                    for (let program of pendingEventPrograms) {
                                                        programList +=
                                                            `<option value="${program.program_lid}">${program.program_name}</option>`
                                                    }
                                                    programList += `</select>`

                                                    programList +=
                                                    `<select class="form-select my-3" id="session-name-modal"></select>`
                                                    programList +=
                                                    `<select class="form-select my-3" id="pending-events"></select>`

                                            } else {
                                            

                                                        if (pendingEventProgramLids.includes(programLid)){
                                                    programList +=
                                                        `<select class="form-select" id="program-name-modal">`;
                                                    programList +=
                                                        `<option value="" selected>--Select Program</option>`
                                                    programList +=
                                                        `<option value="${$('#program-name').val()}">${$('#program-name option:selected').text()} </option>`
                                                    programList += `</select>`

                                                    programList +=
                                                    `<select class="form-select my-3" id="session-name-modal"></select>`
                                                    programList +=
                                                    `<select class="form-select my-3" id="pending-events"></select>`
                                                        }
                                                        else{
                                                            
                                                            programList += '<h4 style="text-align: center;">No Pending Events Found!!<h4>'
                                                        
                                                        }
                                            
                                        }

                                       

                                        $('#slotModal .modal-body').html(programList);
                                        $('#slotModal .modal-footer').html(
                                            `<button type="button" class="btn btn-success" id="schedule-slot" data-start-time-id="${$(this).attr("data-start-time-id")}" data-end-time-id="${$(this).attr("data-end-time-id")}" data-room-id="${$(this).attr("data-room-id")}"  data-school-time-id="${$(this).attr("data-school-time-id")}" data-division-name="${$(this).attr("data-division-name")}" data-module-name="${$(this).attr("data-module-name")}" data-batch-name="${$(this).attr("data-batch-name")}" data-session-name="${$(this).attr("data-session-name")}"  data-program-name="${$(this).attr("data-program-name")}" data-start-time="${$(this).attr("data-start-time")}"  data-end-time="${$(this).attr("data-end-time")}" data-room-no="${$(this).attr("data-room-no")}"  data-lid="${$(this).attr("data-lid")}"  data-event-type-lid="${$("#slotModal #pending-events option:selected").attr("data-event-type-lid")}"  ${pendingEventProgramLids.includes(programLid) ? '' : (!programLid ? '' : 'disabled')}>Schedule</button>`
                                        );
                                        
                                    } else {
                                        $('#slotModal .modal-body').html($(this).text());
                                        if($(this).attr("data-faculty-lid")){

                                        $('#slotModal .modal-body').append(`<div class="my-2"><button type="button" class="btn btn-warning d-block mx-auto w-50" id="change-faculty">Change Faculty</button><div>`);
                                        }
                                        else{

                                            let programLid = $(this).attr('data-program-lid');
                                            let sessionLid = $(this).attr('data-session-lid');
                                            let moduleLid = $(this).attr('data-module-lid');
                                            let eventTypeLid = $(this).attr('data-event-type-lid');
                                            
                                            let ApiObj = {
                                                    url: '/admin/faculties/works/get-faculty-work-events',
                                                    type: 'POST',
                                                    data: {
                                                        programLid: programLid,
                                                        sessionLid: sessionLid,
                                                        moduleLid: moduleLid,
                                                        eventTypeLid:eventTypeLid
                                                    },
                                                    dataType: 'JSON'
                                                }

                                            ajaxApi(ApiObj).then(result => {
                                            console.log('faculty available::>>>', result.result)
                                            let facultyList=``
                                            facultyList += `<select id="faculty-work-event-list" class="form-select my-4">`
                                            if (result.result.length > 0) {
                                                
                                                facultyList +=
                                                    `<option disabled  selected value="">--Select Faculty--</option>`;
                                                
                                                    for  (let faculty of result.result){

                                                        facultyList +=
                                                        `<option value="${faculty.faculty_lid}"> ${faculty.faculty_name} </option>`
                                                    }

                                            } else {
                                                facultyList +=
                                                    `<option value=""> No Faculty Found! </option>`
                                            }
                                            facultyList += `</select>`;
                                            $(document).find("#slotModal .modal-body").append(facultyList)
                                            $('#slotModal .modal-body').append(`<div class="my-2"><button type="button" class="btn btn-warning d-block mx-auto w-50" id="allot-faculty">Allot Faculty</button><div>`);
                                        }).catch(error => {
                                            // showError(error.responseJSON)
                                            console.log('error', error);
                                        })

                                         
                                        }
                                        $('#slotModal .modal-body').attr('data-lid', $(this).attr(
                                            "data-lid"));
                                        $('#slotModal .modal-footer').html(
                                            `<button type="button" class="btn btn-primary" id="drop-slot" data-lid="${$(this).attr("data-lid")}">Drop Slot</button>`
                                        )
                                    }

                                    $('#slotModal').modal('show');
                                })


                                $(document).on('change', '#program-name-modal', function () {

                                    let programLid = $(this).val();
                                    console.log('progranmlid:::::::::', programLid)

                                    let ApiObj = {
                                        url: '/admin/time-table-simulation/time-table/pending-events-sessions',
                                        type: 'POST',
                                        data: {
                                            programLid: programLid
                                        },
                                        dataType: 'JSON'
                                    }
                                    let sessionList = ``;
                                    if ($('#session-name').val()) {
                                        sessionList +=
                                            `<option disabled selected value="">--Select Session--</option>`;
                                        sessionList +=
                                            `<option value="${$('#session-name').val()}"> ${$('#session-name option:selected').text()}</option>`

                                        $(document).find("#slotModal #session-name-modal").html(sessionList)
                                    } else {
                                        ajaxApi(ApiObj).then(result => {
                                            console.log('pending sessionsss;;;', result)

                                            if (result.length > 0) {

                                                sessionList +=
                                                    `<option disabled selected value="">--Select Session--</option>`;
                                                result.forEach(element => {
                                                    sessionList +=
                                                        `<option value="${element.acad_session_lid}"> ${element.acad_session} </option>`
                                                });


                                            } else {
                                                sessionList +=
                                                    `<option value=""> No Session Found! </option>`
                                            }
                                            sessionList += `</select>`;
                                            $(document).find("#slotModal #session-name-modal")
                                                .html(sessionList)
                                        }).catch(error => {
                                            // showError(error.responseJSON)
                                            console.log('error', error);
                                        })
                                    }
                                })


                                $(document).on('change', '#program-name-for-faculty', function () {

                                    let programLid = $(this).val();
                                    console.log('progranmlid:::::::::', programLid)

                                    let ApiObj = {
                                        url: '/admin/time-table-simulation/time-table/pending-events-sessions',
                                        type: 'POST',
                                        data: {
                                            programLid: programLid
                                        },
                                        dataType: 'JSON'
                                    }
                                    let sessionList = ``;
                                    if ($('#session-name').val()) {
                                        sessionList +=
                                            `<option disabled selected value="">--Select Session--</option>`;
                                        sessionList +=
                                            `<option value="${$('#session-name').val()}"> ${$('#session-name option:selected').text()}</option>`

                                        $(document).find("#slotModal #session-name-modal").html(sessionList)
                                    } else {
                                        ajaxApi(ApiObj).then(result => {
                                            console.log('pending sessionsss;;;', result)

                                            if (result.length > 0) {

                                                sessionList +=
                                                    `<option disabled selected value="">--Select Session--</option>`;
                                                result.forEach(element => {
                                                    sessionList +=
                                                        `<option value="${element.acad_session_lid}"> ${element.acad_session} </option>`
                                                });


                                            } else {
                                                sessionList +=
                                                    `<option value=""> No Session Found! </option>`
                                            }
                                            sessionList += `</select>`;
                                            $(document).find("#slotModal #session-name-modal")
                                                .html(sessionList)
                                        }).catch(error => {
                                            // showError(error.responseJSON)
                                            console.log('error', error);
                                        })
                                    }
                                    })


                                $(document).on('change', '#session-name-modal', function () {

                                    let programLid = $('#program-name-modal').val();
                                    let acadSessionLid = $(this).val();

                                    let ApiObj = {
                                        url: '/admin/time-table-simulation/time-table/pending-events',
                                        type: 'POST',
                                        data: {
                                            programLid: programLid,
                                            acadSessionLid: acadSessionLid,
                                        },
                                        dataType: 'JSON'
                                    }

                                    let pendingEventList;
                                    ajaxApi(ApiObj).then(result => {
                                            if (result.length > 0) {
                                                console.log('Pending-event-list:::>>', result)

                                                for (let pendingEvents of result) {

                                                    pendingEventList +=
                                                        `<option data-module-lid="${pendingEvents.module_lid}" data-event-type-lid="${pendingEvents.event_type_lid}" data-division-lid="${pendingEvents.division_lid}" data-batch-lid="${pendingEvents.batch_lid}" data-program-lid="${pendingEvents.program_lid}" data-sesison-lid="${pendingEvents.session_lid}" data-division-name="${pendingEvents.division}" data-batch-name="${pendingEvents.batch}">${pendingEvents.module_name} - ${pendingEvents.event_type_abbr} || ${pendingEvents.division}(${pendingEvents.batch}-${pendingEvents.event_name})</option>`
                                                }
                                            } else {
                                                pendingEventList =
                                                    `<option> No Pending Events </option>`
                                            }
                                            console.log('pendingevents:::', pendingEventList)
                                            $(document).find('#pending-events').html(
                                                pendingEventList);
                                        })
                                        .catch(err => {
                                            console.log('err', err)
                                        })
                                })


                                //DROP EVENT SURAJ
                                //$(document).on('click', '#drop-slot', function() 
                                $("#slotModal").on('click', '#drop-slot', function () {
                                    let eventLid = $(this).attr('data-lid');
                                    socket.emit('drop-event-request', slugName, userId, eventLid);
                                    socket.on('drop-event-response', function(response){
                                        console.log('drop-event-response::::::::::::::::', response)
                                        //Set Data Here after socket response
                                        currentTd.html("NA")
                                            $("#slotModal").modal('hide');
                                        //showSuccess(response)
                                    });

                                    // let ApiObj = {
                                    //     url: '/admin/time-table-simulation/time-table/drop-event',
                                    //     type: 'POST',
                                    //     data: {
                                    //         eventLid: eventLid,
                                    //     },
                                    //     dataType: 'JSON'
                                    // }
                                    // ajaxApi(ApiObj).then((result) => {
                                    //         console.log('Response::::::::::::', result);
                                    //         //currentTd.html('NA')// SET NA AFTER DROP
                                    //         console.log('currentTd::::::::::', currentTd)
                                    //         currentTd.html("NA")
                                    //         //SET EMPTY CURRENT TD
                                    //         // currentTd.attr('data-school-time-id', '')
                                    //         // currentTd.attr('data-start-time-id', '')
                                    //         // currentTd.attr('data-end-time-id', '')
                                    //         // currentTd.attr('data-room-id', '')
                                    //         // currentTd.attr('data-room-no', '')
                                    //         // currentTd.attr('data-lid', '')
                                    //         // currentTd.attr('data-module-name', '')
                                    //         // currentTd.attr('data-division-name', '')
                                    //         // currentTd.attr('data-batch-name', '')
                                    //         // currentTd.attr('data-session-name', '')
                                    //         // currentTd.attr('data-program-name', '')
                                    //         // currentTd.attr('data-start-time', '')
                                    //         // currentTd.attr('data-end-time', '')

                                    //         $("#slotModal").modal('hide');
                                    //         console.log('Successfully table reinitialize:::',
                                    //             result);
                                    //     })
                                    //     .catch((error) => {
                                    //         console.log('error', error);
                                    //     })
                                })

                                //SCHEDULE EVENT
                                $(document).on('click', '#schedule-slot', function () {
                                    let roomLid = $(this).attr("data-room-id");
                                    let startTimeId = $(this).attr("data-start-time-id");
                                    let endTimeId = $(this).attr("data-end-time-id");
                                    let divisionName = $("#slotModal #pending-events option:selected")
                                        .attr("data-division-name")
                                    let moduleName = $("#slotModal #pending-events option:selected")
                                        .text()
                                    let batchName = $("#slotModal #pending-events option:selected")
                                        .attr("data-batch-name")
                                    let sessionName = $(
                                        "#slotModal #session-name-modal  option:selected").text()
                                    let programName = $(
                                        "#slotModal #program-name-modal option:selected").text()
                                    let startTimeText = $(this).attr("data-start-time")
                                    let endTimeText = $(this).attr("data-end-time")
                                    let roomNo = $(this).attr("data-room-no")
                                    let dataLid = $(this).attr("data-lid")
                                    let programLid = $("#slotModal #program-name-modal").val();
                                    let sessionLid = $("#slotModal #session-name-modal").val();
                                    let moduleLid = $("#slotModal #pending-events option:selected")
                                        .attr("data-module-lid");
                                    let divisionLid = $("#slotModal #pending-events option:selected")
                                        .attr("data-division-lid");
                                    let batchLid = $("#slotModal #pending-events option:selected").attr(
                                        "data-batch-lid");
                                    let dayLid = $("#day").val();
                                    let schoolTimeLid = $(this).attr("data-school-time-id");
                                    let event_type_lid = $("#slotModal #pending-events option:selected").attr("data-event-type-lid");

                                    let obj = [{
                                        room_lid: roomLid,
                                        start_time_id: startTimeId,
                                        end_time_id: endTimeId,
                                        program_lid: programLid,
                                        acad_session_lid: sessionLid,
                                        course_lid: moduleLid,
                                        division_lid: divisionLid,
                                        batch_lid: batchLid,
                                        day_lid: dayLid,
                                        school_time_lid: schoolTimeLid,
                                        event_type_lid: event_type_lid
                                    }]

                                    console.log('JSON::::::::::::::::', obj)
                                    //'/admin/time-table-simulation/time-table/schedule-event'
                                    socket.emit('schedule-event-request', slugName, userId, JSON.stringify(obj));
                                    socket.on('schedule-event-response', function(response){
                                        console.log('schedule-event-response::::::::::::::::', response)
                                        if(response.status == 1 && response.data.length > 0){
                                            let respobj = response.data[0]
                                            //Set Data Here after socket response
                                            //SET DATA CURRENT TD
                                            currentTd.attr('data-school-time-id', respobj.school_timing_lid)
                                            currentTd.attr('data-start-time-id', respobj.slot_start_lid)
                                            currentTd.attr('data-end-time-id', respobj.slot_end_lid)
                                            currentTd.attr('data-room-id', respobj.room_lid)
                                            currentTd.attr('data-room-no', respobj.room_number)
                                            currentTd.attr('data-lid', respobj.id)
                                            currentTd.attr('data-module-name', respobj.module_name)
                                            currentTd.attr('data-division-name', respobj.division)
                                            currentTd.attr('data-batch-name', respobj.batch)
                                            currentTd.attr('data-session-name', respobj.acad_session)
                                            currentTd.attr('data-program-name', respobj.program_name)
                                            currentTd.attr('data-start-time', respobj.start_time)
                                            currentTd.attr('data-end-time', respobj.end_time)
                                            currentTd.attr('data-faculty-name', respobj.faculty_name)
                                            currentTd.attr('data-faculty-lid', respobj.faculty_lid)
                                            currentTd.attr('data-event-type-lid', respobj.event_type_lid)
                                            currentTd.attr('draggable', true)
                                            currentTd.addClass('draggableTd dragtargetTd')
                                            currentTd.html(
                                                `${respobj.module_name} - ${respobj.event_type_abbr}<br>${respobj.division} (${respobj.batch})<br>${respobj.acad_session}<br>${respobj.program_name}<br>${respobj.start_time} to ${respobj.end_time} <br> (Faculty ${respobj.faculty_name})`
                                            )
                                            $("#slotModal").modal('hide')
                                        }else{
                                            //SHOW ERROR MESSAGE IF ANYTHING GOING WRONG OR SOCKET THOW ERROR
                                            showError(response)
                                        }
                                    });

                                    // let ApiObj = {
                                    //     url: '/admin/time-table-simulation/time-table/schedule-event',
                                    //     type: 'POST',
                                    //     data: {
                                    //         inputJSON: JSON.stringify(obj)
                                    //     },
                                    //     dataType: 'JSON'
                                    // }

                                    // console.log('obj::::', ApiObj.data)
                                    // ajaxApi(ApiObj).then((result) => {
                                    //         console.log(result);
                                    //         //SET DATA CURRENT TD
                                    //         currentTd.attr('data-school-time-id', schoolTimeLid)
                                    //         currentTd.attr('data-start-time-id', startTimeId)
                                    //         currentTd.attr('data-end-time-id', endTimeId)
                                    //         currentTd.attr('data-room-id', roomLid)
                                    //         currentTd.attr('data-room-no', roomNo)
                                    //         currentTd.attr('data-lid', dataLid)
                                    //         currentTd.attr('data-module-name', moduleName)
                                    //         currentTd.attr('data-division-name', divisionName)
                                    //         currentTd.attr('data-batch-name', batchName)
                                    //         currentTd.attr('data-session-name', sessionName)
                                    //         currentTd.attr('data-program-name', programName)
                                    //         currentTd.attr('data-start-time', startTimeText)
                                    //         currentTd.attr('data-end-time', endTimeText)
                                    //         currentTd.attr('draggable', true)
                                    //         currentTd.addClass('draggableTd dragtargetTd')
                                    //         currentTd.html(
                                    //             `${moduleName}<br>${divisionName} (${batchName})<br>${sessionName}<br>${programName}<br>${startTimeText} to ${endTimeText}`
                                    //         )
                                    //         $("#slotModal").modal('hide')
                                    //     })
                                    //     .catch((error) => {
                                    //         console.log('error', error);
                                    //         showError(error.responseJSON)
                                    //     })
                                })


                                //DISPLAYING TIMETABLE AND DRAG EVENTS
                                
                                let eventListJson;
                                let roomJson = JSON.parse(`<%-roomList%>`)
          

        // let roomJson = [{"id":1,"room_number":"701","room_type_id":1},{"id":2,"room_number":"702","room_type_id":1},{"id":3,"room_number":"703","room_type_id":1},{"id":4,"room_number":"704","room_type_id":1},{"id":5,"room_number":"705","room_type_id":1},{"id":6,"room_number":"706","room_type_id":1},{"id":7,"room_number":"707","room_type_id":1},{"id":8,"room_number":"708","room_type_id":1},{"id":9,"room_number":"709","room_type_id":1},{"id":10,"room_number":"710","room_type_id":1},{"id":11,"room_number":"711","room_type_id":1},{"id":12,"room_number":"712","room_type_id":1},{"id":13,"room_number":"713","room_type_id":1},{"id":40,"room_number":"714","room_type_id":1},{"id":14,"room_number":"716","room_type_id":1},{"id":15,"room_number":"717","room_type_id":1},{"id":16,"room_number":"718","room_type_id":1},{"id":41,"room_number":"719","room_type_id":1},{"id":17,"room_number":"801","room_type_id":1},{"id":18,"room_number":"802","room_type_id":1},{"id":19,"room_number":"803","room_type_id":1},{"id":20,"room_number":"804","room_type_id":1},{"id":21,"room_number":"805","room_type_id":1},{"id":22,"room_number":"807","room_type_id":1},{"id":23,"room_number":"808","room_type_id":1},{"id":24,"room_number":"809","room_type_id":1},{"id":25,"room_number":"810","room_type_id":1},{"id":26,"room_number":"811","room_type_id":1},{"id":27,"room_number":"812","room_type_id":1},{"id":28,"room_number":"813","room_type_id":1},{"id":29,"room_number":"814","room_type_id":1},{"id":30,"room_number":"815","room_type_id":1},{"id":31,"room_number":"816","room_type_id":1},{"id":32,"room_number":"817","room_type_id":1},{"id":33,"room_number":"818","room_type_id":1},{"id":34,"room_number":"819","room_type_id":1},{"id":35,"room_number":"820","room_type_id":1},{"id":39,"room_number":"927","room_type_id":1},{"id":36,"room_number":"CC1","room_type_id":3},{"id":37,"room_number":"CC2","room_type_id":3},{"id":38,"room_number":"CC3","room_type_id":3}]
        let cssRoot = document.querySelector(':root');
        let styleRoot = getComputedStyle(cssRoot);

        document.addEventListener('mousedown', dragStart);
        document.addEventListener('mousemove', onDrag)
        document.addEventListener('mouseup', dragEnd)


        let timetableProp = {
            totalSlots: 116,
            pxPerSlot: 13,
            roomNoWidth: 50,
            
        }
        cssRoot.style.setProperty('--timetableWidth', `${timetableProp.totalSlots * timetableProp.pxPerSlot + 50 }px`);
        cssRoot.style.setProperty('--roomNoWidth', `${timetableProp.roomNoWidth}px`);
        cssRoot.style.setProperty('--breakIntervalWidth', `${timetableProp.pxPerSlot}px`);
        cssRoot.style.setProperty('--eventWidth', `${(timetableProp.pxPerSlot * 12) + timetableProp.pxPerSlot }px`);
        cssRoot.style.setProperty('--roomSlotWidth', `${timetableProp.totalSlots * timetableProp.pxPerSlot}px`);
        
        
        
        let timeJson = JSON.parse(`<%- timeSlotList%>`);
        console.log('time slot list::', timeJson)
       
        
        
        let targetProp = {};

        let dragObj = {
            initialClientX: null,
            initialClientY: null,
            isMouseDown: false,
            targetElem: null,
            isDraggable: false,
            isDroppable: true,
            isDragging: false
        }
        
        // $(document).on('click', '.pending-event', function() {
            
        //     console.log('peee', this)
        // })
        
     
        // let roomList = document.querySelector(`.room[data-room-lid = "2"] .room-slots`);
        // let div = document.createElement('div');
        // div.innerHTML = "hello";
        // console.log('room list::::::', roomList.append(div))
        let timeTablestartSlot = timeJson[0].id;
        let fixedBreakSlotStart = 115

        $('.pending-event').on('click', function(){
            $('.pending-event').css('border','none')
            $('.pending-event').removeAttr('data-selected')
          
            $(this).css('border', '1px solid red')
            $(this).attr('data-selected','true')
        })

        function timeTableDisplay(eventListJson, allEventListJson){
            let fixedBreadWidth ;
            let roomSlot;
            let eventStartSlot;
            let eventLeftPosition;
            let roomHtml = ``;
                for( let room of roomJson ){

                    roomHtml +=`<div class="d-flex room" data-room-lid="${room.id}">
                    <div class="room-no" data-room-lid="${room.id}" data-room-type-lid="${room.room_type_id}">
                        ${room.room_number}
                    </div>
                    <div class="room-slots">

                    </div>
                    </div>`
                }
                
                let timeTableBox = document.querySelector('.timetable-container');
                timeTableBox.innerHTML = roomHtml;

            // console.log('jello',eventListJson)
            for( let event of eventListJson) {

                if(!event.is_break){

                roomSlot = document.querySelector(`.room[data-room-lid = "${event.room_lid}"] .room-slots`)

                eventStartSlot = event.start_slot;
                eventLeftPosition =   (eventStartSlot - timeTablestartSlot) * timetableProp.pxPerSlot
                // console.log('left position:::::>>', eventLeftPosition)
                
                let breakElement = (eventLeftPosition + (timetableProp.pxPerSlot * 13) >= (timetableProp.totalSlots * timetableProp.pxPerSlot)) || event.end_slot == fixedBreakSlotStart ?
                `<div class="break d-none" style="left: ${timetableProp.pxPerSlot * 12}px; top: 0; bottom:0; width:${timetableProp.pxPerSlot}px"></div>` :
                `<div class="break" style="left: ${timetableProp.pxPerSlot * 12}px; top: 0; bottom:0; width:${timetableProp.pxPerSlot}px"></div>`
                    
                // let eventWidth = (eventLeftPosition + (timetableProp.pxPerSlot * 13) >= (timetableProp.totalSlots * timetableProp.pxPerSlot)) || event.end_slot == fixedBreakSlotStart ?
                // `${(event.end_slot - event.start_slot + 1) * timetableProp.pxPerSlot}px;` :
                // `${(event.end_slot - event.start_slot + 2) * timetableProp.pxPerSlot}px;` 


                let roomSlotItem = document.createElement('div');
                roomSlotItem.setAttribute("class","event room-slot-item")
                roomSlotItem.setAttribute("style",`left: ${eventLeftPosition}px ;top: 0; text-align:center; width:${(event.end_slot - event.start_slot + 2) * timetableProp.pxPerSlot}px;`)
                roomSlotItem.setAttribute("data-event-lid",`${event.event_lid}`)
                roomSlotItem.setAttribute("data-module-name",`${event.module_name}`)
                roomSlotItem.setAttribute("data-module-lid",`${event.course_lid}`)
                roomSlotItem.setAttribute("data-division-name",`${event.division}`)
                roomSlotItem.setAttribute("data-batch-name",`${event.batch}`)
                roomSlotItem.setAttribute("data-event-type-lid",`${event.event_type_lid}`)
                roomSlotItem.setAttribute("data-session-name",`${event.acad_session}`)
                roomSlotItem.setAttribute("data-session-lid",`${event.acad_session_lid}`)
                roomSlotItem.setAttribute("data-program-name",`${event.program_name}`)
                roomSlotItem.setAttribute("data-program-lid",`${event.program_lid}`)
                roomSlotItem.setAttribute("data-start-time",`${event.start_slot}`)
                roomSlotItem.setAttribute("data-end-time",`${event.end_slot}`)
                roomSlotItem.setAttribute("data-faculty-lid",`${event.faculty_lid ? event.faculty_lid : ''}`)
                
                roomSlotItem.innerHTML = `${event.program_name} - ${event.acad_session} <br><hr> ${event.module_name} <br><hr> ${event.division} - ${event.batch} (${event.event_type}) <span class="badge bg-info start-time">${timeJson[eventStartSlot - timeTablestartSlot].start_time}</span>
                <i class="fa-solid fa-arrows-left-right"></i><span class="badge bg-info end-time">${timeJson[eventStartSlot - timeTablestartSlot + 11].end_time}</span> ${breakElement}`;
    
                roomSlot.append(roomSlotItem);
                }

                else {

                    roomSlot = document.querySelector(`.room[data-room-lid = "${event.room_lid}"] .room-slots`);
                    eventStartSlot = event.start_slot;
                    eventLeftPosition =   (eventStartSlot - timeTablestartSlot) * timetableProp.pxPerSlot;


                   
                    let fixedBreak = document.createElement('div');
                    fixedBreak.setAttribute("class","fixed-break room-slot-item")
                    fixedBreak.setAttribute("style",`left: ${eventLeftPosition}px; top: 0;`)
                    fixedBreak.setAttribute("data-break",`${event.is_break}`)
                    fixedBreak.innerText = 'BREAK';
                    fixedBreadWidth = (event.end_slot - event.start_slot) * timetableProp.pxPerSlot + timetableProp.pxPerSlot;
                    console.log('breakinterval count:::::', fixedBreadWidth)
                    
                    roomSlot.append(fixedBreak);
                }
            }

            for(let event of allEventListJson){

                if(document.querySelector(`.event[data-event-lid="${event.event_lid}"]`)){
                    console.log('event-count');
                }
                else{
                    if(!event.is_break){

                        console.log('other events')
                        roomSlot = document.querySelector(`.room[data-room-lid = "${event.room_lid}"] .room-slots`)

                        eventStartSlot = event.start_slot;
                        eventLeftPosition =   (eventStartSlot - timeTablestartSlot) * timetableProp.pxPerSlot
                        // console.log('left position:::::>>', eventLeftPosition)

                        let occRoomWidth = (eventLeftPosition + (timetableProp.pxPerSlot * 13) >= (timetableProp.totalSlots * timetableProp.pxPerSlot)) || event.end_slot == fixedBreakSlotStart ?
                        `${timetableProp.pxPerSlot * 12}` :
                        `${timetableProp.pxPerSlot * 13}`
                            

                        let occupiedRoomSlotItem = document.createElement('div');
                        occupiedRoomSlotItem.setAttribute("class","occupied-event room-slot-item")
                        occupiedRoomSlotItem.setAttribute("style",`left: ${eventLeftPosition}px ;top: 0; text-align:center; width: ${occRoomWidth}px`)
                        // occupiedRoomSlotItem.setAttribute("style",`width: ${occRoomWidth}px`)
                        occupiedRoomSlotItem.setAttribute("data-event-lid",`${event.event_lid}`)
                        occupiedRoomSlotItem.setAttribute("data-module-name",`${event.module_name}`)
                        occupiedRoomSlotItem.setAttribute("data-module-lid",`${event.course_lid}`)
                        occupiedRoomSlotItem.setAttribute("data-division-name",`${event.division}`)
                        occupiedRoomSlotItem.setAttribute("data-batch-name",`${event.batch}`)
                        occupiedRoomSlotItem.setAttribute("data-event-type-lid",`${event.event_type_lid}`)
                        occupiedRoomSlotItem.setAttribute("data-session-name",`${event.acad_session}`)
                        occupiedRoomSlotItem.setAttribute("data-session-lid",`${event.acad_session_lid}`)
                        occupiedRoomSlotItem.setAttribute("data-program-name",`${event.program_name}`)
                        occupiedRoomSlotItem.setAttribute("data-program-lid",`${event.program_lid}`)
                        occupiedRoomSlotItem.setAttribute("data-start-time",`${event.start_slot}`)
                        occupiedRoomSlotItem.setAttribute("data-end-time",`${event.end_slot}`)
                        occupiedRoomSlotItem.setAttribute("data-faculty-lid",`${event.faculty_lid ? event.faculty_lid : ''}`)

                        occupiedRoomSlotItem.innerHTML = `OCCUPIED`;

                        roomSlot.append(occupiedRoomSlotItem);
                    }
                }
            }

            
            cssRoot.style.setProperty('--fixedBreakWidth', `${fixedBreadWidth}px`);
        }

        // fetch("/js/events.json").then(response => { return response.json();})
        // .then(data => {eventListJson = data;
        //          console.log('je;;o',eventListJson)
                
                //  for( let event of eventListJson) {

                // let roomSlot = document.querySelector(`.room[data-room-lid = "${event.room_lid}"] .room-slots`)

                // let eventStartSlot = event.slot_start_lid;
                // let eventLeftPosition =   (eventStartSlot - timeTablestartSlot) * timetableProp.pxPerSlot
                // console.log('left position:::::>>', eventLeftPosition)
                // let breakElement =(eventLeftPosition + (timetableProp.pxPerSlot * 12) >= (timetableProp.totalSlots * timetableProp.pxPerSlot)) ? `` : `<div class="break" style="left: ${timetableProp.pxPerSlot * 12}px; top: 0; bottom:0; width:${timetableProp.pxPerSlot}px"></div>`

                // let roomSlotItem = document.createElement('div');
                // roomSlotItem.setAttribute("class","event room-slot-item")
                // roomSlotItem.setAttribute("style",`left: ${eventLeftPosition}px ;top: 0; text-align:center`)
                // roomSlotItem.setAttribute("data-event-lid",`${event.id}`)
                // roomSlotItem.innerHTML = `${event.program_name} - ${event.acad_session} <br><hr> ${event.module_name} <br><hr> ${event.division} - ${event.batch} (${event.event_type}) <span class="badge bg-info start-time">${timeJson[eventStartSlot - timeTablestartSlot].start_time}</span>
                // <i class="fa-solid fa-arrows-left-right"></i><span class="badge bg-info end-time">${timeJson[eventStartSlot - timeTablestartSlot + 11].end_time}</span> 
                //                 ${breakElement}
                //                 `;

                // // let breakLeftPosition = eventLeftPosition + (timetableProp.pxPerSlot * 12);
                // // let breakItem = document.createElement('div');
                // // breakItem.setAttribute("class","break room-slot-item")
                // // breakItem.setAttribute("style",`left: ${breakLeftPosition}px; top: 0;`)

                // roomSlot.append(roomSlotItem)

                // }
                // });

        let penElem = document.createElement('div');
        penElem.setAttribute('class', 'pen-element d-none');
        document.body.append(penElem)

        let isPenEventSelected;
        $('.pending-event').each((index, element) => {
            if( $(element).attr('data-selected')){
                isPenEventSelected = true;
            }
            
           
        })

        //select and unselect pending events
        // let pendingEventList = document.querySelector('.pending-event');
        // document.addEventListener('click', function(e){
        // //    if(e.target.classList.contains('pending-event')){
        //     console.log('pEE true:::', e.target.classList)
        // //    }
        // })

        // $('.pending-event').on('click', function() {
            
        // })
                              

        let fixedBreakBounding

        function dragStart(e) {

           
            dragObj.tableLeftPosition = document.querySelector('.timetable-container').getBoundingClientRect().left;
            // console.log('hello:::',  dragObj.tableLeftPosition)
             if (e.target.classList.contains('room-slots'))  e.preventDefault();

            dragObj.relativeClientX = e.clientX -  dragObj.tableLeftPosition
   
            if(e.buttons != 1) {
                return false;
            }

            dragObj.initialClientX = dragObj.relativeClientX;
            dragObj.initialClientY = e.clientY;
            document.querySelectorAll('.room-slots').forEach(e => {e.style.outline = "none"})
            
           
           
            if (e.target.classList.contains('event')) {

                fixedBreakBounding= document.querySelector('.fixed-break').getBoundingClientRect();
                console.log('fixed break Trect::', fixedBreakBounding)
                console.log("IS DRAGGABLE");

                dragObj.isMouseDown = true;
                
                dragObj.targetElem = e.target;
                dragObj.firstRoom = dragObj.targetElem.parentElement
                // console.log('initial room::',  dragObj.firstRoom)
                dragObj.targetElem.classList.add('active')

                dragObj.initialRoom = getCurrentRoom(document.elementsFromPoint(e.clientX, e.clientY));
                console.log('roomslot:::::>>>>', dragObj.initialRoom)
                dragObj.initialRoom.style.cssText = `outline: 3px solid #ff8400`;

                e.target.style.zIndex = 100;
                
                targetProp.index = Array.from(dragObj.initialRoom.children).indexOf(dragObj.targetElem);

                targetProp.oldOffsetX = e.offsetX;
                targetProp.oldOffsetY = e.offsetY;
                targetProp.width = dragObj.targetElem.clientWidth

                targetProp.initialX = e.target.offsetLeft;
                targetProp.initialY = e.target.offsetTop;
                targetProp.initialBounding = dragObj.targetElem.getBoundingClientRect();
                targetProp.initialClientX = dragObj.relativeClientX;
                targetProp.initialClientY = e.clientY;
                dragObj.isDraggable = true;

               

                dragObj.startSlotIndex =  (Math.round((targetProp.initialBounding.left - dragObj.tableLeftPosition - timetableProp.roomNoWidth)/timetableProp.pxPerSlot)) ;
                if(dragObj.targetElem.style.width == 'var(--eventNoBreakWidth)'){
                    dragObj.endSlotIndex = (Math.round((targetProp.initialBounding.right - dragObj.tableLeftPosition -  timetableProp.roomNoWidth - timetableProp.pxPerSlot)/timetableProp.pxPerSlot))
                }else{

                    dragObj.endSlotIndex = (Math.round((targetProp.initialBounding.right - dragObj.tableLeftPosition -  timetableProp.roomNoWidth - timetableProp.pxPerSlot)/timetableProp.pxPerSlot)) - 1;
                }

                console.log('end time slot index ::',   dragObj.targetElem.style.width)
                dragObj.targetElem.querySelector('.start-time').innerHTML = timeJson[dragObj.startSlotIndex].start_time;
                dragObj.targetElem.querySelector('.end-time').innerHTML = timeJson[dragObj.endSlotIndex].end_time;
    

            } else {
                if(true){
                    console.log('pending events')
                    document.addEventListener('click', function(e){
         
            
                    let tarEle = document.elementsFromPoint(e.clientX, e.clientY);
                    console.log('tar:::',document.elementsFromPoint(e.clientX, e.clientY));
                    getCurrentRoom(tarEle)
                    console.log('fff', getCurrentRoom(tarEle));
                    
                })
                }else{

                    console.log('Not draggable')
                    dragObj.isDraggable = false;
                }
            }

        }

        function onDrag(e) {

           
            dragObj.relativeClientX = e.clientX -  dragObj.tableLeftPosition
           
            if (!dragObj.isDraggable || !dragObj.isMouseDown || dragObj.relativeClientX >= (timetableProp.totalSlots * timetableProp.pxPerSlot) + timetableProp.roomNoWidth || dragObj.relativeClientX <= timetableProp.roomNoWidth) {
                if(isPenEventSelected){
                           
                    penElem.setAttribute('style', `left: ${e.clientX}px; top:${e.clientY}px`);
                    document.querySelector('.pen-element').classList.remove('d-none');
                    
                }else{
                    return false;
                }

            
               
            }

            else {


                let tRect = dragObj.targetElem.getBoundingClientRect();
         
                if(e.clientX !== dragObj.clientX || e.clientY !== dragObj.clientY) {
                
                    dragObj.isDragging = true;
                }

                // let tRect = dragObj.targetElem.getBoundingClientRect();

                console.log('CALLING ON DARG', dragObj.isDragging)

                dragObj.currentRoom = getCurrentRoom(document.elementsFromPoint(e.clientX, e.clientY));

                if (dragObj.currentRoom != dragObj.initialRoom) {
                
                    dragObj.initialRoom.style.cssText += `outline: unset`;
                    dragObj.currentRoom.style.cssText += `outline: 3px solid #ff8400`;
                    dragObj.initialRoom = dragObj.currentRoom;
                    
                }
            

                targetProp.movedX = dragObj.relativeClientX - targetProp.oldOffsetX - timetableProp.roomNoWidth;
                targetProp.movedY = e.clientY - targetProp.initialClientY;
            

                targetProp.movedX = targetProp.movedX > (timetableProp.totalSlots * timetableProp.pxPerSlot) - targetProp
                    .width ? (timetableProp.totalSlots * timetableProp.pxPerSlot) - targetProp.width : targetProp.movedX;

                dragObj.targetElem.style.left = (Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp.pxPerSlot) >= 0 ? Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp.pxPerSlot +'px' : '0px'
                dragObj.targetElem.style.top =   targetProp.movedY < 10 ? `${targetProp.movedY}px` : `${targetProp.movedY + window.pageYOffset}px`
            
                console.log('Window scroll drag top:::::', targetProp.movedY )
                console.log('Window scroll:::::', window.pageYOffset )
                
                if((tRect.left >= fixedBreakBounding.left && tRect.left < fixedBreakBounding.right) || (tRect.right > fixedBreakBounding.left && tRect.right <= fixedBreakBounding.right) || (tRect.right >= fixedBreakBounding.right && tRect.left < fixedBreakBounding.right)) {

                    console.log("Target element>>>>> ", dragObj.targetElem)

                    cssRoot.style.setProperty('--eventNoBreakWidth', `${(timetableProp.pxPerSlot * 12)}px`);
                    dragObj.targetElem.querySelector('.break').style.display = "none"
                    dragObj.targetElem.style.width = '156px';
                    console.log('over the break:::::::::', dragObj.targetElem.style.width)

                }
                else{
                    dragObj.targetElem.querySelector('.break').style.display = "block"
                }
            
                //No break condition for room being placed at end
            if((timetableProp.totalSlots * timetableProp.pxPerSlot) - (Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp.pxPerSlot + (timetableProp.pxPerSlot * 12) + timetableProp.pxPerSlot) 
            < 1)
                {
                    console.log('true:::::::::::::::>>>>>>>>>>', (fixedBreakSlotStart - timeTablestartSlot)*timetableProp.pxPerSlot)
                   

                    dragObj.targetElem.querySelector('.break').classList.add('d-none');
                    
                    dragObj.targetElem.style.left =  Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp.pxPerSlot + timetableProp.pxPerSlot +'px'
                    dragObj.targetElem.style.width = `var(--eventNoBreakWidth)`

                    dragObj.targetElem.querySelector('.end-time').style.right = 0
                    dragObj.targetElem.querySelector('.fa-arrows-left-right').style.right = 'calc(78px - 7px)'

                    if(((timetableProp.totalSlots * timetableProp.pxPerSlot) - (Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp
                    .pxPerSlot + (timetableProp.pxPerSlot * 12))) > 0){
                    
                        console.log('false:::::::::')
                       
                        dragObj.targetElem.querySelector('.break').classList.remove('d-none')
                        dragObj.targetElem.querySelector('.end-time').style.right = `var(--breakIntervalWidth)`
                        dragObj.targetElem.querySelector('.fa-arrows-left-right').style.right = 'calc(var(--breakIntervalWidth) + 78px - 7px)'
                        // dragObj.targetElem.style.width = `var(--eventWidth)`;
                    }
                }
                else{
                    dragObj.targetElem.querySelector('.break').classList.remove('d-none');
                    //dragObj.targetElem.style.width = `var(--eventWidth)`;
                    dragObj.targetElem.querySelector('.end-time').style.right = `var(--breakIntervalWidth)`
                    dragObj.targetElem.querySelector('.fa-arrows-left-right').style.right = 'calc(var(--breakIntervalWidth) + 78px - 7px)'
                
                }
        
                let leftSlotTime = Math.round(targetProp.movedX / timetableProp.pxPerSlot) >= 0 ?  Math.round(targetProp.movedX / timetableProp.pxPerSlot) : 0

                // console.log('>>>>>>>>>moving distance', Math.round(targetProp.movedX / timetableProp.pxPerSlot))
                dragObj.targetElem.querySelector('.start-time').innerHTML = timeJson[leftSlotTime].start_time;
                dragObj.targetElem.querySelector('.end-time').innerHTML = timeJson[(leftSlotTime +  11)].end_time;
                // dragObj.targetElem.querySelector('.start-time').css.background = "#0d6efd !important"
                // dragObj.targetElem.querySelector('.end-time').css.background = "#0d6efd !important"
            }

        }

        function dragEnd(e) {

            // dragObj.targetElem.querySelector('.start-time').classList.remove('bg-primary')
            // dragObj.targetElem.querySelector('.end-time').classList.remove('bg-primary')
            dragObj.isMouseDown = false;
            // console.log('dragObj.isDragging >>> ', dragObj.isDragging)
            // console.log('dragObj.isMouseDown >>> ', dragObj.isMouseDown)
           
            
            if(!dragObj.isDraggable || !dragObj.targetElem || !dragObj.isDragging) {
         
                return false;
            }
            
            dragObj.isDraggable = false;
            dragObj.isMouseDown = false;
            dragObj.isDragging = false;
            
            // console.log('drag end start >> dragObj>>> ', dragObj)
            // console.log('target prop>>> ', targetProp)
            
            
            //CHECK FOR OVERLAPPING ELEMENTS AND SET ISDROPPABLE
        
            let tRect = dragObj.targetElem.getBoundingClientRect();
            let currentRoomElems = dragObj.currentRoom.querySelectorAll(`.room-slot-item:not(.active)`);
           
            // console.log("all curent room items:::", currentRoomElems)
            for (let elem of currentRoomElems) {

                // console.log("INSIDE LOOP TO CHECK COLLISION")
                let eRect = elem.getBoundingClientRect();

                if (elem.classList.contains('fixed-break') || elem.classList.contains('occupied-event')) {

                    console.log("INSIDE LOOP TO CHECK COLLISION BReaK")

                    if ((tRect.left >= eRect.left && tRect.left < eRect.right) || (tRect.right > eRect.left && tRect.right <= eRect.right) || (tRect.right >= eRect.right && tRect.left < eRect.right)) {
                        
                        dragObj.targetElem.querySelector('.start-time').innerHTML = timeJson[dragObj.startSlotIndex].start_time;
                        dragObj.targetElem.querySelector('.end-time').innerHTML = timeJson[dragObj.endSlotIndex].end_time;
                        dragObj.targetElem.querySelector('.break').style.display = 'block'
                        dragObj.isDroppable = false;
                        break;
                    }

                } else {

                    // 390  394

                    if ((Math.abs(tRect.left - eRect.left) <= 4) && ((Math.abs(tRect.right - eRect.right) <= 4))) {
                        // console.log("IS SWAP ELEMENET>>> ", true)
                        dragObj.isDroppable = true;
                        dragObj.swapElem = elem;
                        break;

                    } else if ((tRect.left >= eRect.left && tRect.left < eRect.right) || (tRect.right > eRect.left &&
                            tRect.right <= eRect.right) || (tRect.right >= eRect.right && tRect.left < eRect.right)) {
                                // console.log('Inside else Not droppable::')
                        dragObj.isDroppable = false;
                        dragObj.targetElem.querySelector('.start-time').innerHTML = timeJson[dragObj.startSlotIndex].start_time;
                        dragObj.targetElem.querySelector('.end-time').innerHTML = timeJson[dragObj.endSlotIndex].end_time;
                        break;
                    }

                }
            }


            // console.log('IS DROPABLE after loop>>> ', dragObj.isDroppable)


            if (!dragObj.isDroppable) {
                dragObj.targetElem.style.left = targetProp.initialX + 'px';
                dragObj.targetElem.style.top = targetProp.initialY + 'px';
                dragObj.targetElem.style.zIndex = 'unset';
                dragObj.targetElem.classList.remove('active')

                // console.log('setting isDroppable true')
                dragObj.isDroppable = true;
                return false;
            }


            //MOVE THE TARGET ELEMENT TO DROP LOCATION
            let imgnBoundingElems = [];

            // console.log('dragObj.targetElem>>> ', dragObj.targetElem)
            // console.log('imgnBoundingElems>>> ', imgnBoundingElems)

            for (let elem of currentRoomElems) {

                let eRect = elem.getBoundingClientRect();

                if ((tRect.left >= eRect.right)) {
                    imgnBoundingElems.push(elem);
                }
            }

            dragObj.clonedTarget = dragObj.targetElem.cloneNode(true);
            dragObj.clonedTarget.classList.remove('active');
            dragObj.clonedTarget.style.top = 0;
            dragObj.clonedTarget.style.left = (Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp.pxPerSlot) >= 0 ? Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp.pxPerSlot +'px' : '0px'
            dragObj.clonedTarget.style.zIndex = 'unset';

            // console.log('imgnBoundingElems>>> ', imgnBoundingElems)
            if (imgnBoundingElems.length > 0) {
                imgnBoundingElems[imgnBoundingElems.length - 1].insertAdjacentElement("afterend", dragObj.clonedTarget);
            } else if(currentRoomElems.length > 0) {
                currentRoomElems[0].insertAdjacentElement("beforebegin", dragObj.clonedTarget);
            } else {
                dragObj.currentRoom.append(dragObj.clonedTarget);
            }


            //SWAP EVENT LOGIC


            if (dragObj.swapElem && !(dragObj.swapElem == dragObj.targetElem)) {

                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> INSIDE CREATE SWAP ELEMENT")

                let swapClone = dragObj.swapElem.cloneNode(true);
                swapClone.classList.remove('active');
                swapClone.style.left = targetProp.initialX + 'px';
                swapClone.style.top = 0;
                // console.log('current room for swap::::::>>>>>>>>', dragObj.currentRoom)
            
               
                console.log('swap width1::::::>>>>>>>>', swapClone.style)
                if(swapClone.style.width == 'var(--eventNoBreakWidth)'){
                    swapClone.querySelector('.break').classList.remove('d-none');
                }
               
                if(dragObj.currentRoom !== dragObj.firstRoom){
                    dragObj.firstRoom.insertBefore(swapClone,  dragObj.firstRoom.childNodes[targetProp.index + 1])
                }
                else{
                    dragObj.currentRoom.insertBefore(swapClone,  dragObj.currentRoom.childNodes[targetProp.index + 1])
                }
                
                swapClone.querySelector('.start-time').innerHTML = timeJson[dragObj.startSlotIndex].start_time;
                swapClone.querySelector('.end-time').innerHTML = timeJson[dragObj.endSlotIndex].end_time;
                dragObj.swapElem.remove();
            }


            
            dragObj.targetElem.remove();
          

            // console.log('dragProp>>> ', dragObj)

            dragObj.targetElem = null;
            dragObj.clonedTarget = null;
            dragObj.swapElem = null;

        }

     

        function getCurrentRoom(elementList) {
            for (let elem of elementList) {
                if (elem.classList.contains('room-slots')) {
                    return elem;
                }
            }
        }


        function showError(errors) {
            console.log('error::::::::::', errors)
            let simpleAlert = new SimpleAlert();
            let obj = {
                title: errors.description,
                message: errors.data,
                type: 'alert-danger',
                buttons: {
                    positive: {
                        text: "Okay",
                        action: function () {
                            document.querySelector('.simple-alert').remove();
                        }
                    },
                    negative: {
                        text: "Cancel",
                        action: function () {
                            alert('Negative')
                        }
                    }
                }
            }
            simpleAlert.alert(obj);
        }


        function showSuccess(errors) {
            console.log('error::::::::::', errors)
            let simpleAlert = new SimpleAlert();
            let obj = {
                title: errors.description,
                message: errors.data,
                type: 'alert-success',
                buttons: {
                    positive: {
                        text: "Okay",
                        action: function () {
                            document.querySelector('.simple-alert').remove();
                        }
                    },
                    negative: {
                        text: "Cancel",
                        action: function () {
                            alert('Negative')
                        }
                    }
                }
            }
            simpleAlert.alert(obj);
        }

                            // })
                        </script>
                        <%- include("../partials/footerEnd") %>