


<%- include("../partials/head") %>
<style>
         hr{
            margin:  0 !important;
        }

        .timetable-container {
            width: var(--timetableWidth);
            background: #e6e6e6;
            /* border: 2px solid;    */
        }

        .room-no {
            min-width: var(--roomNoWidth);
            max-width: var(--roomNoWidth);
            background: #006faa;
            color: #fff;
            /* border-right: 1px solid; */
            border-bottom: 1px solid;
            text-align: center;
            padding: 125px 0px;
        }

        .room-slots {
            width: var(--roomSlotWidth);
            min-height: 250px;
            position: relative;
            background-size: var(--breakIntervalWidth);
            background-image:
                linear-gradient(to right, grey 1px, transparent 1px)
        }


        .room {
            border: 1px solid black;
            
        }

        .event {
            position: absolute;
            width: var(--eventWidth);
            background: #f0efef;
            word-break: break-word;
            height: 100%;
            /* overflow: hidden; */
            padding-right: calc(var(--breakIntervalWidth) + 2px);
            padding-left:  2px;
            padding-top: 5px;
            font-size: 14px;
        }

        .event:nth-child(odd) {
            /* background: rgb(235, 255, 144); */
            background: #ffffff;
        }

        .event:nth-child(even) {
            background: rgb(235, 255, 144);
        }

        .event:nth-child(even) .start-time{
            background-color: #dc3545 !important;
      
        }

        .event:nth-child(even) .end-time{
            background: #dc3545 !important;
        }
       

        .start-time{
            position: absolute;
            left: 0;
            bottom: 0;
            border-radius: 0!important;
            font-size: 0.75rem;
        }

        .end-time{
            position: absolute;
            right: var(--breakIntervalWidth);
            bottom: 0;
            border-radius: 0!important;
            font-size: 0.75rem;
        }

        .fa-arrows-left-right{
            position: absolute;
            right: calc(var(--breakIntervalWidth) + 78px - 7px);
            bottom: 0;
        }

        .break {
            position: absolute;
            height: 100%;
            width: var(--breakIntervalWidth);
            background-size: 3px;
            background: repeating-linear-gradient(45deg, #e9ecef, #adb5bd 15px);
        }
</style>
<%- include("../partials/leftSidebar") %>
<%- include("../partials/header") %>
<!--Notificaion icon-->
<!--HEADER END-->

<div class="main-content">
    <!--DASHBOARD CONTENT START-->
    <div class="breadcrumbs-container">

        <ul class="breadcrumb">
            <% if(breadcrumbs){%> <% for (let crumbs of breadcrumbs){%>
            <li><a href="<%- crumbs.url%>"><%- crumbs.name%></a></li>
            <%} }%>
        </ul>
    </div>

    <%- include("../partials/timetableSimulationMenu") %>
    <div class="card table-card mb-1 timetable-filter-container">
        <div class="card-body" id="timetable-filter">
            <div class="row">
                <div class="input-groups col-md-4 col-sm-12">
                    <label for="program-name" class="d-flex justify-content-between">Select Program:</label>

                    <select name="program-name" id="program-name" class="form-select">
                        <option selected disabled value>--Select Program--</option>
                        <% if(programList.length>0){ %>
                        <option value="">All Programs</option>
                        <% } %>
                        <% for(let program of programList){%>
                        <option value="<%- program.id%>"><%-program.program_name%></option>
                        <%}%>
                    </select>
                </div>
                <div class="input-groups col-md-4 col-sm-12">
                    <label for="program-name">Select Session:</label>
                    <select name="session-name" id="session-name" class="form-select">
                        <option selected disabled value>--Select Session--</option>
                    </select>
                </div>

                <div class="input-groups col-md-4 col-sm-12">
                    <label for="program-name">Select Day:</label>
                    <select name="day" id="day" class="form-select" disabled>
                        <option selected disabled value>--Select Day--</option>
                        <% for(let day of dayList){%>
                        <option value="<%- day.id%>"><%- day.day_name %></option>
                        <%}%>
                    </select>
                </div>
            </div>
            <div class="my-3">
                <div class="table-searchbar-container"><button type="button"><i class="fas fa-search"></i> </button><input
                    type="search" id="searchkeyword" placeholder="Enter keywords" class="table-searchbar">
            </div>
            </div>
        </div>
    </div>

    <div class="card table-card">
        <div class="card-header table-card-header text-uppercase d-flex align-items-center justify-content-between">
            <div>
                <h5>Time Table</h5>
            </div>
            <div class="ms-auto me-2">
                <button class="btn btn-primary pending-events-modal my-2" data-target="#pendingEventModal"><i class="fa-solid fa-list-ul"></i> Pending Events</button>
                
            </div>
        </div>

        <div class="card-body">
            <!-- <div class="table-searchbar-container"><button type="button"><i class="fas fa-search"></i> </button><input
                    type="search" id="searchkeyword" placeholder="Enter keywords" class="table-searchbar">
            </div> -->
            <div class="timetable-container">
       
            </div>
        </div>


    </div>


  <!-- Modal -->
  <div class="modal fade" id="slotModal" tabindex="-1" aria-labelledby="slotModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="slotModalLabel">Slot Details</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            
        </div>
        <div class="modal-footer">
          <!-- <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> -->
          <button type="button" class="btn btn-primary" id="drop-slot">Drop Slot</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Pending event list modal -->
  <div class="modal fade" id="pendingEventModal" tabindex="-1" aria-labelledby="pendingEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-fullscreen">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="pendingEventModalLabel">Pending Event List</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <table class="table pending-events-table">
                <thead>
                    <th>Sr.No</th>
                    <th>Program Name</th>
                    <th>Academic Session</th>
                    <th>Module Name</th>
                    <th>Division</th>
                    <th>Batch</th>
                    <th>Event Type</th>
                </thead>
                <tbody>

                </tbody>
            </table>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
          <!-- <button type="button" class="btn btn-primary" id="drop-slot">Drop Slot</button> -->
        </div>
      </div>
    </div>
  </div>

    <%- include("../partials/footer") %>
    <script src="/socket.io/socket.io.js"></script>

                        <script>
                            // $(document).ready(function () {
                                
                                //DISPLAYING TIMETABLE AND DRAG EVENTS
                                
                                let eventListJson;

          

        let roomJson = [{"id":1,"room_number":"701","room_type_id":1},{"id":2,"room_number":"702","room_type_id":1},{"id":3,"room_number":"703","room_type_id":1},{"id":4,"room_number":"704","room_type_id":1},{"id":5,"room_number":"705","room_type_id":1},{"id":6,"room_number":"706","room_type_id":1},{"id":7,"room_number":"707","room_type_id":1},{"id":8,"room_number":"708","room_type_id":1},{"id":9,"room_number":"709","room_type_id":1},{"id":10,"room_number":"710","room_type_id":1},{"id":11,"room_number":"711","room_type_id":1},{"id":12,"room_number":"712","room_type_id":1},{"id":13,"room_number":"713","room_type_id":1},{"id":40,"room_number":"714","room_type_id":1},{"id":14,"room_number":"716","room_type_id":1},{"id":15,"room_number":"717","room_type_id":1},{"id":16,"room_number":"718","room_type_id":1},{"id":41,"room_number":"719","room_type_id":1},{"id":17,"room_number":"801","room_type_id":1},{"id":18,"room_number":"802","room_type_id":1},{"id":19,"room_number":"803","room_type_id":1},{"id":20,"room_number":"804","room_type_id":1},{"id":21,"room_number":"805","room_type_id":1},{"id":22,"room_number":"807","room_type_id":1},{"id":23,"room_number":"808","room_type_id":1},{"id":24,"room_number":"809","room_type_id":1},{"id":25,"room_number":"810","room_type_id":1},{"id":26,"room_number":"811","room_type_id":1},{"id":27,"room_number":"812","room_type_id":1},{"id":28,"room_number":"813","room_type_id":1},{"id":29,"room_number":"814","room_type_id":1},{"id":30,"room_number":"815","room_type_id":1},{"id":31,"room_number":"816","room_type_id":1},{"id":32,"room_number":"817","room_type_id":1},{"id":33,"room_number":"818","room_type_id":1},{"id":34,"room_number":"819","room_type_id":1},{"id":35,"room_number":"820","room_type_id":1},{"id":39,"room_number":"927","room_type_id":1},{"id":36,"room_number":"CC1","room_type_id":3},{"id":37,"room_number":"CC2","room_type_id":3},{"id":38,"room_number":"CC3","room_type_id":3}]
        let cssRoot = document.querySelector(':root');
        let styleRoot = getComputedStyle(cssRoot);

        document.addEventListener('mousedown', dragStart);
        document.addEventListener('mousemove', onDrag)
        document.addEventListener('mouseup', dragEnd)

        let roomHtml = ``;
        for( let room of roomJson ){

            roomHtml +=`<div class="d-flex room" data-room-lid="${room.id}">
            <div class="room-no" data-room-lid="${room.id}" data-room-type-lid="${room.room_type_id}">
                ${room.room_number}
            </div>
            <div class="room-slots">

            </div>
            </div>`
        }

        let timeTableBox = document.querySelector('.timetable-container');
        timeTableBox.innerHTML = roomHtml;

        let timetableProp = {
            totalSlots: 105,
            pxPerSlot: 13,
            roomNoWidth: 50,
            
        }
        cssRoot.style.setProperty('--timetableWidth', `${timetableProp.totalSlots * timetableProp.pxPerSlot + 50 }px`);
        cssRoot.style.setProperty('--roomNoWidth', `${timetableProp.roomNoWidth}px`);
        cssRoot.style.setProperty('--breakIntervalWidth', `${timetableProp.pxPerSlot}px`);
        cssRoot.style.setProperty('--eventWidth', `${(timetableProp.pxPerSlot * 12) + timetableProp.pxPerSlot }px`);
        cssRoot.style.setProperty('--roomSlotWidth', `${timetableProp.totalSlots * timetableProp.pxPerSlot}px`);
        
        

        let timeJson = [{"id":91,"start_time":"07:30:00","end_time":"07:35:00","slot_name":"slot91"},{"id":92,"start_time":"07:35:00","end_time":"07:40:00","slot_name":"slot92"},{"id":93,"start_time":"07:40:00","end_time":"07:45:00","slot_name":"slot93"},{"id":94,"start_time":"07:45:00","end_time":"07:50:00","slot_name":"slot94"},{"id":95,"start_time":"07:50:00","end_time":"07:55:00","slot_name":"slot95"},{"id":96,"start_time":"07:55:00","end_time":"08:00:00","slot_name":"slot96"},{"id":97,"start_time":"08:00:00","end_time":"08:05:00","slot_name":"slot97"},{"id":98,"start_time":"08:05:00","end_time":"08:10:00","slot_name":"slot98"},{"id":99,"start_time":"08:10:00","end_time":"08:15:00","slot_name":"slot99"},{"id":100,"start_time":"08:15:00","end_time":"08:20:00","slot_name":"slot100"},{"id":101,"start_time":"08:20:00","end_time":"08:25:00","slot_name":"slot101"},{"id":102,"start_time":"08:25:00","end_time":"08:30:00","slot_name":"slot102"},{"id":103,"start_time":"08:30:00","end_time":"08:35:00","slot_name":"slot103"},{"id":104,"start_time":"08:35:00","end_time":"08:40:00","slot_name":"slot104"},{"id":105,"start_time":"08:40:00","end_time":"08:45:00","slot_name":"slot105"},{"id":106,"start_time":"08:45:00","end_time":"08:50:00","slot_name":"slot106"},{"id":107,"start_time":"08:50:00","end_time":"08:55:00","slot_name":"slot107"},{"id":108,"start_time":"08:55:00","end_time":"09:00:00","slot_name":"slot108"},{"id":109,"start_time":"09:00:00","end_time":"09:05:00","slot_name":"slot109"},{"id":110,"start_time":"09:05:00","end_time":"09:10:00","slot_name":"slot110"},{"id":111,"start_time":"09:10:00","end_time":"09:15:00","slot_name":"slot111"},{"id":112,"start_time":"09:15:00","end_time":"09:20:00","slot_name":"slot112"},{"id":113,"start_time":"09:20:00","end_time":"09:25:00","slot_name":"slot113"},{"id":114,"start_time":"09:25:00","end_time":"09:30:00","slot_name":"slot114"},{"id":115,"start_time":"09:30:00","end_time":"09:35:00","slot_name":"slot115"},{"id":116,"start_time":"09:35:00","end_time":"09:40:00","slot_name":"slot116"},{"id":117,"start_time":"09:40:00","end_time":"09:45:00","slot_name":"slot117"},{"id":118,"start_time":"09:45:00","end_time":"09:50:00","slot_name":"slot118"},{"id":119,"start_time":"09:50:00","end_time":"09:55:00","slot_name":"slot119"},{"id":120,"start_time":"09:55:00","end_time":"10:00:00","slot_name":"slot120"},{"id":121,"start_time":"10:00:00","end_time":"10:05:00","slot_name":"slot121"},{"id":122,"start_time":"10:05:00","end_time":"10:10:00","slot_name":"slot122"},{"id":123,"start_time":"10:10:00","end_time":"10:15:00","slot_name":"slot123"},{"id":124,"start_time":"10:15:00","end_time":"10:20:00","slot_name":"slot124"},{"id":125,"start_time":"10:20:00","end_time":"10:25:00","slot_name":"slot125"},{"id":126,"start_time":"10:25:00","end_time":"10:30:00","slot_name":"slot126"},{"id":127,"start_time":"10:30:00","end_time":"10:35:00","slot_name":"slot127"},{"id":128,"start_time":"10:35:00","end_time":"10:40:00","slot_name":"slot128"},{"id":129,"start_time":"10:40:00","end_time":"10:45:00","slot_name":"slot129"},{"id":130,"start_time":"10:45:00","end_time":"10:50:00","slot_name":"slot130"},{"id":131,"start_time":"10:50:00","end_time":"10:55:00","slot_name":"slot131"},{"id":132,"start_time":"10:55:00","end_time":"11:00:00","slot_name":"slot132"},{"id":133,"start_time":"11:00:00","end_time":"11:05:00","slot_name":"slot133"},{"id":134,"start_time":"11:05:00","end_time":"11:10:00","slot_name":"slot134"},{"id":135,"start_time":"11:10:00","end_time":"11:15:00","slot_name":"slot135"},{"id":136,"start_time":"11:15:00","end_time":"11:20:00","slot_name":"slot136"},{"id":137,"start_time":"11:20:00","end_time":"11:25:00","slot_name":"slot137"},{"id":138,"start_time":"11:25:00","end_time":"11:30:00","slot_name":"slot138"},{"id":139,"start_time":"11:30:00","end_time":"11:35:00","slot_name":"slot139"},{"id":140,"start_time":"11:35:00","end_time":"11:40:00","slot_name":"slot140"},{"id":141,"start_time":"11:40:00","end_time":"11:45:00","slot_name":"slot141"},{"id":142,"start_time":"11:45:00","end_time":"11:50:00","slot_name":"slot142"},{"id":143,"start_time":"11:50:00","end_time":"11:55:00","slot_name":"slot143"},{"id":144,"start_time":"11:55:00","end_time":"12:00:00","slot_name":"slot144"},{"id":145,"start_time":"12:00:00","end_time":"12:05:00","slot_name":"slot145"},{"id":146,"start_time":"12:05:00","end_time":"12:10:00","slot_name":"slot146"},{"id":147,"start_time":"12:10:00","end_time":"12:15:00","slot_name":"slot147"},{"id":148,"start_time":"12:15:00","end_time":"12:20:00","slot_name":"slot148"},{"id":149,"start_time":"12:20:00","end_time":"12:25:00","slot_name":"slot149"},{"id":150,"start_time":"12:25:00","end_time":"12:30:00","slot_name":"slot150"},{"id":151,"start_time":"12:30:00","end_time":"12:35:00","slot_name":"slot151"},{"id":152,"start_time":"12:35:00","end_time":"12:40:00","slot_name":"slot152"},{"id":153,"start_time":"12:40:00","end_time":"12:45:00","slot_name":"slot153"},{"id":154,"start_time":"12:45:00","end_time":"12:50:00","slot_name":"slot154"},{"id":155,"start_time":"12:50:00","end_time":"12:55:00","slot_name":"slot155"},{"id":156,"start_time":"12:55:00","end_time":"13:00:00","slot_name":"slot156"},{"id":157,"start_time":"13:00:00","end_time":"13:05:00","slot_name":"slot157"},{"id":158,"start_time":"13:05:00","end_time":"13:10:00","slot_name":"slot158"},{"id":159,"start_time":"13:10:00","end_time":"13:15:00","slot_name":"slot159"},{"id":160,"start_time":"13:15:00","end_time":"13:20:00","slot_name":"slot160"},{"id":161,"start_time":"13:20:00","end_time":"13:25:00","slot_name":"slot161"},{"id":162,"start_time":"13:25:00","end_time":"13:30:00","slot_name":"slot162"},{"id":163,"start_time":"13:30:00","end_time":"13:35:00","slot_name":"slot163"},{"id":164,"start_time":"13:35:00","end_time":"13:40:00","slot_name":"slot164"},{"id":165,"start_time":"13:40:00","end_time":"13:45:00","slot_name":"slot165"},{"id":166,"start_time":"13:45:00","end_time":"13:50:00","slot_name":"slot166"},{"id":167,"start_time":"13:50:00","end_time":"13:55:00","slot_name":"slot167"},{"id":168,"start_time":"13:55:00","end_time":"14:00:00","slot_name":"slot168"},{"id":169,"start_time":"14:00:00","end_time":"14:05:00","slot_name":"slot169"},{"id":170,"start_time":"14:05:00","end_time":"14:10:00","slot_name":"slot170"},{"id":171,"start_time":"14:10:00","end_time":"14:15:00","slot_name":"slot171"},{"id":172,"start_time":"14:15:00","end_time":"14:20:00","slot_name":"slot172"},{"id":173,"start_time":"14:20:00","end_time":"14:25:00","slot_name":"slot173"},{"id":174,"start_time":"14:25:00","end_time":"14:30:00","slot_name":"slot174"},{"id":175,"start_time":"14:30:00","end_time":"14:35:00","slot_name":"slot175"},{"id":176,"start_time":"14:35:00","end_time":"14:40:00","slot_name":"slot176"},{"id":177,"start_time":"14:40:00","end_time":"14:45:00","slot_name":"slot177"},{"id":178,"start_time":"14:45:00","end_time":"14:50:00","slot_name":"slot178"},{"id":179,"start_time":"14:50:00","end_time":"14:55:00","slot_name":"slot179"},{"id":180,"start_time":"14:55:00","end_time":"15:00:00","slot_name":"slot180"},{"id":181,"start_time":"15:00:00","end_time":"15:05:00","slot_name":"slot181"},{"id":182,"start_time":"15:05:00","end_time":"15:10:00","slot_name":"slot182"},{"id":183,"start_time":"15:10:00","end_time":"15:15:00","slot_name":"slot183"},{"id":184,"start_time":"15:15:00","end_time":"15:20:00","slot_name":"slot184"},{"id":185,"start_time":"15:20:00","end_time":"15:25:00","slot_name":"slot185"},{"id":186,"start_time":"15:25:00","end_time":"15:30:00","slot_name":"slot186"},{"id":187,"start_time":"15:30:00","end_time":"15:35:00","slot_name":"slot187"},{"id":188,"start_time":"15:35:00","end_time":"15:40:00","slot_name":"slot188"},{"id":189,"start_time":"15:40:00","end_time":"15:45:00","slot_name":"slot189"},{"id":190,"start_time":"15:45:00","end_time":"15:50:00","slot_name":"slot190"},{"id":191,"start_time":"15:50:00","end_time":"15:55:00","slot_name":"slot191"},{"id":192,"start_time":"15:55:00","end_time":"16:00:00","slot_name":"slot192"},{"id":193,"start_time":"16:00:00","end_time":"16:05:00","slot_name":"slot193"},{"id":194,"start_time":"16:05:00","end_time":"16:10:00","slot_name":"slot194"},{"id":195,"start_time":"16:10:00","end_time":"16:15:00","slot_name":"slot195"}]
        
        let eventJson = [{"id":1912,"program_lid":1,"acad_session_lid":18,"course_lid":86,"division":"B    ","batch":1,"room_lid":23,"slot_start_lid":91},{"id":1916,"program_lid":1,"acad_session_lid":18,"course_lid":85,"division":"C    ","batch":1,"room_lid":24,"slot_start_lid":91},{"id":1908,"program_lid":1,"acad_session_lid":18,"course_lid":84,"division":"A    ","batch":1,"room_lid":22,"slot_start_lid":91},{"id":1913,"program_lid":1,"acad_session_lid":18,"course_lid":88,"division":"B    ","batch":1,"room_lid":23,"slot_start_lid":104},{"id":1917,"program_lid":1,"acad_session_lid":18,"course_lid":86,"division":"C    ","batch":1,"room_lid":24,"slot_start_lid":104},{"id":1909,"program_lid":1,"acad_session_lid":18,"course_lid":85,"division":"A    ","batch":1,"room_lid":22,"slot_start_lid":104},{"id":1914,"program_lid":1,"acad_session_lid":18,"course_lid":85,"division":"B    ","batch":1,"room_lid":23,"slot_start_lid":122},{"id":1910,"program_lid":1,"acad_session_lid":18,"course_lid":87,"division":"A    ","batch":1,"room_lid":22,"slot_start_lid":122},{"id":1918,"program_lid":1,"acad_session_lid":18,"course_lid":87,"division":"C    ","batch":1,"room_lid":24,"slot_start_lid":122},{"id":1915,"program_lid":1,"acad_session_lid":18,"course_lid":84,"division":"B    ","batch":1,"room_lid":23,"slot_start_lid":135},{"id":1911,"program_lid":1,"acad_session_lid":18,"course_lid":88,"division":"A    ","batch":1,"room_lid":22,"slot_start_lid":135},{"id":1919,"program_lid":1,"acad_session_lid":18,"course_lid":88,"division":"C    ","batch":1,"room_lid":24,"slot_start_lid":135}]
        
        
        let targetProp = {};

        let dragObj = {
            initialClientX: null,
            initialClientY: null,
            isMouseDown: false,
            targetElem: null,
            isDraggable: false,
            isDroppable: true,
            isDragging: false
        }
     
        // let roomList = document.querySelector(`.room[data-room-lid = "2"] .room-slots`);
        // let div = document.createElement('div');
        // div.innerHTML = "hello";
        // console.log('room list::::::', roomList.append(div))
        let timeTablestartSlot = timeJson[0].id;

        fetch("/js/events.json").then(response => { return response.json();})
        .then(data => {eventListJson = data;
                 console.log('je;;o',eventListJson)
                
                 for( let event of eventListJson) {

                let roomSlot = document.querySelector(`.room[data-room-lid = "${event.room_lid}"] .room-slots`)

                let eventStartSlot = event.slot_start_lid;
                let eventLeftPosition =   (eventStartSlot - timeTablestartSlot) * timetableProp.pxPerSlot
                console.log('left position:::::>>', eventLeftPosition)
                let breakElement =(eventLeftPosition + (timetableProp.pxPerSlot * 12) >= (timetableProp.totalSlots * timetableProp.pxPerSlot)) ? `` : `<div class="break" style="left: ${timetableProp.pxPerSlot * 12}px; top: 0; bottom:0; width:${timetableProp.pxPerSlot}px"></div>`

                let roomSlotItem = document.createElement('div');
                roomSlotItem.setAttribute("class","event room-slot-item")
                roomSlotItem.setAttribute("style",`left: ${eventLeftPosition}px ;top: 0; text-align:center`)
                roomSlotItem.setAttribute("data-event-lid",`${event.id}`)
                roomSlotItem.innerHTML = `${event.program_name} - ${event.acad_session} <br><hr> ${event.module_name} <br><hr> ${event.division} - ${event.batch} (${event.event_type}) <span class="badge bg-info start-time">${timeJson[eventStartSlot - timeTablestartSlot].start_time}</span>
                <i class="fa-solid fa-arrows-left-right"></i><span class="badge bg-info end-time">${timeJson[eventStartSlot - timeTablestartSlot + 11].end_time}</span> 
                                ${breakElement}
                                `;

                // let breakLeftPosition = eventLeftPosition + (timetableProp.pxPerSlot * 12);
                // let breakItem = document.createElement('div');
                // breakItem.setAttribute("class","break room-slot-item")
                // breakItem.setAttribute("style",`left: ${breakLeftPosition}px; top: 0;`)

                roomSlot.append(roomSlotItem)

                }
                });


                                    ajaxApi(ApiObj).then(result => {
                                        console.log('ALL EVENT RESULTS:::::::::::::::::::::', result)
                                        allocationHtmlTable(result)
                                        //  }, 2000)
                                        //   $(this).attr('disabled','disabled');
                                    }).catch(error => {
                                        // showError(error.responseJSON)
                                    })
                              



        function dragStart(e) {
           
            dragObj.tableLeftPosition = document.querySelector('.timetable-container').getBoundingClientRect().left;
            console.log('hello:::',  dragObj.tableLeftPosition)
            e.preventDefault();

            dragObj.relativeClientX = e.clientX -  dragObj.tableLeftPosition
   
            if(e.buttons != 1) {
                return false;
            }

            dragObj.initialClientX = dragObj.relativeClientX;
            dragObj.initialClientY = e.clientY;
            document.querySelectorAll('.room-slots').forEach(e => {e.style.outline = "none"})
    
           
            if (e.target.classList.contains('event')) {
                
                console.log("IS DRAGGABLE");

                dragObj.isMouseDown = true;
                
                dragObj.targetElem = e.target;
                dragObj.firstRoom = dragObj.targetElem.parentElement
                console.log('initial room::',  dragObj.firstRoom)
                dragObj.targetElem.classList.add('active')
                console.log('target time element::', dragObj.targetElem.querySelector('.start-time'))

                dragObj.initialRoom = getCurrentRoom(document.elementsFromPoint(dragObj.relativeClientX, e.clientY));
                console.log('roomslot:::::>>>>', dragObj.initialRoom)
                dragObj.initialRoom.style.cssText = `outline: 3px solid #ff8400`;

                e.target.style.zIndex = 100;
                
                targetProp.index = Array.from(dragObj.initialRoom.children).indexOf(dragObj.targetElem);

                targetProp.oldOffsetX = e.offsetX;
                targetProp.oldOffsetY = e.offsetY;
                targetProp.width = dragObj.targetElem.clientWidth

                targetProp.initialX = e.target.offsetLeft;
                targetProp.initialY = e.target.offsetTop;
                targetProp.initialBounding = dragObj.targetElem.getBoundingClientRect();
                targetProp.initialClientX = dragObj.relativeClientX;
                targetProp.initialClientY = e.clientY;
                dragObj.isDraggable = true;

                dragObj.startSlotIndex =  (Math.round((targetProp.initialBounding.left - dragObj.tableLeftPosition - timetableProp.roomNoWidth)/timetableProp.pxPerSlot)) ;
                dragObj.endSlotIndex = (Math.round((targetProp.initialBounding.right - dragObj.tableLeftPosition -  timetableProp.roomNoWidth - timetableProp.pxPerSlot)/timetableProp.pxPerSlot)) - 1;


                dragObj.targetElem.querySelector('.start-time').innerHTML = timeJson[dragObj.startSlotIndex].start_time;
                dragObj.targetElem.querySelector('.end-time').innerHTML = timeJson[dragObj.endSlotIndex].end_time;
                console.log('start indexx', dragObj.startSlotIndex )
                console.log('end indexx', dragObj.endSlotIndex)
                // console.log('bounding:::',dragObj.endSlotIndex)  

            } else {
                console.log('Not draggable')
                dragObj.isDraggable = false;
            }

        }

        function onDrag(e) {
           
            dragObj.relativeClientX = e.clientX -  dragObj.tableLeftPosition
           
            if (!dragObj.isDraggable || !dragObj.isMouseDown) {
        
                return false;
            }

         
            if(e.clientX !== dragObj.clientX || e.clientY !== dragObj.clientY) {
              
                dragObj.isDragging = true;
            }

            console.log('CALLING ON DARG', dragObj.isDragging)

            dragObj.currentRoom = getCurrentRoom(document.elementsFromPoint(dragObj.relativeClientX, e.clientY));

            if (dragObj.currentRoom != dragObj.initialRoom) {
                dragObj.initialRoom.style.cssText += `outline: unset`;
                dragObj.currentRoom.style.cssText += `outline: 3px solid #ff8400`;
                dragObj.initialRoom = dragObj.currentRoom;
            }
        

            targetProp.movedX = dragObj.relativeClientX - targetProp.oldOffsetX - timetableProp.roomNoWidth;
            targetProp.movedY = e.clientY - targetProp.initialClientY;
           

            targetProp.movedX = targetProp.movedX > (timetableProp.totalSlots * timetableProp.pxPerSlot) - targetProp
                .width ? (timetableProp.totalSlots * timetableProp.pxPerSlot) - targetProp.width : targetProp.movedX;

            dragObj.targetElem.style.left = Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp.pxPerSlot +'px';
            dragObj.targetElem.style.top =   `${targetProp.movedY}px`;

            console.log('top position:::::', targetProp.movedY)
            
        
            //No break condition for room being placed at end
          if((Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp
                .pxPerSlot + (timetableProp.pxPerSlot * 12) + timetableProp.pxPerSlot) >= (timetableProp.totalSlots * timetableProp.pxPerSlot))
            {
               
                cssRoot.style.setProperty('--eventNoBreakWidth', `${(timetableProp.pxPerSlot * 12)}px`);

                dragObj.targetElem.style.width = `var(--eventNoBreakWidth)`

                dragObj.targetElem.querySelector('.break').classList.add('d-none');
                
                dragObj.targetElem.style.left =  Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp
                .pxPerSlot + 'px'

                if(((timetableProp.totalSlots * timetableProp.pxPerSlot) - (Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp
                .pxPerSlot + (timetableProp.pxPerSlot * 12))) > 0){
                   
                    dragObj.targetElem.querySelector('.break').classList.remove('d-none')
                }
            }
            else{
                dragObj.targetElem.querySelector('.break').classList.remove('d-none');
                dragObj.targetElem.style.width = `var(--eventWidth)`
              
            }
      

            console.log('>>>>>>>>>moving distance', Math.round(targetProp.movedX / timetableProp.pxPerSlot))
            dragObj.targetElem.querySelector('.start-time').innerHTML = timeJson[Math.round(targetProp.movedX / timetableProp.pxPerSlot)].start_time;
            dragObj.targetElem.querySelector('.end-time').innerHTML = timeJson[(Math.round(targetProp.movedX / timetableProp.pxPerSlot) +  11)].end_time;
            // dragObj.targetElem.querySelector('.start-time').css.background = "#0d6efd !important"
            // dragObj.targetElem.querySelector('.end-time').css.background = "#0d6efd !important"

        }

        function dragEnd(e) {

            // dragObj.targetElem.querySelector('.start-time').classList.remove('bg-primary')
            // dragObj.targetElem.querySelector('.end-time').classList.remove('bg-primary')
            dragObj.isMouseDown = false;
            console.log('dragObj.isDragging >>> ', dragObj.isDragging)
            console.log('dragObj.isMouseDown >>> ', dragObj.isMouseDown)
           
            
            if(!dragObj.isDraggable || !dragObj.targetElem || !dragObj.isDragging) {
         
                return false;
            }
            
            dragObj.isDraggable = false;
            dragObj.isMouseDown = false;
            dragObj.isDragging = false;
            
            console.log('drag end start >> dragObj>>> ', dragObj)
            console.log('target prop>>> ', targetProp)
            
            
            //CHECK FOR OVERLAPPING ELEMENTS AND SET ISDROPPABLE
        
            let tRect = dragObj.targetElem.getBoundingClientRect();
            let currentRoomElems = dragObj.currentRoom.querySelectorAll(`.room-slot-item:not(.active)`);
           
            console.log("all curent room items:::", currentRoomElems)
            for (let elem of currentRoomElems) {

                console.log("INSIDE LOOP TO CHECK COLLISION")
                let eRect = elem.getBoundingClientRect();

                // if (elem.classList.contains('break')) {

                //     console.log("INSIDE LOOP TO CHECK COLLISION BReaK")

                //     if ((tRect.left >= eRect.left && tRect.left < eRect.right) || (tRect.right > eRect.left && tRect.right <= eRect.right) || (tRect.right >= eRect.right && tRect.left < eRect.right)) {
                        
                //         dragObj.targetElem.querySelector('.start-time').innerHTML = timeJson[dragObj.startSlotIndex].start_time;
                //         dragObj.targetElem.querySelector('.end-time').innerHTML = timeJson[dragObj.endSlotIndex].end_time;
                //         dragObj.isDroppable = false;
                //         break;
                //     }

                // } else {

                    console.log("INSIDE LOOP TO CHECK EVENT")
                    console.log('tRect.left>> ', tRect.left)
                    console.log('eRect.left>> ', eRect.left)

                    console.log('tRect.right>> ', tRect.right)
                    console.log('eRect.right>> ', eRect.right)


                    // 390  394

                    if ((Math.abs(tRect.left - eRect.left) <= 4) && ((Math.abs(tRect.right - eRect.right) <= 4))) {
                        console.log("IS SWAP ELEMENET>>> ", true)
                        dragObj.isDroppable = true;
                        dragObj.swapElem = elem;
                        break;

                    } else if ((tRect.left >= eRect.left && tRect.left < eRect.right) || (tRect.right > eRect.left &&
                            tRect.right <= eRect.right) || (tRect.right >= eRect.right && tRect.left < eRect.right)) {
                                console.log('Inside else Not droppable::')
                        dragObj.isDroppable = false;
                        dragObj.targetElem.querySelector('.start-time').innerHTML = timeJson[dragObj.startSlotIndex].start_time;
                        dragObj.targetElem.querySelector('.end-time').innerHTML = timeJson[dragObj.endSlotIndex].end_time;
                        break;
                    }

                // }
            }


            console.log('IS DROPABLE after loop>>> ', dragObj.isDroppable)


            if (!dragObj.isDroppable) {
                dragObj.targetElem.style.left = targetProp.initialX + 'px';
                dragObj.targetElem.style.top = targetProp.initialY + 'px';
                dragObj.targetElem.style.zIndex = 'unset';
                dragObj.targetElem.classList.remove('active')

                console.log('setting isDroppable true')
                dragObj.isDroppable = true;
                return false;
            }


            //MOVE THE TARGET ELEMENT TO DROP LOCATION
            let imgnBoundingElems = [];

            console.log('dragObj.targetElem>>> ', dragObj.targetElem)
            console.log('imgnBoundingElems>>> ', imgnBoundingElems)

            for (let elem of currentRoomElems) {

                let eRect = elem.getBoundingClientRect();

                if ((tRect.left >= eRect.right)) {
                    imgnBoundingElems.push(elem);
                }
            }

            dragObj.clonedTarget = dragObj.targetElem.cloneNode(true);
            dragObj.clonedTarget.classList.remove('active');
            dragObj.clonedTarget.style.top = 0;
            dragObj.clonedTarget.style.left = Math.round(targetProp.movedX / timetableProp.pxPerSlot) * timetableProp
                .pxPerSlot + 'px';
            dragObj.clonedTarget.style.zIndex = 'unset';

            console.log('imgnBoundingElems>>> ', imgnBoundingElems)
            if (imgnBoundingElems.length > 0) {
                imgnBoundingElems[imgnBoundingElems.length - 1].insertAdjacentElement("afterend", dragObj.clonedTarget);
            } else if(currentRoomElems.length > 0) {
                currentRoomElems[0].insertAdjacentElement("beforebegin", dragObj.clonedTarget);
            } else {
                dragObj.currentRoom.append(dragObj.clonedTarget);
            }


            //SWAP EVENT LOGIC


            if (dragObj.swapElem && !(dragObj.swapElem == dragObj.targetElem)) {

                console.log(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> INSIDE CREATE SWAP ELEMENT")

                let swapClone = dragObj.swapElem.cloneNode(true);
                swapClone.classList.remove('active');
                swapClone.style.left = targetProp.initialX + 'px';
                swapClone.style.top = 0;
                console.log('current room for swap::::::>>>>>>>>', dragObj.currentRoom)
                console.log('Initial room for swap::::::>>>>>>>>', dragObj.firstRoom)
                if(dragObj.currentRoom !== dragObj.firstRoom){
                    dragObj.firstRoom.insertBefore(swapClone,  dragObj.firstRoom.childNodes[targetProp.index + 1])
                }
                else{
                    dragObj.currentRoom.insertBefore(swapClone,  dragObj.currentRoom.childNodes[targetProp.index + 1])
                }
                
                swapClone.querySelector('.start-time').innerHTML = timeJson[dragObj.startSlotIndex].start_time;
                swapClone.querySelector('.end-time').innerHTML = timeJson[dragObj.endSlotIndex].end_time;
                dragObj.swapElem.remove();
            }


            
            dragObj.targetElem.remove();
          

            console.log('dragProp>>> ', dragObj)

            dragObj.targetElem = null;
            dragObj.clonedTarget = null;
            dragObj.swapElem = null;

        }


        function getCurrentRoom(elementList) {
            for (let elem of elementList) {
                if (elem.classList.contains('room-slots')) {
                    return elem;
                }
            }
        }


       






                                function showError(errors) {
                                    console.log('error::::::::::', errors)
                                    let simpleAlert = new SimpleAlert();
                                    let obj = {
                                        title: errors.description,
                                        message: errors.data,
                                        type: 'alert-danger',
                                        buttons: {
                                            positive: {
                                                text: "Okay",
                                                action: function () {
                                                    document.querySelector('.simple-alert').remove();
                                                }
                                            },
                                            negative: {
                                                text: "Cancel",
                                                action: function () {
                                                    alert('Negative')
                                                }
                                            }
                                        }
                                    }
                                    simpleAlert.alert(obj);
                                }


                                function showSuccess(errors) {
                                    console.log('error::::::::::', errors)
                                    let simpleAlert = new SimpleAlert();
                                    let obj = {
                                        title: errors.description,
                                        message: errors.data,
                                        type: 'alert-success',
                                        buttons: {
                                            positive: {
                                                text: "Okay",
                                                action: function () {
                                                    document.querySelector('.simple-alert').remove();
                                                }
                                            },
                                            negative: {
                                                text: "Cancel",
                                                action: function () {
                                                    alert('Negative')
                                                }
                                            }
                                        }
                                    }
                                    simpleAlert.alert(obj);
                                }

                            // })
                        </script>
                        <%- include("../partials/footerEnd") %>