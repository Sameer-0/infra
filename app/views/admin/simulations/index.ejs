<%- include("../partials/head") %>
<%- include("../partials/leftSidebar") %>
<%- include("../partials/header") %>
<%- include("../partials/loader") %>

<div class="col-12 dashboardContent">
  <!--DASHBOARD CONTENT START-->
  <div class="card">
    <div class="card-header">
      <h1 class="f-20">Time Sheet for Whole Semester</h1>
    </div>
    <div class="card-body">
      <div id='calendar' data-calender="<%= JSON.stringify(calenderData) %>"></div>
    </div>
  </div>

  <!--DASHBOARD CONTENT END-->

  <div class="modal fade full-screen-modal" data-modalDate="" id="simulatedDataModal" tabindex="-1" role="dialog"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="simulatedDataModalTitle">Time Sheet</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <table class="table table-responsive table-bordered time-table-daywise scroll">
            <thead class="thead-dark">
              <tr>
                <th scope="col">Room No</th>
                <% for (let sVal of slotData) { %>
                <th scope="col">
                  <%- sVal.starttime %> to <%- sVal.endtime %>
                </th>
                <% } %>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  <!-- Modal Drop Slot-->
  <div class="modal fade" id="editSimulatedModalData" tabindex="-1" role="dialog"
    aria-labelledby="editSimulatedModalDataTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header bg-info">
          <h5 class="modal-title text-white" id="editSimulatedModalDataTitle">Drop Slot</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body px-3">
          <div class="row">
            <div class="col-12 mb-3">
              <ul class="list-unstyled">
                <li><span class="font-weight-bold">Program Name: </span> <span id="editProgramName"></span></li>
                <li><span class="font-weight-bold">Event Id: </span> <span id="editEventId"></span></li>
              </ul>
            </div>

            <div class="col-12 radio-buttons-group" id="flag-radio-group">
              <% for (let flag of rescheduleFlag) { %>
              <div class="custom-control custom-radio" data-flag="<%- flag.name %>">
                <input type="radio" id="<%- flag.name %>" name="scheduleType" value="<%- flag.id %>"
                  class="custom-control-input">
                <label class="custom-control-label" for="<%- flag.name %>">
                  <%- flag.name %>
                </label>
              </div>
              <% } %>
            </div>

            <div class="col-12">

              <div id="rescheduleWrapper" class="mt-3 d-none">
                <select class="form-control mb-3 dropped-slot">
                </select>
                <select class="slotPicker form-control mb-3 dropped-faculty" disabled>
                  <option value selected disabled>--Select Faculty--</option>
                </select>
              </div>

              <hr />
              <label>Select Cancellation Reason <strong class="text-danger">*</strong></label>
              <select id="dropReason" class="form-control mb-3">
                <option value disabled selected>Select Reason</option>
                <% for(let reason of cancellationReasons) {%>
                <option value="<%- reason.sapId %>">
                  <%- reason.reasonText %>
                </option>
                <% } %>
              </select>
              <label>Description</label>
              <textarea id="cancellationDesc" class="form-control"></textarea>
            </div>

            <div class="col-12 text-center">
              <hr />
              <button class="btn btn-sm btn-danger" id="dropEventedSlot">Drop Slot</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal Reschedule Slot-->
  <div class="modal fade" id="rescheduleModal" tabindex="-1" role="dialog" aria-labelledby="rescheduleModalTitle"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content">
        <div class="modal-header bg-info">
          <h5 class="modal-title text-white" id="rescheduleModalTitle">Reschedule Slot</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <div class="allocationFlag mb-3">
            <div class="custom-control custom-radio custom-control-inline">
              <input type="radio" id="modifyFlag" name="allocationFlag" class="custom-control-input" value="2">
              <label class="custom-control-label cursor-pointer" for="modifyFlag">Modify</label>
            </div>
            <div class="custom-control custom-radio custom-control-inline">
              <input type="radio" id="rescheduleFlag" name="allocationFlag" class="custom-control-input" value="3">
              <label class="custom-control-label cursor-pointer" for="rescheduleFlag">Reschedule</label>
            </div>
            <div class="custom-control custom-radio custom-control-inline">
              <input type="radio" id="extraClassFlag" name="allocationFlag" class="custom-control-input" value="4">
              <label class="custom-control-label cursor-pointer" for="extraClassFlag">Extra Class</label>
            </div>
          </div>
          <select class="form-control mb-3" id="selectDroppedSlot" disabled>
            <option value selected disabled>--Select Faculty--</option>
          </select>
          <select class="slotPicker form-control mb-3" id="selectDroppedFaculty" disabled>
            <option value selected disabled>--Select Faculty--</option>
          </select>
          <div class="col-12 text-center">
            <hr />
            <button class="btn btn-sm btn-success" id="scheduleEventedSlot">Schedule</button>
            <!-- <button class="btn btn-sm btn-danger" id="scheduleEventedSlot">Undo Last Modified</button> -->
          </div>
        </div>
      </div>
    </div>
  </div>


  <%- include("../partials/footer") %>
  <script>
    $(document).ready(function () {
      //SOCKET IO

      var socket = io.connect(`http://<%- slug %>.localhost:3000/`);
      socket.on('connect', () => {
        console.log(socket.connected)
      });
      socket.emit('join', 'Timetable rescheduling module')

      //VARIABLES
      let inputDate, slotName, roomNo, uuid, dropFacultyId, droppedFacultyId, flagInitial, eventId;

      //INITIALIZE calendar
      if ($('#calendar').length >= 1) {
        var calendarEl = document.getElementById('calendar');
        var calendar = new FullCalendar.Calendar(calendarEl, {
          plugins: ['dayGrid']
        });
        calendar.render();
      }

      $('.fc-next-button, .fc-prev-button, .fc-today-button').click(function () {
        showTimesheetModal()
      })

      function showTimesheetModal() {
        $('.fc-day, .fc-day-top, .fc-past, .fc-future').click(function () {
          $.ajax({
            type: 'POST',
            url: '/simulation/getSimulatedData/',
            dataType: "json",
            data: {
              selectedDate: $(this).data('date')
            },

            success: function (data) {
              if (data.cause == "permission denied") {
                window.location = data.reqUrl
                return
              }
              console.log("Data===>>> ", data)
              $("#simulatedDataModal").attr("data-modalDate", data.date)
              $("#simulatedDataModalTitle").html(data.date)

              let detailsData = JSON.parse(data.data);

              if (detailsData != null) {
                let ajaxData = null;
                let date = data.date;
                let roomData = detailsData.rooms;
                let keys = Object.keys(roomData);

                for (let key of keys) {
                  let singleRoom = roomData[key].data;
                  let slotLength = singleRoom.length;

                  ajaxData += `<tr data-room="${key}"><td>${key}</td>`;
                  let room;
                  for (room of singleRoom) {
                    ajaxData +=
                      `<td data-slot="slot${room.slotno}" data-event=${room.sapEventId} data-uuid="${room.uuid}" data-facultyId="${room.facultyId}">${room.eventName}</td>`
                  }

                  ajaxData += `</tr>`;
                }
                $('#simulatedDataModal table tbody').html(ajaxData)

                ;
                (async () => {
                  let droppedSlots = await new Promise(resolve => {
                    $("table td").each(function () {
                      if ($(this).html() == "0") {
                        $(this).html("Not Allocated")
                      }
                    })

                    $.ajax({
                      type: 'POST',
                      url: '/simulation/getDroppedSlots/',
                      dataType: "json",

                      success: function (data) {
                        if (data.cause == "permission denied") {
                          window.location = data.reqUrl
                          return
                        }
                        console.log("Then before data====>>>> ", data)
                        return resolve(data);
                      }
                    })
                  })

                  let updateTdFlag = await new Promise(resolve => {
                    let droppedSlotList = droppedSlots.data;

                    for (let slot of droppedSlotList) {
                      console.log("Slot===>> ", slot)
                      if (slot.selectedRFlags !== 1 || slot.selectedRFlags !== 5) {
                        $(`.time-table-daywise td[data-uuid = '${slot.uuid}']`).append(
                          `<span class="sap-flag">${slot.flag}</span>`).addClass(
                          "bg-warning").attr("data-flag", slot.selectedRFlags).attr(
                          "data-flag-initial", slot.flag)
                      }
                    }
                    $('#simulatedDataModal').modal('show')
                    return resolve(1);
                  })

                  let scheduleLogic = await new Promise(resolve => {
                    $("#simulatedDataModal table tbody td:not(:first-child)").click(function () {
                      let $this = $(this)
                      inputDate = $("#simulatedDataModalTitle").html()
                      slotName = $this.attr("data-slot")
                      roomNo = $this.parent().attr("data-room")
                      eventId = $this.attr("data-event")
                      uuid = $this.attr("data-uuid")
                      dropFacultyId = $this.attr("data-facultyid")
                      let sapFlag = $(this).attr("data-flag")
                      flagInitial = $(this).attr("data-flag-initial")

                      if ($this.html() && sapFlag == undefined) {
                        let slotFor = $this.html()
                        $("#flag-radio-group .custom-radio[data-flag='Extra Class']")
                          .addClass("d-none")
                        $('#editSimulatedModalData #editProgramName').html(slotFor)
                        $('#editSimulatedModalData #editEventId').html(eventId)
                        $('#editSimulatedModalData').modal('show')
                      } else {
                        $("#rescheduleModal").modal('show');
                      }

                    })
                  })

                  // let scheduleLogic = await new Promise(resolve => {
                  //   $("#simulatedDataModal table tbody td:not(:first-child)").click(function () {
                  //     let $this = $(this)
                  //     inputDate = $("#simulatedDataModalTitle").html()
                  //     slotName = $this.attr("data-slot")
                  //     roomNo = $this.parent().attr("data-room")
                  //     uuid = $this.attr("data-uuid")
                  //     dropFacultyId = $this.attr("data-facultyid")
                  //     let sapFlag = $(this).attr("data-flag")
                  //     flagInitial = $(this).attr("data-flag-initial")

                  //     if ($this.html() !== "Not Allocated" && sapFlag == undefined) {
                  //       let slotFor = $this.html()
                  //       $("#flag-radio-group .custom-radio[data-flag='Extra Class']")
                  //         .addClass("d-none")
                  //       $('#editSimulatedModalData #editProgramName').html(slotFor)
                  //       $('#editSimulatedModalData').modal('show')
                  //     } else {

                  //       $.ajax({
                  //         type: 'POST',
                  //         url: '/simulation/getDroppedSlots/',
                  //         dataType: "json",

                  //         success: function (data) {
                  //           let droppedSlotList = data.data;
                  //           let ajaxData =
                  //             `<option value selected disabled>--Select--</option>`;
                  //           let slot;
                  //           let slotFor;

                  //           for (slot of droppedSlotList) {
                  //             slotFor = slot.slotAllotedFor.split("- (")[0];
                  //             ajaxData +=
                  //               `<option value="${slotFor}" data-uuid="${slot.uuid}" data-moduleid="${slot.moduleId}" data-programid="${slot.programId}" data-campusid="${slot.campusId}">${slotFor}</option>`;
                  //           }

                  //           console.log("Ajax data===>> ", ajaxData)

                  //           $("#selectDroppedSlot").html(ajaxData);
                  //           $("#flag-radio-group .custom-radio[data-flag='Extra Class']")
                  //             .addClass("d-none")
                  //           $("#rescheduleModal").modal('show');
                  //         }
                  //       })


                  //     }
                  //   })
                  // })


                })()

              }
            }
          })
        })
      }
      showTimesheetModal()


      //Reschedule Logic
      // $('body').on('click', `input[name='scheduleType']`, function () {
      //   let rescheduleWrapper = $('#rescheduleWrapper');

      //   if ($(this).val() == "2") {
      //     rescheduleWrapper.removeClass('d-none');

      //     $.ajax({
      //       type: 'POST',
      //       url: '/simulation/getDroppedSlots/',
      //       dataType: "json",

      //       success: function (data) {
      //         let droppedSlotList = data.data;
      //         let ajaxData = `<option value selected disabled>--Select Lecture--</option>`;
      //         let slot;
      //         let slotFor;
      //         for (slot of droppedSlotList) {
      //           slotFor = slot.slotAllotedFor.split("- (")[0];
      //           ajaxData +=
      //             `<option value="${slotFor}" data-uuid="${slot.uuid}" data-transactionid="${slot.transactionId}" data-moduleid="${slot.moduleId}" data-programid="${slot.programId}" data-campusid="${slot.campusId}">${slotFor}</option>`;
      //         }
      //         console.log("Ajax data dropped slots===>> ", ajaxData)
      //         $("#rescheduleWrapper .dropped-slot").html(ajaxData)
      //         $("#flag-radio-group .custom-radio[data-flag='Extra Class']").addClass("d-none")

      //       }
      //     })
      //   } else {
      //     rescheduleWrapper.addClass('d-none');
      //     $("#rescheduleWrapper .dropped-faculty").attr("disabled", true)
      //   }
      // })

      $("#rescheduleWrapper").on("change", ".dropped-slot", function () {
        $(".loaderBody").removeClass('d-none');
        let $this = $(this);
        let optionSelected = $('option:selected', $this);

        $.ajax({
          type: 'POST',
          url: '/simulation/getFacultyList/',
          dataType: "json",
          data: {
            inputDate: inputDate,
            slotName: slotName,
            campusId: optionSelected.attr("data-campusid").trim(),
            programId: optionSelected.attr("data-programid").trim(),
            moduleId: optionSelected.attr("data-moduleid").trim()
          },
          success: function (data) {
            if (data.cause == "permission denied") {
              window.location = data.reqUrl
              return
            }
            let facultyList = data.facultyList;
            let faculty;
            let ajaxData = "";
            if (facultyList.length === 0) {
              ajaxData += `<option value selected disabled>--No faculty available--</option>`;
            } else {
              ajaxData += "<option value selected disabled>--Select Faculty--</option>";
              for (faculty of facultyList) {
                ajaxData += `<option value="${faculty.facultyId}">${faculty.facultyName}</option>`;
              }
            }

            $("#rescheduleWrapper .dropped-faculty").html(ajaxData).attr("disabled", false);
            $(".loaderBody").addClass('d-none');
          }
        })
      })


      $('#editSimulatedModalData').on('hidden.bs.modal', function (e) {
        console.log("Modal closed");
        $(`#flag-radio-group input[name='scheduleType`).prop('checked', false);
        $("#rescheduleWrapper").addClass("d-none");
        $("#rescheduleWrapper .dropped-faculty").attr("disabled", true).html(
          `<option value selected disabled>--Select Faculty--</option>`);
      })

      //EMIT DROP EVENTED SLOT


      $("#dropEventedSlot").click(function () {
        let rescheduleLecture = $("#rescheduleWrapper .dropped-slot").val();
        let rescheduleFaculty = $("#rescheduleWrapper .dropped-faculty").val();
        let scheduleType = $("input[name='scheduleType']:checked").val();
        let cancellationReason = $("#dropReason").val();
        let cancellationDesc = $("#cancellationDesc").val();


        if (scheduleType && cancellationReason) {

          // if (scheduleType == 2) {
          //   socket.emit('dropAndModify', {
          //     inputDate: inputDate,
          //     slugName: "<%- slug %>",
          //     slotName: slotName,
          //     roomNo: roomNo,
          //     uuid: uuid,
          //     droppedFacultyId: droppedFacultyId,
          //     selectedRFlag: scheduleType,
          //     cancellationReason: cancellationReason,
          //     cancellationDesc: cancellationDesc
          //   })
          // } else {
          socket.emit('dropEventedSlot', {
            inputDate: inputDate,
            slugName: "<%- slug %>",
            slotName: slotName,
            roomNo: roomNo,
            uuid: uuid,
            droppedFacultyId: droppedFacultyId,
            selectedRFlag: scheduleType,
            cancellationReason: cancellationReason,
            cancellationDesc: cancellationDesc
          })
          // }

        } else {
          alert("Please choose a schedule type and cancellation reason.");
        }

      })


      //RE-ALLOCATION LOGIC

      $('body').on('click', `input[name='allocationFlag']`, function () {

        let allocationFlag = $(this).val();

        $("#selectDroppedSlot").html(`<option value selected disabled>--Select Lecture--</option>`).attr(
          "disabled", true);
        $("#selectDroppedFaculty").html(`<option value selected disabled>--Select Faculty--</option>`).attr(
          "disabled", true);

        $.ajax({
          type: 'POST',
          url: '/simulation/getDroppedSlotsReallocation/',
          dataType: "json",
          data: {
            allocationFlag: allocationFlag
          },
          success: function (data) {
            if (data.cause == "permission denied") {
              window.location = data.reqUrl
              return
            }
            console.log("Fetched Data===>> ", data)
            let droppedSlotList = data.data;

            let ajaxData = `<option value selected disabled>--Select Lecture--</option>`;
            let slot;
            let slotFor;
            for (slot of droppedSlotList) {
              slotFor = slot.slotAllotedFor.split("- (")[0];
              ajaxData +=
                `<option value="${slotFor}" data-id="${slot.id}" data-uuid="${slot.uuid}" data-transactionid="${slot.transactionId}" data-moduleid="${slot.moduleId}" data-programid="${slot.programId}" data-campusid="${slot.campusId}">${slotFor}</option>`;
            }
            $("#selectDroppedSlot").html(ajaxData).attr("disabled", false)

          }
        })

      })


      $("#rescheduleModal").on("change", "#selectDroppedSlot", function () {

        console.log("FETCHING FACULTY LIST")
        $(".loaderBody").removeClass('d-none');
        let $this = $(this);
        let optionSelected = $('option:selected', $this);

        $.ajax({
          type: 'POST',
          url: '/simulation/getFacultyList/',
          dataType: "json",
          data: {
            inputDate: inputDate,
            slotName: slotName,
            campusId: optionSelected.attr("data-campusid").trim(),
            programId: optionSelected.attr("data-programid").trim(),
            moduleId: optionSelected.attr("data-moduleid").trim(),
            transactionId: optionSelected.attr("data-transactionid").trim()
          },
          success: function (data) {
            if (data.cause == "permission denied") {
              window.location = data.reqUrl
              return
            }
            let facultyList = data.facultyList;
            let faculty;
            let ajaxData = "";
            if (facultyList.length === 0) {
              ajaxData += `<option value selected disabled>--No faculty available--</option>`;
            } else {
              ajaxData += "<option value selected disabled>--Select Faculty--</option>";
              for (faculty of facultyList) {
                ajaxData += `<option value="${faculty.facultyId}">${faculty.facultyName}</option>`;
              }
            }

            $("#selectDroppedFaculty").html(ajaxData).attr("disabled", false);
            $(".loaderBody").addClass('d-none');
          }
        })
      })

      $("#selectDroppedFaculty").change(function () {
        droppedFacultyId = $("#selectDroppedFaculty").val()
      })

      $("#scheduleEventedSlot").click(function () {

        let lectureData =
          `${$("#selectDroppedSlot").val()} - (${$("#selectDroppedFaculty option:selected").html()})`;
        let assignFacultyId = $("#rescheduleModal #selectDroppedFaculty").val();
        let flag = $("input[name='allocationFlag']:checked").val();
        let selectedEvent = $("#selectDroppedSlot option:selected");
        console.log('oldEventCid======>>>> ', selectedEvent.attr('data-id'))

        if (lectureData && assignFacultyId) {
          socket.emit('scheduleEventedSlot', {
            flag: flag,
            inputDate: inputDate,
            slugName: "<%- slug %>",
            slotName: slotName,
            roomNo: roomNo,
            slotUuid: uuid,
            uuid: $("#selectDroppedSlot option:selected").attr("data-uuid"),
            oldEventCid: selectedEvent.attr('data-id'),
            droppedFacultyId: droppedFacultyId,
            tdData: `${$("#selectDroppedSlot").val()} - (${$("#selectDroppedFaculty option:selected").html()})`
          })
        } else {
          alert("Please select a lecture and faculty to be assigned.")
        }
      })

      $("#rescheduleModal").on('hidden.bs.modal', function (e) {
        $("input[name='allocationFlag']").prop("checked", false);
        $("#selectDroppedSlot").html(`<option value selected disabled>--Select Lecture--</option>`).attr(
          "disabled", true);
        $("#selectDroppedFaculty").html(`<option value selected disabled>--Select Faculty--</option>`).attr(
          "disabled", true);
      })



      socket.on("droppedEventedSlot", async function (data) {

        if (data.isDropped == 1 && data.slugName == "<%- slug %>") {
          console.log("FLAG===>>> ", data.flag)
          if (data.flag == 'C' || data.flag == 'Z') {
            $("#simulatedDataModal[data-modalDate = '" + data.inputDate + "'] tr[data-room='" + data.roomNo +
                "'] td[data-slot='" + data.slotName + "']").html(
                `<span class="sap-flag">${data.flag}</span> Not Allocated`)
              .attr("data-flag", data.selectedRFlag).addClass("bg-warning")
            $("#editSimulatedModalData").modal("hide");
          } else {
            $("#simulatedDataModal[data-modalDate = '" + data.inputDate + "'] tr[data-room='" + data.roomNo +
                "'] td[data-slot='" + data.slotName + "']").append(
                `<span class="sap-flag">${data.flag}</span>`)
              .attr("data-flag", data.selectedRFlag).addClass("bg-warning")
            $("#editSimulatedModalData").modal("hide");
          }

          //Update dropped slots
          // let dynamicOptions = "<option value selected disabled>--Select--</option>";
          // let slot, slotFor;
          // let droppedSlotList = data.droppedSlots;

          // for (slot of droppedSlotList) {
          //   slotFor = slot.slotAllotedFor.split("- (")[0];
          //   dynamicOptions +=
          //     `<option value="${slotFor}" data-uuid="${slot.uuid}" data-moduleid="${slot.moduleId}" data-programid="${slot.programId}" data-campusid="${slot.campusId}">${slotFor}</option>`;
          // }

          // console.log("droppedSlotList==>> ", droppedSlotList, dynamicOptions)

          // $("#selectDroppedSlot").html(dynamicOptions)
        }
      })

      socket.on("scheduleCompleted", async function (data) {
        console.log("Data===>> ", data)
        if (data.isScheduled == 1 && data.slugName == "<%- slug %>") {
          $("#simulatedDataModal[data-modalDate = '" + data.inputDate + "'] tr[data-room='" + data
            .roomNo + "'] td[data-slot='" + data.slotName + "']").html(data.tdData)
          $("#rescheduleModal").modal("hide");
        }
      })



      //CALENDER-DATA-CHECK & HIGHLIGHT
      var calenderData = $('#calendar').attr("data-calender");
      calenderData = JSON.parse(calenderData)
      $(".fc-bg table tr td").each(function () {
        let tdDate = $(this).attr('data-date')
        let cd = calenderData.find((elem) => elem.dateString.toString().split('T')[0].trim() == tdDate
        .toString().trim())
        if (cd != undefined) {
          $(this).style.borderBottom = "thick solid #0000FF";
        }
      });

      var currentDate = new Date()

      function addMonths(date, count) {
        if (date && count) {
          var m, d = (date = new Date(+date)).getUTCDate()
          date.setUTCMonth(date.getUTCMonth() + count, 1)
          m = date.getUTCMonth()
          date.setUTCDate(d)
          if (date.getUTCMonth() !== m) date.setUTCDate(0)
        }
        return date
      }

      $('.fc-icon-chevron-left').on('click', () => {
        calenderData = []
        currentDate = addMonths(currentDate, -1)
        let month = parseInt(currentDate.getMonth()) + 1
        let year = currentDate.getFullYear()
        month = parseInt(month) > 9 ? "/" + month + "/" : "/0" + month + "/"
        month = "%" + month
        $.ajax({
          url: "/simulation/getCalenderDateData",
          type: "POST",
          data: {
            dateString: (month + year).trim(),
          },
          success: function (result) {
            if (result.cause == "permission denied") {
              window.location = result.reqUrl
              return
            }
            let calenderData = result.calendarData
            if (result.status == "success") {
              $('#calendar').attr("data-calender", JSON.stringify(result.calendarData));
              calenderData = $('#calendar').attr("data-calender")
              calenderData = JSON.parse(calenderData)
              $('.fc-day').css("background", "none");
              $(".fc-bg table tr td").each(function () {
                let tdDate = $(this).attr('data-date')
                let cd = calenderData.find((elem) => elem.dateString.toString().split('T')[0]
                .trim() == tdDate.toString().trim() && parseInt(elem.count) > 0)
                if (cd != undefined) {
                  $(this).css("background", "linear-gradient(to bottom, #ffffff 0%, #CAF7E3 100%)");
                }
              });
            } else {
              console.log("error occurred")
            }
          },
          error: function (errors) {
            console.log(errors)
          }
        })
      })

      $('.fc-icon-chevron-right').on('click', () => {
        calenderData = []
        currentDate = addMonths(currentDate, 1)
        let month = parseInt(currentDate.getMonth()) + 1
        let year = currentDate.getFullYear()
        month = parseInt(month) > 9 ? "/" + month + "/" : "/0" + month + "/"
        month = "%" + month
        $.ajax({
          url: "/simulation/getCalenderDateData",
          type: "POST",
          data: {
            dateString: (month + year).trim(),
          },
          success: function (result) {
            if (result.cause == "permission denied") {
              window.location = result.reqUrl
              return
            }
            if (result.status == "success") {
              $('#calendar').attr("data-calender", JSON.stringify(result.calendarData));
              calenderData = $('#calendar').attr("data-calender")
              calenderData = JSON.parse(calenderData)
              $('.fc-day').css("background", "none");
              $(".fc-bg table tr td").each(function () {
                let tdDate = $(this).attr('data-date')
                let cd = calenderData.find((elem) => elem.dateString.toString().split('T')[0]
                .trim() == tdDate.toString().trim() && parseInt(elem.count) > 0)
                if (cd != undefined) {
                  $(this).css("background", "linear-gradient(to bottom, #ffffff 0%, #CAF7E3 100%)");
                }
              });
            } else {
              console.log("error occurred")
            }
          },
          error: function (errors) {
            console.log(errors)
          }
        })
      })

      $('.fc-today-button').on('click', () => {
        calenderData = []
        currentDate = new Date()
        let month = parseInt(currentDate.getMonth()) + 1
        let year = currentDate.getFullYear()
        month = parseInt(month) > 9 ? "/" + month + "/" : "/0" + month + "/"
        month = "%" + month
        $.ajax({
          url: "/simulation/getCalenderDateData",
          type: "POST",
          data: {
            dateString: (month + year).trim(),
          },
          success: function (result) {
            if (result.cause == "permission denied") {
              window.location = result.reqUrl
              return
            }
            if (result.status == "success") {
              $('#calendar').attr("data-calender", JSON.stringify(result.calendarData));
              calenderData = $('#calendar').attr("data-calender")
              calenderData = JSON.parse(calenderData)
              $('.fc-day').css("background", "none");
              $(".fc-bg table tr td").each(function () {
                let tdDate = $(this).attr('data-date')
                let cd = calenderData.find((elem) => elem.dateString.toString().split('T')[0]
                .trim() == tdDate.toString().trim() && parseInt(elem.count) > 0)
                if (cd != undefined) {
                  $(this).css("background", "linear-gradient(to bottom, #ffffff 0%, #CAF7E3 100%)");
                }
              });
            } else {
              console.log("error occurred")
            }
          },
          error: function (errors) {
            console.log(errors)
          }
        })
      })
    })
  </script>
  <%- include("../partials/footerEnd") %>