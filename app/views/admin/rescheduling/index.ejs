<%- include("../partials/head") %>
<style>
  .inputGroup {
    background-color: #fff;
    display: block;
    margin: 5px 0;
    position: relative;
  }

  .inputGroup :hover {
    background: #b1b3c297;
  }

  .inputGroup label {
    padding: 12px 30px;
    width: 100%;
    display: block;
    text-align: left;
    color: #3C454C;
    cursor: pointer;
    position: relative;
    z-index: 2;
    transition: color 200ms ease-in;
    overflow: hidden;
    background: #3c454c15;
  }

  .inputGroup label:before {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    content: "";
    background-color: #5562eb;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%) scale3d(1, 1, 1);
    transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    z-index: -1;
  }


  .inputGroup label:after {
    width: 32px;
    height: 32px;
    content: "";
    border: 2px solid #D1D7DC;
    background-color: #fff;
    background-image: url("data:image/svg+xml,%3Csvg width='32' height='32' viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M5.414 11L4 12.414l5.414 5.414L20.828 6.414 19.414 5l-10 10z' fill='%23fff' fill-rule='nonzero'/%3E%3C/svg%3E ");
    background-repeat: no-repeat;
    background-position: 2px 3px;
    border-radius: 50%;
    z-index: 2;
    position: absolute;
    right: 30px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    transition: all 200ms ease-in;
  }

  .inputGroup input:checked~label {
    color: #fff;
  }

  .inputGroup input:checked~label:before {
    transform: translate(-50%, -50%) scale3d(100, 100, 1);
    opacity: 1;
  }

  .inputGroup input:checked~label:after {
    background-color: #54E0C7;
    border-color: #54E0C7;
  }

  .inputGroup input {
    width: 32px;
    height: 32px;
    order: 1;
    z-index: 2;
    position: absolute;
    right: 30px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    visibility: hidden;
  }

  body {
    background-color: #D1D7DC;
    /* font-family: "Fira Sans", sans-serif; */
  }

  *,
  *::before,
  *::after {
    box-sizing: inherit;
  }

  html {
    box-sizing: border-box;
  }

  code {
    background-color: #9AA3AC;
    padding: 0 8px;
  }

  .accordion-button-custom {
    background-color: #000000 !important;
    color: #fff !important;
  }

  .reschedule-edit {
    transform: scale(1.5);
  }

  .event-filter-container {
    position: relative;
    z-index: 1;
    top: 0px;
    left: 0px;
    right: 0px;
    border-radius: 0;
  }
</style>
<%- include("../partials/leftSidebar") %>
<%- include("../partials/header") %>
<!--Notificaion icon-->
<!--HEADER END-->
<div class="main-content">
  <div class="breadcrumbs-container">

    <ul class="breadcrumb">
      <% if(breadcrumbs){%> <% for (let crumbs of breadcrumbs){%>
      <li><a href="<%- crumbs.url%>"><%- crumbs.name%></a></li>
      <%} }%>
    </ul>
  </div>

  <!--MAIN CONTENT START-->
  <div class="card  mt-3">

    <div class="card-header  text-uppercase d-flex align-items-center justify-content-between">
      <h5>Reschedule Events</h5>
    </div>

    <div class="card-body">
      <div class="row">
        <div class="col-md-4" id="resch-flag-wrapper">

          <div class="card rounded-0 mt-2">
            <div class="card-header">
              Select Options
            </div>

            <div class="card-body">
              <% for(let rFlag of rescheduleFlag) {%>
              <div class="inputGroup">
                <input id="<%- rFlag.name %>" name="schedule-type" value="<%-rFlag.id%>" class="custom-control-input schedule-type" data-resch-flag="<%-rFlag.denotedBy%>" type="radio" />
                <label for="<%-rFlag.name%>"><%-rFlag.name%></label>
              </div>
              <%}%>
          </div>
        </div>

        <div class="card rounded-0 mt-2">
          <div class="card-header">
            <label>Select Reason <strong class="text-danger">*</strong></label>
          </div>

          <div class="card-body">
            <select id="reschReason" class="form-control mb-3 rounded-0 select2">
              <option value disabled selected>Select Reason</option>
              <% for(let reason of cancellationReasons) {%>
              <option value="<%- reason.sap_id %>">
                <%- reason.reason_text %>
              </option>
              <% } %>
              </select>
              <textarea id="reschDesc" class="form-control mt-3 rounded-0"></textarea>

            </div>
          </div>
        </div>

        <div class="col-md-8 blur" id="resch-filter-wrapper">
          
          <div class="card mb-1 event-filter-container d-none">
            <div class="card-body" id="event-filter">
              <div class="row">
                <div class="input-groups col-md-3 col-sm-12">
                  <label for="ProgramFilter">Select Program<span class="text-danger fw-bold fs-5">*</span>:</label>
                  <select name="ProgramFilter" id="ProgramFilter" class="form-select empty-filter data-filter-empty">
                    <option selected disabled value>--Select Program--</option>
                    <% for(let program of programList){%>
                    <option value="<%- program.id%>"><%-program.program_name%></option>
                    <%}%>
                      </select>
                </div>
        
                <div class="input-groups col-md-3 col-sm-12">
                    <label for="SessionFilter">Select Session<span class="text-danger fw-bold fs-5">*</span>:</label>
                    <select name="SessionFilter" id="SessionFilter" class="form-select empty-filter data-filter-empty">
                        <option selected disabled value>--Select Session--</option>
                    </select>
                </div>
        
                <div class="input-groups col-md-3 col-sm-12">
                  <label for="ModuleFilter">Select Module<span class="text-danger fw-bold fs-5">*</span>:</label>
                  <select name="ModuleFilter" id="ModuleFilter" class="form-select empty-filter data-filter-empty">
                      <option selected disabled value>--Select Session--</option>
                  </select>
                </div>
        
                <div class="input-groups col-md-3 col-sm-12">
                      <label for="DivisionFilter">Select Division<span class="text-danger fw-bold fs-5">*</span>:</label>
                      <select name="DivisionFilter" id="DivisionFilter" class="form-select empty-filter data-filter-empty">
                        <option selected disabled value>--Select Division--</option>
                    </select>
                </div>
              </div>
            </div>
          </div>

          <div class="res-filter">
            <div id="cancel-wrapper" class="d-none">
              <div class="inputGroup">
                <input type="radio" id="cancel-against-extra" name="cancel-type" value="cae">
                <label class="custom-control-label cursor-pointer" for="cancel-against-extra">
                  Cancel Against Extra Class
                </label>
              </div>

              <div class="inputGroup">
                <input type="radio" id="cancel-events" name="cancel-type" value="cancel">
                <label class="custom-control-label cursor-pointer" for="cancel-events">
                  Cancel
                </label>
              </div>

              <hr />

              <div class="d-none cancel-type-container" id="cancel-against-extra-container">
                <label class="custom-control-label cursor-pointer" for="cancel-against-extra-class-date">
                  Select Date
                </label>
                <input type="date" min="<%- dateRange.start_date %>" max="<%- dateRange.end_date %>"
                      id="cancel-against-extra-class-date" class="form-control rounded-0 empty-filter" disabled />

                <div class="regular_lecture_container my-2">
                  <label class="custom-control-label cursor-pointer">
                    Select Lecture to cancel against
                  </label>
                  <div class="regular_lecture_list">
                  </div>
                </div>

                <div class="mt-3">
                  <select class="form-control mb-3 select2 extra-lecture" id="extra-lecture-list" disabled>
                    <option value selected disabled>--Select Extra Lecture--</option>
                  </select>
                </div>

                <button class="btn btn-primary rounded-0 mt-2 w-50 mx-auto d-block" id="cancel-against-extra-class-btn" type="button" disabled>Submit</button>
              </div>

              <div class="d-none cancel-type-container" id="cancel-container">
                <div class="mb-3">
                  <label>From Date: <strong class="text-danger">*</strong></label>
                  <input type="date" min="<%- dateRange.start_date %>" max="<%- dateRange.end_date %>"  class="form-control rounded-0 empty-filter from-date" />
                </div>

                <div class="mb-3">
                  <label>To Date: <strong class="text-danger">*</strong></label>
                  <input type="date" min="" max="<%- dateRange.end_date %>" class="form-control rounded-0 empty-filter to-date" disabled>
                </div>

                <div class="mb-3">
                  <label>From Faculty: <strong class="text-danger">*</strong></label>
                  <select  class="form-control empty-filter select-faculty" disabled>
                    <option disabled selected value>--Select Faculty--</option>
                  </select>
                </div>

                <div class="mb-3">
                  <button class="btn btn-md btn-dark rounded-0 fetch-event-data-btn">Fetch lectures</button>
                </div>
              </div>

            </div>

            <div id="modify-reschedule-wrapper" class="d-none">
              <div class="mb-3">
                <label>From Date: <strong class="text-danger">*</strong></label>
                <input type="date" min="<%- dateRange.start_date %>" max="<%- dateRange.end_date %>"  class="form-control rounded-0 empty-filter from-date" />
              </div>

              <div class="mb-3">
                <label>To Date: <strong class="text-danger">*</strong></label>
                <input type="date" min="" max="<%- dateRange.end_date %>" class="form-control rounded-0 empty-filter to-date" disabled>
              </div>

              <div class="mb-3">
                <label>From Faculty: <strong class="text-danger">*</strong></label>
                <select  class="form-control empty-filter select-faculty" disabled>
                  <option disabled selected value>--Select Faculty--</option>
                </select>
              </div>

              <div class="mb-3">
                <button class="btn btn-md btn-dark fetch-event-data-btn rounded-0">Fetch lectures</button>
              </div>
            </div>

            <div id="extra-regular-wrapper" class="d-none">
              <div class="mb-3">
                <label>Select Date: <strong class="text-danger">*</strong></label>
                <input type="date" min="" max="<%- dateRange.maxDate %>" id="extra-lecture-to-date" class="form-control rounded-0 empty-filter"/>
              </div>

              <div class="mb-3">
                <label>Select Start Time: <strong class="text-danger">*</strong></label>
                <select id="select-new-ec-start-time" class="form-control empty-filter" disabled>
                  <option disabled selected value>--Select Time--</option>
                </select>
              </div>

              <div class="mb-3">
                <label>Select End Time: <strong class="text-danger">*</strong></label>
                <select id="select-new-ec-end-time" class="form-control empty-filter" disabled>
                  <option disabled selected value>--Select End Time--</option>
                </select>
              </div>

              <div class="mb-3">
                <label>Select Room: <strong class="text-danger">*</strong></label>
                <select id="select-new-ec-room" class="form-control empty-filter" disabled>
                  <option disabled selected value>--Select Room--</option>
                </select>
              </div>

              <div class="mb-3">
                <label>Faculty: <strong class="text-danger">*</strong></label>
                <select id="select-new-ec-faculty" class="form-control empty-filter" disabled>
                  <option disabled selected value>--Select Faculty--</option>
                </select>
              </div>

              <div class="mb-3">
                <button class="btn btn-md btn-dark rounded-0" id="schedule-extra-class">Schedule</button>
              </div>
            </div>

            <div id="replace-faculty-for-all-events-wrapper" class="d-none">
              <div class="mb-3">
                <label>From Date: <strong class="text-danger">*</strong></label>
                <input type="date" min="<%- dateRange.start_date %>" max="<%- dateRange.end_date %>"  class="form-control rounded-0 empty-filter from-date" />
                
              </div>
              <div class="mb-3">
                <label>To Date: <strong class="text-danger">*</strong></label>

                <input type="date" min="" max="<%- dateRange.end_date %>" class="form-control rounded-0 empty-filter to-date" disabled>
                
              </div>
              <div class="mb-3">
                <label>From Faculty: <strong class="text-danger">*</strong></label>
                <select class="form-control empty-filter select-faculty" disabled>
                  <option disabled selected value>--Select Faculty--</option>
                </select>
              </div>

              <div class="mb-3 replace-faculty">
                <label> To Faculty: <strong class="text-danger">*</strong></label>
                <select id="replace-faculty-dropdown" class="form-control empty-filter" disabled>
                  <option disabled selected value>--Select Faculty--</option>
                </select>
              </div>

              <div class="mb-3">
                <button class="btn btn-md btn-dark rounded-0 fetch-event-data-btn">Fetch lectures</button>
              </div>

            </div>
          </div>
        </div>
      </div>
    </div>

  </div>

    <!-- TABLE -->
  <div class="card col-12 d-none p-0 mt-3" id="event-list-table-card">
    <div class="card-header cursor-pointer">
      <h5> View Lectures</h5>
    </div>

    <div class="card-body">
      <div class="table-responsive event-list-table-container">

      </div>
    </div>
  </div>
</div>

  <!-- Modal -->
<div class="modal fade" id="rescheduleModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="rescheduleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="rescheduleModalLabel">Reschedule Details</h5>
        <button type="button" class="btn-close" id="close-btn" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">

      </div>
      <div class="modal-footer">
        <!-- <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> -->
        <button type="button" class="btn btn-primary" id="update-table">Update</button>
      </div>
    </div>
  </div>
</div>


  <%- include("../partials/footer") %>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    $(document).ready(function() {
      $(".select2").select2()

      //SOCKET IO
      let socketRoom = `<%- locals.username %>`
      console.log('socketRoom==========>>', socketRoom)

      let socket = io();
      socket.on('connect', () => {
        console.log('Socket Connection::::::::::::>>', socket.connected)
      });
      socket.emit('join', 'Timetable rescheduling module')

      let rescheduleObj = {
        reschFlag: '',
        reasonId: '',
        reasonDescription: '',
        programLid: '',
        moduleLid: '',
        divisionLid: '',
        acadSessionLid: '',
        eventsJson: '',
        academicStartDate: '',
        academicEndDate: '',
        dateRangeFrom: '',
        dateRangeTo:'',
        facultyLidForDateRange:'',
        facultyIdForDateRange:'',
        facultyTypeForDateRange:'',
      }

      let replaceToFacultyObj = {}

      rescheduleObj.academicStartDate = `<%- dateRange.start_date %>`
      rescheduleObj.academicEndDate = `<%- dateRange.end_date %>`

      $(`.schedule-type`).on('change', function() {

        $('.event-filter-container').removeClass('d-none');
        $('.res-filter>div').addClass('d-none');
        $('.empty-filter').val('');
        $('#reschReason').val('');
        $('.event-list-table-container').html('');
        $('#event-list-table-card').addClass('d-none');

        rescheduleObj.reschFlag = $(this).attr('data-resch-flag');

        if (rescheduleObj.reschFlag == "C" || rescheduleObj.reschFlag == "Z") {
          $('#cancel-wrapper').removeClass('d-none');
        } else if (rescheduleObj.reschFlag == "M" || rescheduleObj.reschFlag == "R") {
          $('#modify-reschedule-wrapper').removeClass('d-none');
        } else if(rescheduleObj.reschFlag == "E" || rescheduleObj.reschFlag == "Y") {
          $('#extra-regular-wrapper').removeClass('d-none');
        } else if(rescheduleObj.reschFlag == "RP"){
          $('#replace-faculty-for-all-events-wrapper').removeClass('d-none');
        } 

        console.log('reshobj::>>', rescheduleObj)

      })

      $('#reschReason').on('change', function() {
        rescheduleObj.reasonId = $(this).val();

        if (rescheduleObj.reschFlag == "C" && rescheduleObj.reasonId == '12') {
          rescheduleObj.reschFlag = "Z"
        }
      })

      $('#reschDesc').on('input', function() {
        rescheduleObj.reasonDescription = $(this).val();
      })

      $('#ProgramFilter').on('change', function() {
        rescheduleObj.programLid = $(this).val();
      })

      $('#SessionFilter').on('change', function() {
        rescheduleObj.acadSessionLid = $(this).val();
      })

      $('#ModuleFilter').on('change', function() {
        rescheduleObj.moduleLid = $(this).val();
      })

      $('#DivisionFilter').on('change', function() {
        rescheduleObj.divisionLid = $(this).val();
      })

      $('input[name="cancel-type"]').on('change', function() {

        $('.cancel-type-container').addClass('d-none');

        if ($(this).val() == 'cancel') {
          $('#cancel-container').removeClass('d-none');

        } else if ($(this).val() == 'cae') {
          $("#cancel-against-extra-class-date").prop('disabled', false)

          let actionType = $(document).find('.schedule-type:checked').attr('id');
 
          let obj = {
            program_lid: rescheduleObj.programLid,
            division_lid: rescheduleObj.divisionLid,
            module_lid: rescheduleObj.moduleLid,
            acad_session_lid: rescheduleObj.acadSessionLid,
          }
          console.log('Cancel Against Extra Class::::::::::::::::::::::>>>>>>>', obj)


          $(`.from-date`).val('').change()
          $(`.to-date`).val('')
          $('#bulk-lecture-list-card').addClass('d-none')
          $('#event-list-table-card').addClass('d-none')

          $("#cancel-against-extra-class-date").on('change', function() {
            let date_str = convertDate($(this).val(), '-')
            console.log('date_str:::::::::::::::>>', date_str)

            $.ajax({
              type: 'POST',
              url: '/admin/rescheduling/get-regular-extra-lecture',
              dataType: "JSON",
              data: {
                program_lid: rescheduleObj.programLid,
                division_lid: rescheduleObj.divisionLid,
                module_lid: rescheduleObj.moduleLid,
                acad_session_lid: rescheduleObj.acadSessionLid,
                date_str: date_str
              },
              success: data => {
                let regularlectureList = data.regularlectureList;
                console.log('lectureList: ', data)
                let accordionList = `<div class="accordion mb-2" id="caeAccordion">`;

                if (data.regularlectureList.length < 1) {
                  accordionList += `<div class="accordion-item no-lecture">NO Lecture Found</div></div>`
                }


                //REGULAR LECTURE LIST WITHOUT E FLAG
                for (let lecture of data.regularlectureList) {
                  accordionList += `<div class="accordion-item">
                <h2 class="accordion-header" id="headingOne${lecture.id}">
                  <button class="accordion-button  accordion-button-custom text-light bg-dark" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne${lecture.id}" aria-expanded="true" aria-controls="collapseOne${lecture.id}">
                    <div class="ms-2 form-check pt-0">
                    <input class="form-check-input" type="radio" name="regularLectureOpn" value="${lecture.id}" id="regularLectureOpn">
                    <label class="form-check-label" for="regularLectureOpn">
                      ${lecture.module_name} - ${lecture.division} | ${lecture.date_str}  | ${lecture.start_time} to ${lecture.end_time}
                    </label>
                  </div>
                  </button>
                </h2>
                <div id="collapseOne${lecture.id}" class="accordion-collapse collapse" aria-labelledby="headingOne${lecture.id}" data-bs-parent="#caeAccordion">
                  <div class="accordion-body">
                <strong>Current Date</strong> : ${lecture.date_str}<br>
                <strong>Event Name</strong> : ${lecture.event_name}<br>
                <strong>Program Name</strong> : ${lecture.program_name}<br>
                <strong>Faculty Name</strong> : ${lecture.faculty_name}<br>
                <strong>Acad Session</strong> : ${lecture.acad_session}<br>
                <strong>Class Room:</strong> : ${lecture.room_no}/ ${lecture.room_abbr}<br>
                <strong>Class Timing</strong> : ${lecture.start_time} to ${lecture.end_time}<br>
              </div>
                </div>
              </div>`;
                }
                `</div>`;

                $(".regular_lecture_list").html(accordionList)


                //EXTRA LECTURE LIST WITH E FLAG

                let ajaxData = `<option value selected disabled>--Select Extra Lecture--</option>`;
                if (data.extrlectureList.length > 0) {
                  for (let lecture of data.extrlectureList) {
                    ajaxData +=
                      `<option value="${lecture.event_name}" data-lid="${lecture.id}" data-unx-lid="${lecture.unx_lid}" data-sap-event-id="${lecture.sap_event_id}" data-module-id="${lecture.module_id}" data-program-id="${lecture.program_id}" data-division="${lecture.div}" data-event-type="${lecture.event_type}" data-date="${lecture.date_str}" data-room-no="${lecture.room_no}" data-acad-year="${lecture.acad_year}" data-acad-session="${lecture.acad_session}" data-faculty-id="${lecture.faculty_id}" data-start-time="${lecture.start_time}" data-end-time="${lecture.end_time}" data-slot-name=${lecture.slot_name}>${lecture.event_name} | ${lecture.start_time} to ${lecture.end_time} | ${lecture.date_str} | ${lecture.room_no}</option>`;
                    $("#cancel-against-extra-class-btn").prop('disabled', false)
                  }
                } else {
                  ajaxData +=
                    `<option value="">Lecture Not Found</option>`;
                  $("#cancel-against-extra-class-btn").prop('disabled', true)
                }
                $('#cancel-wrapper #cancel-against-extra-container .extra-lecture').html(ajaxData).attr("disabled", false)
              },
              error: err => {
                console.log('Error: ', err)
              }
            })
          })

          $('#cancel-wrapper #cancel-against-extra-container').removeClass('d-none');
        }
      })

      $('.from-date').on('change', function() {
        rescheduleObj.dateRangeFrom = convertDate($(this).val(), '-');
        $('.to-date').attr('disabled', false)
      })

      $('.to-date').on('change', function() {

        rescheduleObj.dateRangeTo = convertDate($(this).val(), '-')

          $.ajax({
            type: 'POST',
            url: '/admin/rescheduling/get-replacing-faculties',
            dataType: "JSON",
            data: {
              fromDate: rescheduleObj.dateRangeFrom,
              toDate: rescheduleObj.dateRangeTo,
              program_lid: rescheduleObj.programLid,
              division_lid: rescheduleObj.divisionLid,
              module_lid: rescheduleObj.moduleLid,
              acad_session_lid: rescheduleObj.acadSessionLid,
            },
            success: data => {
              console.log('availableFacultyList::::::::::::::::: ', data.availableFacultyList)
              let facultyListStr = `<option disabled selected value>--Select Faculty--</option>`

              if (data.facultyList.length > 0) {
                for (let faculty of data.facultyList) {
                  facultyListStr +=
                    `<option value="${faculty.faculty_lid}" data-faculty-id="${faculty.faculty_id}" data-faculty-type="${faculty.faculty_type}">${faculty.faculty_name} - ${faculty.faculty_id}</option>`
                }
              } else {
                facultyListStr +=
                  `<option value="">No Lecture And Faculty is allocated for the requested division and duration</option>`
              }

              $('.select-faculty').html(facultyListStr).attr('disabled', false) 
            },
            error: err => {
              console.log('Error: ', err)
            }
          })
       
        $('.select-faculty').attr('disabled', false)

      })

      $('.select-faculty').on('change', function() {
        rescheduleObj.facultyLidForDateRange = $(this).val();
        rescheduleObj.facultyIdForDateRange = $(this).find('option:selected').attr('data-faculty-id');
        rescheduleObj.facultyTypeForDateRange = $(this).find('option:selected').attr('data-faculty-type');

        if(rescheduleObj.reschFlag == 'RP'){
         
          $.ajax({
            type: 'POST',
            url: '/admin/rescheduling/get-replacing-faculties',
            dataType: "JSON",
            data: {
              fromDate: rescheduleObj.dateRangeFrom,
              toDate: rescheduleObj.dateRangeTo,
              program_lid: rescheduleObj.programLid,
              division_lid: rescheduleObj.divisionLid,
              module_lid: rescheduleObj.moduleLid,
              acad_session_lid: rescheduleObj.acadSessionLid,
              pageNo: 1
            },
            success: data => {
              console.log('Success: ', data)
              let avblfacultyListStr = `<option disabled selected value>--Select To Faculty--</option>`

              if (data.availableFacultyList.length > 0) {
                for (let faculty of data.availableFacultyList) {
                  avblfacultyListStr +=
                    `<option value="${faculty.faculty_lid}" data-faculty-id="${faculty.faculty_id}" data-faculty-type="${faculty.faculty_type}">${faculty.faculty_name} - ${faculty.faculty_id}</option>`
                }
              }else{
                avblfacultyListStr +=
                    `<option value="">No faculty available to replace</option>`
              }

              $('#replace-faculty-dropdown').html(avblfacultyListStr).attr('disabled', false)
            },
            error: err => {
              console.log('Error: ', err)
            }
          })
        }
      })

      $('.fetch-event-data-btn').on('click', function() {
        console.log('rescheduleObj:::::::::', rescheduleObj)

        let actionType = $(document).find('.schedule-type:checked').attr('id');

        if(isLectureFetchable()){
          if ($(document).find('.schedule-type:checked').val() == 7) {
            replaceToFacultyObj.name = $(document).find('#replace-faculty-dropdown option:selected').text()
            replaceToFacultyObj.id = $(document).find('#replace-faculty-dropdown option:selected').attr('data-faculty-id')
            replaceToFacultyObj.lid = $(document).find('#replace-faculty-dropdown').val()
            replaceToFacultyObj.type = $(document).find('#replace-faculty-dropdown option:selected').attr('data-faculty-type');
          }

          let ApiObj = {
            type: 'POST',
            url: '/admin/rescheduling/fetch-lecture-by-date-range-faculty',
            data: {
              fromDate: rescheduleObj.dateRangeFrom,
              toDate: rescheduleObj.dateRangeTo,
              facultyLid: rescheduleObj.facultyLidForDateRange,
              program_lid: rescheduleObj.programLid,
              division_lid: rescheduleObj.divisionLid,
              module_lid: rescheduleObj.moduleLid,
              acad_session_lid: rescheduleObj.acadSessionLid,
              actionType: actionType,
            },
            dataType: 'JSON'
          }

          ajaxApi(ApiObj).then(data => {
            console.log('event data', data)
            ajaxTable(data.lectureList, data.actionType, replaceToFacultyObj);
          }).catch(error => {
            console.log('lecture getch error', error);
          })
        }else{
          alert('Kindly Fill/Select All The Fields!!')
        }
      })

      $(document).on('change', '#cancel-all', function() {
        let isChecked = $(this).is(':checked')

        if (isChecked) {
          $(document).find('.is-cancel').prop('checked', true)
        } else {
          $(document).find('.is-cancel').prop('checked', false)
        }
      })
  
      $(document).on('change', '#select-all', function() {
        let isChecked = $(this).is(':checked')

        if (isChecked) {
          $(document).find('.is-select').prop('checked', true)
          $(document).find('.event-list-table tbody tr .reschedule-edit').css('pointer-events', 'all')
        } else {
          $(document).find('.is-select').prop('checked', false)
          $(document).find('.event-list-table tbody tr .reschedule-edit').css('pointer-events', 'none')

          if ($(document).find('.schedule-type:checked').val() != 7) {
            $(document).find(`.event-list-table tbody tr td[data-new-faculty-lid]`).text('')
            $(document).find(`.event-list-table tbody tr td[data-new-faculty-lid]`).attr({
              'data-new-faculty-lid': '',
              'data-new-faculty-id': '',
              'data-new-faculty-type': ''
            })
          }

          if ($(document).find('.schedule-type:checked').val() == 3 || $(document).find('.schedule-type:checked').val() == 7) {
            $(document).find(`.event-list-table tbody tr td[data-new-date]`).text('')
            $(document).find(`.event-list-table tbody tr td[data-new-date]`).attr({
              'data-new-date': '',
              'data-new-day-lid': '',
            })

            $(document).find(`.event-list-table tbody tr td[data-new-start-time-lid]`).text('')
            $(document).find(`.event-list-table tbody tr td[data-new-start-time-lid]`).attr({
              'data-new-start-time-lid': '',
              'data-new-end-time-lid': ''
            })
          }

          $(document).find(`.event-list-table tbody tr td[data-new-room-lid]`).text('')
          $(document).find(`.event-list-table tbody tr td[data-new-room-lid]`).attr({'data-new-room-lid': '', 'data-new-room-abbr':''})
        }
      })

      $(document).on('change', '.is-select', function() {
        let isChecked = $(this).is(':checked')
        if (isChecked) {
          $(this).prop('checked', true)
          $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] .reschedule-edit`).css('pointer-events', 'all')
        } else {
          $(this).prop('checked', false)
          $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] .reschedule-edit`).css('pointer-events', 'none')

          if ($(document).find('.schedule-type:checked').val() != 7) {
            $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] td[data-new-faculty-lid]`).text('')
            $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] td[data-new-faculty-lid]`).attr({
              'data-new-faculty-lid': '',
              'data-new-faculty-id': '',
              'data-new-faculty-type': ''
            })
          }

          if ($(document).find('.schedule-type:checked').val() == 3 || $(document).find('.schedule-type:checked').val() == 7) {
            $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] td[data-new-date]`).text('')
            $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] td[data-new-date]`).attr({
              'data-new-date': '',
              'data-new-day-lid': '',
            })

            $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] td[data-new-start-time-lid]`).text('')
            $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] td[data-new-start-time-lid]`).attr({
              'data-new-start-time-lid': '',
              'data-new-end-time-lid': ''
            })
          }

          $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] td[data-new-room-lid]`).text('')
          $(document).find(`.event-list-table tbody tr[data-lid="${$(this).attr('data-lid')}"] td[data-new-room-lid]`).attr({'data-new-room-lid': '', 'data-new-room-abbr':''})
        }
      })
      
      $('.data-filter-empty').on('change', function() {
        $('.res-filter .empty-filter').val('');
      })
      
      $(document).on('change','#reschedule-to-date', function() {
        $(document).find('#rescheduleModal .modal-body select').val('');
      })
      

      // ---------------------------------------EDIT-UPDATE TABLE FOR MODIFY/RESCHEDULE/REPLACE----------------------------------- //

      let dateList = `<div class="my-4">
                      <label>To Date</label>
                      <input type="date" min="${rescheduleObj.academicStartDate}" max="${rescheduleObj.academicEndDate}" id="reschedule-to-date" class="form-control rounded-0"/>
                      </div>`

      let roomSelect = `<label for="available-room-list" class="form-label">Select Room</label> 
                        <select id="available-room-list" class="form-select mb-4" disabled></select>`;  
                        
      let timeListJson = JSON.parse(`<%- slotIntervalTiming%>`);

      let startTimeList = `<label for="start-time-list" class="form-label">Select Start Time</label> <select id="start-time-list" class="form-select mb-4">`;
      startTimeList += `<option value="">--Select Start Time--</option>`
      for (let time of timeListJson) {
        startTimeList += `<option value="${time.id}">${time.start_time}</option>`
      }
      startTimeList += `</select>`

      let endTimeList = `<label for=""end-time-list" class="form-label">Select End Time</label><select id="end-time-list" class="form-select mb-4"></select>`;

      let rowLid;
      let dayLid;
      let date;
      let roomLid;
      let startTimeLid;
      let endTimeLid;

      //On reschedule/modify/replace modal open 
      $(document).on('click', '.reschedule-edit', function() {

        let roomList = ``;
        let facultyList = ``;
  

        rowLid = $(this).attr('data-lid');
        dayLid = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-day-lid]`).attr('data-day-lid');
        date = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-date]`).attr('data-date');
        roomLid = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-room-lid]`).attr('data-room-lid');
        startTimeLid = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-start-time-lid]`).attr('data-start-time-lid');
        endTimeLid = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-start-time-lid]`).attr('data-end-time-lid');

        if ($(document).find('.schedule-type:checked').val() == 2) {
          let ApiObj = {
            url: '/admin/rescheduling/fetch-available-room-by-day-time-range',
            type: 'POST',
            data: {
              startTimeLid: startTimeLid,
              endTimeLid: endTimeLid,
              date: date,
              roomLid: roomLid,
              programLid: rescheduleObj.programLid,
              sessionLid: rescheduleObj.acadSessionLid,
              moduleLid: rescheduleObj.moduleLid

            },
            dataType: 'JSON'
          }

          ajaxApi(ApiObj).then(result => {
              roomList = ``;
              facultyList = ``;
              roomList += `<label for="available-room-list" class="form-label">Select Room</label>`;
              roomList += `<select id="available-room-list" class="form-select mb-4">`
              facultyList += `<label for="available-faculty-list" class="form-label">Select Faculty</label>`;
              facultyList += `<select id="available-faculty-list" class="form-select">`


              if (result.availableRoom.length > 0) {

                roomList +=
                  `<option disabled  selected>--Select Room--</option>
                      <option value="">Current Room</option>`;

                for (let room of result.availableRoom) {

                  roomList +=
                    `<option value="${room.room_lid}" data-room-abbr="${room.room_abbr}"> ${room.room_number} </option>`
                }

              } else {
                roomList +=
                  `<option disabled  selected>--Select Room--</option>
                      <option value="">Only Current Room Available</option>`
              }

              if (result.availableFaculty.length > 0) {

                facultyList +=
                  `<option disabled  selected value="">--Select Faculty--</option>`;

                for (let faculty of result.availableFaculty) {

                  facultyList +=
                    `<option value="${faculty.faculty_lid}" data-faculty-id="${faculty.faculty_id}" data-faculty-type="${faculty.faculty_type_abbr}"> ${faculty.faculty_name} </option>`
                }

              } else {
                facultyList +=
                  `<option value=""> No Other Faculty Available For That Duration! </option>`
              }


              roomList += `</select>`;
              facultyList += `</select>`;

              $(document).find("#rescheduleModal .modal-body").html(roomList)
              $(document).find("#rescheduleModal .modal-body").append(facultyList)
              $(document).find("#rescheduleModal #update-table").attr('data-row-id', rowLid)

              $(document).find("#rescheduleModal #update-table").attr('disabled', 'true');
              $('#rescheduleModal').modal('show');
        
          }).catch(err => {
            console.log(err)
          })
        } else if ($(document).find('.schedule-type:checked').val() == 3) {


          let facultySelect = `<label for="available-faculty-list" class="form-label">Select Faculty</label>
                              <select id="available-faculty-list" class="form-select" disabled> </select>`;

    
          $(document).find("#rescheduleModal .modal-body").html(dateList)
          $(document).find("#rescheduleModal .modal-body").append(startTimeList)
          $(document).find("#rescheduleModal .modal-body").append(endTimeList)
          $(document).find("#rescheduleModal .modal-body").append(roomSelect)
          $(document).find("#rescheduleModal .modal-body").append(facultySelect)
          $(document).find("#rescheduleModal #update-table").attr('disabled', 'true');
          $(document).find("#rescheduleModal #update-table").attr('data-row-id', rowLid)
          $('#rescheduleModal').modal('show');
        } else if ($(document).find('.schedule-type:checked').val() == 7) {

          $(document).find("#rescheduleModal .modal-body").html(dateList)
          $(document).find("#rescheduleModal .modal-body").append(startTimeList)
          $(document).find("#rescheduleModal .modal-body").append(endTimeList)
          $(document).find("#rescheduleModal .modal-body").append(roomSelect)
          $(document).find("#rescheduleModal #update-table").attr('disabled', 'true');
          $(document).find("#rescheduleModal #update-table").attr('data-row-id', rowLid)
          $('#rescheduleModal').modal('show');
        }

      })

      //on start time change in modal
      $(document).on('change', '#start-time-list', function() {

        $(document).find("#rescheduleModal .modal-body #end-time-list").html('')

        let endTimeOption = '<option value="">--Select End Time--</option>';
        let startTimeLid = parseInt($(this).val())

        for (let time of timeListJson) {
          if ((startTimeLid + 11) == time.id) {
            endTimeOption += `<option value="${time.id}">${time.end_time}</option>`
          }
        }

        $(document).find("#rescheduleModal .modal-body #end-time-list").append(endTimeOption)
      })

      //On end time change fetch available room and faculty for reschedule/replace
      $(document).on('change', '#end-time-list', function() {

        date = convertDate($(document).find(`#reschedule-to-date`).val(), '-');
        startTimeLid = $(document).find(`#start-time-list`).val();
        endTimeLid = $(document).find(`#end-time-list`).val();
        let roomList = ``;
        let facultyList = ``;

        let ApiObj = {
          url: '/admin/rescheduling/fetch-available-room-by-day-time-range',
          type: 'POST',
          data: {
            startTimeLid: startTimeLid,
            endTimeLid: endTimeLid,
            date: date,
            roomLid: roomLid,
            programLid: rescheduleObj.programLid,
            sessionLid: rescheduleObj.acadSessionLid,
            moduleLid: rescheduleObj.moduleLid

          },
          dataType: 'JSON'
        }
        let resultList;
        ajaxApi(ApiObj).then(result => {

          if ($(document).find('.schedule-type:checked').val() == 3 || $(document).find('.schedule-type:checked').val() == 7) {
            console.log('reschedule faculty and room list::', result);

            if (result.availableRoom.length > 0) {

              roomList +=
                `<option disabled  selected value="">--Select Room--</option>`;

              for (let room of result.availableRoom) {

                roomList +=
                  `<option value="${room.room_lid}" data-room-abbr="${room.room_abbr}"> ${room.room_number} </option>`
              }

            } else {
              roomList +=
                `<option value=""> No Room Available For That Duration! </option>`
            }

            if ($(document).find('.schedule-type:checked').val() == 3) {

              if (result.availableFaculty.length > 0) {

                facultyList +=
                  `<option disabled  selected value="">--Select Faculty--</option>`;

                for (let faculty of result.availableFaculty) {

                  facultyList +=
                    `<option value="${faculty.faculty_lid}" data-faculty-id="${faculty.faculty_id}"  data-faculty-type="${faculty.faculty_type_abbr}"> ${faculty.faculty_name} </option>`
                }

              } else {
                facultyList +=
                  `<option value=""> No Other Faculty Available For That Duration! </option>`
              }

              $(document).find("#rescheduleModal #available-faculty-list").html(facultyList);
              $(document).find("#rescheduleModal #available-faculty-list").removeAttr('disabled');
            }

            $(document).find("#rescheduleModal #available-room-list").html(roomList)
            $(document).find("#rescheduleModal #available-room-list").removeAttr('disabled')

          }
          $('#rescheduleModal').modal('show');
        }).catch(error => {

          console.log('Faculty Availability error', error);
        })

      })

      //Enable update button  
      $(document).on('change', '#available-room-list', function() {
        $(document).find('#update-table').removeAttr('disabled')
      })

      $(document).on('change', '#available-faculty-list', function() {
        $(document).find('#update-table').removeAttr('disabled')
      })

      $(document).on('change', '#reschedule-to-date', function() {
        $(document).find('#update-table').removeAttr('disabled')
      })

      $(document).on('change', '#start-time-list', function() {
        $(document).find('#update-table').removeAttr('disabled')
      })

      $(document).on('change', '#end-time-list', function() {
        $(document).find('#update-table').removeAttr('disabled')
      })

      //update table
      $(document).on('click', '#update-table', function() {

        let reschToDate;
        let startTime;
        let endTime;
        let facultyId;
        let roomAbbr;
        let facultyType;

        // Reschedule
        if ($(document).find('.schedule-type:checked').val() == 3) {

          reschToDate = $(document).find('#reschedule-to-date').val();
          startTime = $(document).find('#start-time-list option:selected').text();
          endTime = $(document).find('#end-time-list option:selected').text();
          facultyId = $(document).find('#available-faculty-list option:selected').attr('data-faculty-id');
          roomAbbr = $(document).find('#available-room-list option:selected').attr('data-room-abbr');
          facultyType = $(document).find('#available-faculty-list option:selected').attr('data-faculty-type');

          let facultyAvailabilityCheckData = {
            startDate: reschToDate,
            endDate: reschToDate,
            startTime: startTime,
            endTime: endTime,
            facultyId: facultyId,
            facultyType: facultyType
          }

          let roomAvailabilityCheckData = {
            startDate: reschToDate,
            endDate: reschToDate,
            startTime: startTime,
            endTime: endTime,
            roomAbbr: roomAbbr,

          }

          if (isValidRescheduleData()) {
            console.log('facultyRoomAvailabilityCheckData', facultyAvailabilityCheckData, roomAvailabilityCheckData)
            socket.emit('facultyAvailabilityCheck', facultyAvailabilityCheckData, roomAvailabilityCheckData)
            // socket.emit('roomAvailabilityCheck', facultyAvailabilityCheckData, roomAvailabilityCheckData)
          } else {
            alert('all fields are mandatory')
          }
        } 
        else if ($(document).find('.schedule-type:checked').val() == 2) {

          reschToDate = convertDate($(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-date]`).attr('data-date'), '/');
          startTime = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-start-time]`).attr('data-start-time');
          endTime = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-end-time]`).attr('data-end-time');

          if ($(document).find('#available-faculty-list').val()) {
            facultyId = $(document).find('#available-faculty-list option:selected').attr('data-faculty-id');
            facultyType = $(document).find('#available-faculty-list option:selected').attr('data-faculty-type');
          } else {
            facultyId = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-faculty-id]`).attr('data-faculty-id');
            facultyType = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-faculty-type]`).attr('data-faculty-type');
          }

          if ($(document).find('#available-room-list').val()) {
            roomAbbr = $(document).find('#available-room-list option:selected').attr('data-room-abbr');
          } else {
            roomAbbr = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-room-abbr]`).attr('data-room-abbr');
          }

          let facultyAvailabilityCheckData = {
            startDate: reschToDate,
            endDate: reschToDate,
            startTime: startTime,
            endTime: endTime,
            facultyId: facultyId,
            facultyType: facultyType
          }

          let roomAvailabilityCheckData = {
            startDate: reschToDate,
            endDate: reschToDate,
            startTime: startTime,
            endTime: endTime,
            roomAbbr: roomAbbr,

          }


          if (isValidModifyData(facultyAvailabilityCheckData, roomAvailabilityCheckData)) {
            console.log('facultyRoomAvailabilityCheckData',  roomAvailabilityCheckData)

            socket.emit('facultyAvailabilityCheck', facultyAvailabilityCheckData,  roomAvailabilityCheckData)
            // socket.emit('roomAvailabilityCheck', facultyAvailabilityCheckData, roomAvailabilityCheckData)
          } else {
            alert('all fields are mandatory')
          }

        } 
        else if ($(document).find('.schedule-type:checked').val() == 7) {
          reschToDate = $(document).find('#reschedule-to-date').val();
          startTime = $(document).find('#start-time-list option:selected').text();
          endTime = $(document).find('#end-time-list option:selected').text();
          roomAbbr = $(document).find('#available-room-list option:selected').attr('data-room-abbr');
          facultyId = replaceToFacultyObj.id;
          facultyType = replaceToFacultyObj.type;

          let facultyAvailabilityCheckData = {
            startDate: reschToDate,
            endDate: reschToDate,
            startTime: startTime,
            endTime: endTime,
            facultyId: facultyId,
            facultyType: facultyType
          }

          let roomAvailabilityCheckData = {
            startDate: reschToDate,
            endDate: reschToDate,
            startTime: startTime,
            endTime: endTime,
            roomAbbr: roomAbbr,
          }

          if (isValidReplaceData()) {
            console.log('check avaialbility for replace::::::>>>', facultyAvailabilityCheckData, roomAvailabilityCheckData)

            socket.emit('facultyAvailabilityCheck', facultyAvailabilityCheckData, roomAvailabilityCheckData)
            // socket.emit('roomAvailabilityCheck', facultyAvailabilityCheckData, roomAvailabilityCheckData)
          } else {
            alert('All fields are mandatory')
          }
        }

        // $('#rescheduleModal').modal('hide');
      })
      
      // ---------------------------------SUBMIT EVENTS FOR CANCEL/MODIFY/RESCHEDULE/REPLACE------------------------------------- //
  
      
      $(document).on('click', '#cancel-event-btn', function() {
       
        if (!isValidCancelEvent()) {
          alert('Make sure to Check the events you want to cancel.')
        }
        else if(!isReasonSelected()) {
          alert('Please Select all the mandatory fields with Reason')
        }
        else {
          console.log('Cancel initiated::')
          let timeSheetLidJson = [];

            $('.is-cancel:checked').each(function() {
              timeSheetLidJson.push({
                timeSheetLid: $(this).closest('tr').attr('data-lid')
              })
            })
            rescheduleObj.eventsJson = timeSheetLidJson;

            console.log(">>>>>>>>>>>>>>> CANCELLING EVENTS", rescheduleObj)
            // socket.emit('cancelEvents', {
            //   slugName: "<%- slug %>",
            //   transJson: JSON.stringify(rescheduleObj)
            // })
        }

      })

      $(document).on('click', '#modify-event-btn', function() {
       
        if (!isValidModifyEvent()) {
          alert('Please fill all the mandatory fields for selected rows.')
        }
        else if(!isReasonSelected()) {
          alert('Please Select all the mandatory fields with Reason')
        }
        else {
          console.log('Modify initiated::')

          let timeSheetLidJson = [];
          let modifyObj = {};
          $(document).find('.event-list-table tbody tr .is-select:checked').each((index, element) => {
            modifyObj = {}
            modifyObj.id = $(element).attr('data-lid')
            modifyObj.newFacultyLid = $(element).closest('tr').find(`td[data-new-faculty-lid]`).attr('data-new-faculty-lid');
            modifyObj.newRoomLid = $(element).closest('tr').find(`td[data-new-room-lid]`).attr('data-new-room-lid');

            timeSheetLidJson.push(modifyObj)
          })
          console.log('data id array::', timeSheetLidJson)
          rescheduleObj.eventsJson = timeSheetLidJson;

          console.log('json obj for Modify', rescheduleObj)

          //   $('.loaderBody').removeClass('d-none')
          //   // socket.emit('bulkModifyEventedSlot', {
          //   //   transJson: JSON.stringify(resJson),
          //   //   slugName: "<%- slug %>",
          //   //   resObj: rescheduleObj
          //   // })

          // }
        }
      })

      $(document).on('click', '#reschedule-event-btn', function() {

        if (!isValidRescheduleEvent()) {
          alert('Please fill all the mandatory fields for selected rows.')
        }
        else if(!isReasonSelected()) {
          alert('Please Select all the mandatory fields with Reason')
        }
        else {
          console.log('Reschedule initiated::')

          let timeSheetLidJson = [];
          let modifyObj = {};
          $(document).find('.event-list-table tbody tr .is-select:checked').each((index, element) => {
            modifyObj = {}
            modifyObj.id = $(element).attr('data-lid')
            modifyObj.newFacultyLid = $(element).closest('tr').find(`td[data-new-faculty-lid]`).attr('data-new-faculty-lid');
            modifyObj.newRoomLid = $(element).closest('tr').find(`td[data-new-room-lid]`).attr('data-new-room-lid');
            modifyObj.newDate = $(element).closest('tr').find('td[data-new-date]').attr('data-new-date');
            modifyObj.newStartTimeLid = $(element).closest('tr').find('td[data-new-start-time-lid]').attr('data-new-start-time-lid');
            modifyObj.newEndTimeLid = $(element).closest('tr').find('td[data-new-end-time-lid]').attr('data-new-end-time-lid');

            timeSheetLidJson.push(modifyObj)
          })
          console.log('data id array::', timeSheetLidJson)
          rescheduleObj.eventsJson = timeSheetLidJson;

          console.log('json obj for Reschedule', rescheduleObj)

          // $('.loaderBody').removeClass('d-none')
          // socket.emit('rescheduleEventedSlot', {
          //   slugName: "<%- slug %>",
          //   resObj: rescheduleObj
          // })
        }

      })

      $(document).on('click', '#replace-event-btn', function() {

        if (!isValidReplaceEvent()) {
          alert('Please fill all the mandatory fields for selected rows.')
        }
        else if(!isReasonSelected()) {
          alert('Please Select all the mandatory fields with Reason')
        }
        else {
          console.log('Replace initiated::')

          let timeSheetLidJson = [];
          let modifyObj = {};
          $(document).find('.event-list-table tbody tr .is-select:checked').each((index, element) => {
            modifyObj = {}
            modifyObj.id = $(element).attr('data-lid')
            modifyObj.newFacultyLid = $(element).closest('tr').find(`td[data-new-faculty-lid]`).attr('data-new-faculty-lid');
            modifyObj.newRoomLid = $(element).closest('tr').find(`td[data-new-room-lid]`).attr('data-new-room-lid');
            modifyObj.newDate = $(element).closest('tr').find('td[data-new-date]').attr('data-new-date');
            modifyObj.newStartTimeLid = $(element).closest('tr').find('td[data-new-start-time-lid]').attr('data-new-start-time-lid');
            modifyObj.newEndTimeLid = $(element).closest('tr').find('td[data-new-end-time-lid]').attr('data-new-end-time-lid');

            timeSheetLidJson.push(modifyObj)
          })
          console.log('data id array::', timeSheetLidJson)
          rescheduleObj.eventsJson = timeSheetLidJson;

          console.log('json obj for Reschedule', rescheduleObj)

          // $('.loaderBody').removeClass('d-none')
          // socket.emit('rescheduleEventedSlot', {
          //   slugName: "<%- slug %>",
          //   resObj: rescheduleObj
          // })
        }
      })


      // --------------------------------------------------VALIDATION FUNCTIONS------------------------------------------------- //

      function isLectureFetchable() {
        if( !$('.res-filter>div:not(.d-none) .select-faculty').val() ||
         !$('.res-filter>div:not(.d-none) .from-date').val() || !$('.res-filter>div:not(.d-none) .to-date').val()){
         
          return false;
        }
        else if(rescheduleObj.reschFlag == 'RP' && !$('#replace-faculty-dropdown').val()){
          return false;
        }
        else{
          return true;
        }
        
      }

      function isReasonSelected(){
        if (!$('#reschReason').val()) {
          return false;
        } else {
          return true
        }
      }

      function isValidCancelEvent(){
        if ($('.is-cancel:checked').length < 1) {
          return false;
        } else {
          return true
        }
      }

      function isValidModifyEvent() {

        let returnVal = true;
        $(document).find('.is-select:checked').each((index, element) => {
          if (!($(document).find(`.event-list-table tbody tr[data-lid="${$(element).attr('data-lid')}"] td[data-new-faculty-lid]`).attr('data-new-faculty-lid')) ||
            !($(document).find(`.event-list-table tbody tr[data-lid="${$(element).attr('data-lid')}"] td[data-new-room-lid]`).attr('data-new-room-lid'))) {
            returnVal = false;
          }

        })
        if($(document).find('.is-select:checked').length < 1){
          returnVal = false;
        }
      return returnVal
      }

      function isValidRescheduleEvent() {

        let returnVal = true;
        $(document).find('.is-select:checked').each((index, element) => {
          let currentRow = $(document).find(`.event-list-table tbody tr[data-lid="${$(element).attr('data-lid')}"]`);
          if (!($(currentRow).find('td[data-new-faculty-lid]').attr('data-new-faculty-lid')) ||
              !($(currentRow).find('td[data-new-room-lid]').attr('data-new-room-lid')) || 
              !($(currentRow).find('td[data-new-date]').attr('data-new-date')) ||
              !($(currentRow).find('td[data-new-start-time-lid]').attr('data-new-start-time-lid'))){
            returnVal = false;
          }

        })

        if($(document).find('.is-select:checked').length < 1){
          returnVal = false;
        }
      return returnVal
      }

      function isValidReplaceEvent() {

        let returnVal = true;
        $(document).find('.is-select:checked').each((index, element) => {
          let currentRow = $(document).find(`.event-list-table tbody tr[data-lid="${$(element).attr('data-lid')}"]`);
          if (!($(currentRow).find('td[data-new-faculty-lid]').attr('data-new-faculty-lid')) ||
              !($(currentRow).find('td[data-new-room-lid]').attr('data-new-room-lid')) || 
              !($(currentRow).find('td[data-new-date]').attr('data-new-date')) ||
              !($(currentRow).find('td[data-new-start-time-lid]').attr('data-new-start-time-lid'))){
            returnVal = false;
          }

        })

        if($(document).find('.is-select:checked').length < 1){
          returnVal = false;
        }
        return returnVal
      }

      function isValidRescheduleData(){
        if ($(document).find('#reschedule-to-date').val() && $(document).find('#start-time-list').val() && $(document).find('#end-time-list').val() && $(document).find('#available-room-list').val() && $(document).find('#available-faculty-list').val()) {
          return true;
        } else {
          return false
        }
      }

      function isValidModifyData(facultyJson, roomJson) {
        let returnValue = true;
        for (let key in facultyJson) {
          if (facultyJson[key] == "") {
            returnValue = false
          }
        }
        for (let key in roomJson) {
          if (roomJson[key] == "") {
            returnValue = false
          }
        }

        return returnValue;
      }

      function isValidReplaceData() {
        if ($(document).find('#reschedule-to-date').val() && $(document).find('#start-time-list').val() && $(document).find('#end-time-list').val() && $(document).find('#available-room-list').val()) {
          return true;
        } else {
          return false
        }
      }

     //CONVERSION FUNCTION
     function convertDate(cDate, splitChar) {

      if (splitChar == '/') {
        //31/08/2021
        let arr = cDate.split('/');
        return `${arr[2]}-${arr[1]}-${arr[0]}`
      } else if (splitChar == '-') {
        //2021-11-06
        let arr = cDate.split('-');
        return `${arr[2]}/${arr[1]}/${arr[0]}`
      }
    }

      // ---------------------------------------------RESPONSE FROM SOCKET---------------------------------------------------//

      socket.on("facultyRoomAvlList", function(facultyData, roomData) {

        let newRoomTd;
        let newFacultyTd;
        let newDateTd;
        let newTimeTd;
        let currentRow;

        // console.log('facultyData & roomData', facultyData, roomdata);
        if (facultyData.data.length < 1 && roomData.data.length < 1) {

          if ($(document).find('.schedule-type:checked').val() == 3) {
            
            newRoomTd = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-new-room-lid]`)
            newFacultyTd = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-new-faculty-lid]`)
            newDateTd = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-new-date]`)
            newTimeTd = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-new-start-time-lid]`)
            currentRow = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"]`)
            console.log('Reschedule table update', rowLid)

            if ($(document).find('#available-room-list').val()) {
              newRoomTd.text(`${$(document).find('#available-room-list option:selected').text()}`);
              newRoomTd.attr('data-new-room-lid', $(document).find('#available-room-list').val());
              newRoomTd.attr('data-new-room-abbr', $(document).find('#available-room-list option:selected').attr('data-room-abbr'));
            } else {
              newRoomTd.text(`${$(currentRow).find(`td[data-room-lid]`).text()}`)
              newRoomTd.attr('data-new-room-lid', $(currentRow).find(`td[data-room-lid]`).attr('data-room-lid'));
              newRoomTd.attr('data-new-room-abbr', $(currentRow).find(`td[data-room-lid]`).attr('data-room-abbr'));
            }

            if ($(document).find('#available-faculty-list').val()) {
              newFacultyTd.text(`${$(document).find('#available-faculty-list option:selected').text()}`);
              newFacultyTd.attr('data-new-faculty-lid', $(document).find('#available-faculty-list').val());
              newFacultyTd.attr('data-new-faculty-id', $(document).find('#available-faculty-list option:selected').attr('data-faculty-id'));
              newFacultyTd.attr('data-new-faculty-type', $(document).find('#available-faculty-list option:selected').attr('data-faculty-type'));
            } else {
              newFacultyTd.text(`${$(currentRow).find('td[data-faculty-lid]').text()}`)
              newFacultyTd.attr('data-new-faculty-lid', $(currentRow).find('td[data-faculty-lid]`').attr('data-faculty-lid'));
              newFacultyTd.attr('data-new-faculty-id', $(currentRow).find('td[data-faculty-id]').attr('data-faculty-id'));
              newFacultyTd.attr('data-new-faculty-type', $(currentRow).find('td[data-faculty-type]').attr('data-faculty-type'));
            }

            newDateTd.text(`${convertDate($(document).find('#reschedule-to-date').val(), '-')}`);
            newDateTd.attr('data-new-date', convertDate($(document).find('#reschedule-to-date').val(), '-'));

            newTimeTd.text(`${$(document).find('#start-time-list option:selected').text()} - ${$(document).find('#end-time-list option:selected').text()}`);
            newTimeTd.attr('data-new-start-time-lid', $(document).find('#start-time-list').val());
            newTimeTd.attr('data-new-end-time-lid', $(document).find('#end-time-list').val());

            $('#rescheduleModal').modal('hide');
          } 
          else if ($(document).find('.schedule-type:checked').val() == 2) {
            newRoomTd = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-new-room-lid]`)
            newFacultyTd = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-new-faculty-lid]`)
            currentRow = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"]`)
            console.log('Modify table update', rowLid)

            if ($(document).find('#available-room-list').val()) {
              newRoomTd.text(`${$(document).find('#available-room-list option:selected').text()}`);
              newRoomTd.attr('data-new-room-lid', $(document).find('#available-room-list').val());
              newRoomTd.attr('data-new-room-abbr', $(document).find('#available-room-list option:selected').attr('data-room-abbr'));
            } else {
              newRoomTd.text(`${$(currentRow).find(`td[data-room-lid]`).text()}`)
              newRoomTd.attr('data-new-room-lid', $(currentRow).find(`td[data-room-lid]`).attr('data-room-lid'));
              newRoomTd.attr('data-new-room-abbr', $(currentRow).find(`td[data-room-lid]`).attr('data-room-abbr'));
            }

            if ($(document).find('#available-faculty-list').val()) {
              newFacultyTd.text(`${$(document).find('#available-faculty-list option:selected').text()}`);
              newFacultyTd.attr('data-new-faculty-lid', $(document).find('#available-faculty-list').val());
              newFacultyTd.attr('data-new-faculty-id', $(document).find('#available-faculty-list option:selected').attr('data-faculty-id'));
              newFacultyTd.attr('data-new-faculty-type', $(document).find('#available-faculty-list option:selected').attr('data-faculty-type'));
            } else {
              newFacultyTd.text(`${$(currentRow).find('td[data-faculty-lid]').text()}`)
              newFacultyTd.attr('data-new-faculty-lid', $(currentRow).find('td[data-faculty-lid]`').attr('data-faculty-lid'));
              newFacultyTd.attr('data-new-faculty-id', $(currentRow).find('td[data-faculty-id]').attr('data-faculty-id'));
              newFacultyTd.attr('data-new-faculty-type', $(currentRow).find('td[data-faculty-type]').attr('data-faculty-type'));
            }

            $('#rescheduleModal').modal('hide');
          }
          else if ($(document).find('.schedule-type:checked').val() == 7) {
            
            newRoomTd = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-new-room-lid]`)
            newDateTd = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-new-date]`)
            newTimeTd = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"] td[data-new-start-time-lid]`)
            currentRow = $(document).find(`.event-list-table tbody tr[data-lid="${rowLid}"]`)
            console.log('Reschedule table update', rowLid)

            if ($(document).find('#available-room-list').val()) {
              newRoomTd.text(`${$(document).find('#available-room-list option:selected').text()}`);
              newRoomTd.attr('data-new-room-lid', $(document).find('#available-room-list').val());
              newRoomTd.attr('data-new-room-abbr', $(document).find('#available-room-list option:selected').attr('data-room-abbr'));
            } else {
              newRoomTd.text(`${$(currentRow).find(`td[data-room-lid]`).text()}`)
              newRoomTd.attr('data-new-room-lid', $(currentRow).find(`td[data-room-lid]`).attr('data-room-lid'));
              newRoomTd.attr('data-new-room-abbr', $(currentRow).find(`td[data-room-lid]`).attr('data-room-abbr'));
            }

            newDateTd.text(`${convertDate($(document).find('#reschedule-to-date').val(), '-')}`);
            newDateTd.attr('data-new-date', convertDate($(document).find('#reschedule-to-date').val(), '-'));

            newTimeTd.text(`${$(document).find('#start-time-list option:selected').text()} - ${$(document).find('#end-time-list option:selected').text()}`);
            newTimeTd.attr('data-new-start-time-lid', $(document).find('#start-time-list').val());
            newTimeTd.attr('data-new-end-time-lid', $(document).find('#end-time-list').val());

            $('#rescheduleModal').modal('hide');
          } 

        }
        else {
          alert('Room or faculty is not available for that duration')

        }

      })

      //RESCHEDULE LOGIC
      // $(`.schedule-type`).on('change', function () {
      //   console.log('RESCHEDULE CHANGED ON CLICK:::::::::::>>>>', $(this).val())
      //   $('#resch-filter-wrapper').addClass('blur');
      //   $('#reschedule-date-dropdown').val('').change()
      //   $('#reschedule-faculty-dropdown').val('')
      //   $('#reschedule-slot-dropdown').val('')
      //   $('#reschedule-room-dropdown').val('').change()
      //   $('#resch-filter-wrapper select').attr('disabled', true);
      //   $('#reschReason').val('').change().attr('disabled', false);
      //   $('#reschDesc').val('').attr('disabled', false);

      //   $('#replace-faculty-wrapper').addClass('d-none')
      //   $('#replace-faculty-checkbox').prop('checked', false)
      //   // $('#normal-modify').removeClass('d-none')
      //   $('#cancel-wrapper').addClass('d-none')
      //   $('#bulk-modify').addClass('d-none')
      //   $(`.from-date`).val('').change()
      //   $(`.to-date`).val('')//.change()
      //   $('#bulk-lecture-list-card').addClass('d-none')
      //   $('#event-list-table-card').addClass('d-none')
      //   $('.fetch-event-data-btn').addClass('d-none');
      //   $('.select-faculty').attr('disabled', true)

      //   $('#cancel-wrapper #cancel-against-extra-container').addClass('d-none')
      //   $('#cancel-wrapper #cancel-against-extra-container .extra-lecture').val('');
      //   $(`#cancel-wrapper input[name="cancel-type"]`).prop('checked', false);
      //   $('#event-filter select').attr('disabled',false)



      //   $(".event-filter-container").removeClass('d-none')
      //   // $(".empty-filter").attr('disabled', false);
      //   $(".empty-filter").val('')

      //   $(".replace-faculty").addClass('d-none')
      //   let isBlurred = true;

      //   let rescheduleType = $(this).val();

      //   console.log('rescheduleType::::::::::',rescheduleType)

      //   rescheduleObj.toDate = '';
      //   rescheduleObj.toSlot = '';
      //   rescheduleObj.toStartTime = '';
      //   rescheduleObj.toEndTime = '';
      //   rescheduleObj.toFacultyId = '';
      //   rescheduleObj.toRoom = '';
      //   rescheduleObj.reasonDetail = '';
      //   rescheduleObj.reasonId = '';
      //   rescheduleObj.bulkModify = false;

      //   rescheduleObj.reschFlag = $(this).attr('data-resch-flag');

      //   console.log('Changed Obj: ', rescheduleObj)

      //   if (rescheduleType == 3) {
      //     console.log('ENTER IN RESCHEDULE')
      //     // console.log('REMOVE DISABLED ATTR FROM DATE:::::::::::::::>>>')
      //     // $('#bulk-modify').removeClass('d-none');
      //     // getFacultiesForModule();
      //     // $('#reschedule-date-dropdown').attr('disabled', false);
      //     // console.log('DROP DOWN:::::::::::>>',$('#reschedule-date-dropdown'))
      //     // $('#resch-filter-wrapper').removeClass('blur');

      //     $('.from-date').attr('disabled', false);
      //     $('#bulk-modify').removeClass('d-none');

      //     $('#cancel-wrapper #cancel-against-extra-container').addClass('d-none');
      //     // $('#bulk-cancel-without-report').parent().removeClass('d-none'); normal-modify
      //     $('.fetch-event-data-btn').removeClass('d-none');
      //     $('#normal-modify').addClass('d-none')
      //   } else if (rescheduleType == 2) {
      //     console.log('ENTER IN MODIFY')
      //     // $('#replace-faculty-wrapper').removeClass('d-none')
      //     // rescheduleObj.toDate = rescheduleObj.fromDate
      //     // rescheduleObj.toSlot = rescheduleObj.fromSlot
      //     // rescheduleObj.toStartTime = rescheduleObj.fromStartTime
      //     // rescheduleObj.toEndTime = rescheduleObj.fromEndTime
      //     // console.log('modified Obj: ', rescheduleObj)
      //     // getFacultiesRoomsForModify(rescheduleObj.toDate)
      //     // console.log('getFacultiesRoomsForModify:::::::::::::::')
      //     // $('#resch-filter-wrapper').removeClass('blur');
      //     // $('#reschedule-date-dropdown').val(rescheduleObj.fromDate).change();
      //     //$('#reschedule-slot-dropdown').val(rescheduleObj.fromSlot).change();
      //     // $(".replace-faculty").addClass('d-none')
      //     $('.from-date').attr('disabled', false);
      //     $('#bulk-modify').removeClass('d-none');
      //     $('#normal-modify').addClass('d-none')
      //     $('#cancel-wrapper #cancel-against-extra-container').addClass('d-none');
      //     // $('#bulk-cancel-without-report').parent().removeClass('d-none'); normal-modify
      //     $('.fetch-event-data-btn').removeClass('d-none');
      //   } else if (rescheduleType == 5) {
      //     $('#reschReason').val(12).change().attr('disabled', true);
      //     $('#reschDesc').val('').attr('disabled', true);
      //     $('#normal-modify').addClass('d-none')
      //     //$(".replace-faculty").addClass('d-none')
      //   } else if (rescheduleType == 6) {
      //     console.log('REGULAR CLASS')
      //       $('#normal-modify').removeClass('d-none')
      //       $("#bulk-modify").addClass('d-none')
      //     //$('.from-date').attr('disabled', false)
      //     $('#resch-filter-wrapper').removeClass('blur');
      //     //$('#bulk-modify').removeClass('d-none')
      //     //$(".replace-faculty").addClass('d-none')
      //     $("#select-new-ec-start-time").html(startTimeList).attr('disabled', false)
      //     $("#select-new-ec-end-time").html(endTimeList).attr('disabled', false)
      //   } else if (rescheduleType == 1) {

      //     console.log('rescheduleObj.isAdjusted: ', rescheduleObj.isAdjusted)
      //     if (rescheduleObj.isAdjusted == 1 || rescheduleObj.isNewEc == 1) {
      //       $('#cancel-against-extra').attr('disabled', true);
      //     } else {
      //       $('#cancel-against-extra').attr('disabled', false);
      //     }

      //     // $(".replace-faculty").addClass('d-none')
      //       $('#normal-modify').addClass('d-none')
      //     $('#cancel-wrapper').removeClass('d-none')
      //     $('#resch-filter-wrapper').removeClass('blur');

      //   }else if(rescheduleType == 4){
      //     console.log('ENTER IN EXTRA CLASS')
      //       $('#normal-modify').removeClass('d-none')
      //       // $(".replace-faculty").addClass('d-none')
      //       $("#select-new-ec-start-time").html(startTimeList).attr('disabled', false)
      //       $("#select-new-ec-end-time").html(endTimeList).attr('disabled', false)
      //   }else if(rescheduleType == 7){
      //     console.log('ENTER IN REPLACE :::::::::::::::::>>>>>')
      //     $("#bulk-modify").removeClass('d-none')
      //     $(".fetch-event-data-btn").removeClass('d-none')
      //     $(".replace-faculty").removeClass('d-none')
      //     $('#normal-modify').addClass('d-none')
      //     $('#cancel-wrapper').addClass('d-none')
      //   }

      // })


      //bulk cancel
      // $(`#cancel-wrapper input[name="cancel-type"]`).on('change', function () {

      //   let cancelType = $(this).val();

      //   if (cancelType == 'bulk') {
      //     $('.from-date').attr('disabled', false);
      //     $('#bulk-modify').removeClass('d-none');
      //     $('#cancel-wrapper #cancel-against-extra-container').addClass('d-none');
      //     // $('#bulk-cancel-without-report').parent().removeClass('d-none');
      //     $('.fetch-event-data-btn').removeClass('d-none');

      //   } else if (cancelType == 'cae') {

      //       console.log('rescheduleObj::::::::: fetch-event-data', rescheduleObj)

      //       $("#cancel-against-extra-class-date").prop('disabled',false)

      //           console.log('Cancel Against Extra Class cancelType::::::::::::::::::::::>>>>>>>', cancelType)
      //           let actionType = $(document).find('.schedule-type:checked').attr('id');
      //           let program_lid = $(document).find("#ProgramFilter").val()
      //           let division_lid = $(document).find("#DivisionFilter").val()
      //           let module_lid = $(document).find("#ModuleFilter").val()
      //           let acad_session_lid = $(document).find("#SessionFilter").val()

      //           let obj = {
      //               program_lid: program_lid,
      //               division_lid: division_lid,
      //               module_lid: module_lid,
      //               acad_session_lid: acad_session_lid,
      //               pageNo: 1
      //           }
      //           console.log('Cancel Against Extra Class::::::::::::::::::::::>>>>>>>',obj)
      //           // console.log('Cancel Against Extra Class actionType::::::::::::::::::::::>>>>>>>',actionType)
      //     $('#bulk-modify').addClass('d-none')
      //     $(`.from-date`).val('').change()
      //     $(`.to-date`).val('')//.change()
      //     $('#replacing-lecture-count .count').text('0')
      //     $('#bulk-lecture-list-card').addClass('d-none')
      //     $('#event-list-table-card').addClass('d-none')
      //     $('.fetch-event-data-btn').addClass('d-none');
      //     // $('#bulk-cancel-without-report').prop('checked', false);
      //     // $('#bulk-cancel-without-report').parent().addClass('d-none');


      //     //GET REGULAR LECTURES
      //   //   let program_lid = $("#ProgramFilter").val()
      //   // let division_lid = $("#DivisionFilter").val()
      //   // let module_lid = $("#ModuleFilter").val()
      //   // let acad_session_lid = $("#SessionFilter").val()

      //     $("#cancel-against-extra-class-date").on('change',function(){
      //         let date_str = convertDate($(this).val(), '-')
      //         let program_lid = $(document).find("#ProgramFilter").val()
      //         let division_lid = $(document).find("#DivisionFilter").val()
      //         let module_lid = $(document).find("#ModuleFilter").val()
      //         let acad_session_lid = $(document).find("#SessionFilter").val() 
      //         console.log('date_str:::::::::::::::>>',date_str)
      //         $.ajax({
      //       type: 'POST',
      //       url: '/admin/rescheduling/get-regular-extra-lecture', 
      //       dataType: "JSON",
      //       data: {
      //               program_lid: program_lid,
      //               division_lid: division_lid,
      //               module_lid: module_lid,
      //               acad_session_lid: acad_session_lid,
      //               date_str: date_str
      //       },
      //       success: data => {
      //         let regularlectureList = data.regularlectureList;
      //         console.log('lectureList: ', data)
      //         let accordionList = `<div class="accordion mb-2" id="caeAccordion">`;

      //         if( data.regularlectureList.length < 1){
      //           accordionList += `<div class="accordion-item no-lecture">NO Lecture Found</div></div>`
      //         }


      //           //REGULAR LECTURE LIST WITHOUT E FLAG
      //           for (let lecture of data.regularlectureList){
      //             accordionList += `<div class="accordion-item">
      //               <h2 class="accordion-header" id="headingOne${lecture.id}">
      //                 <button class="accordion-button  accordion-button-custom text-light bg-dark" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne${lecture.id}" aria-expanded="true" aria-controls="collapseOne${lecture.id}">
      //                   <div class="ms-2 form-check pt-0">
      //                   <input class="form-check-input" type="radio" name="regularLectureOpn" value="${lecture.id}" id="regularLectureOpn">
      //                   <label class="form-check-label" for="regularLectureOpn">
      //                     ${lecture.module_name} - ${lecture.division} | ${lecture.date_str}  | ${lecture.start_time} to ${lecture.end_time}
      //                   </label>
      //                 </div>
      //                 </button>
      //               </h2>
      //               <div id="collapseOne${lecture.id}" class="accordion-collapse collapse" aria-labelledby="headingOne${lecture.id}" data-bs-parent="#caeAccordion">
      //                 <div class="accordion-body">
      //               <strong>Current Date</strong> : ${lecture.date_str}<br>
      //               <strong>Event Name</strong> : ${lecture.event_name}<br>
      //               <strong>Program Name</strong> : ${lecture.program_name}<br>
      //               <strong>Faculty Name</strong> : ${lecture.faculty_name}<br>
      //               <strong>Acad Session</strong> : ${lecture.acad_session}<br>
      //               <strong>Class Room:</strong> : ${lecture.room_no}/ ${lecture.room_abbr}<br>
      //               <strong>Class Timing</strong> : ${lecture.start_time} to ${lecture.end_time}<br>
      //             </div>
      //               </div>
      //             </div>`;
      //           }
      //           `</div>`;

      //         $(".regular_lecture_list").html(accordionList)


      //         //EXTRA LECTURE LIST WITH E FLAG

      //       let ajaxData = `<option value selected disabled>--Select Extra Lecture--</option>`;
      //         if(data.extrlectureList.length > 0){
      //           for (let lecture of data.extrlectureList) {
      //           ajaxData +=
      //             `<option value="${lecture.event_name}" data-lid="${lecture.id}" data-unx-lid="${lecture.unx_lid}" data-sap-event-id="${lecture.sap_event_id}" data-module-id="${lecture.module_id}" data-program-id="${lecture.program_id}" data-division="${lecture.div}" data-event-type="${lecture.event_type}" data-date="${lecture.date_str}" data-room-no="${lecture.room_no}" data-acad-year="${lecture.acad_year}" data-acad-session="${lecture.acad_session}" data-faculty-id="${lecture.faculty_id}" data-start-time="${lecture.start_time}" data-end-time="${lecture.end_time}" data-slot-name=${lecture.slot_name}>${lecture.event_name} | ${lecture.start_time} to ${lecture.end_time} | ${lecture.date_str} | ${lecture.room_no}</option>`;
      //         $("#cancel-against-extra-class-btn").prop('disabled', false)
      //           }
      //         }else{
      //           ajaxData +=
      //             `<option value="">Lecture Not Found</option>`;
      //             $("#cancel-against-extra-class-btn").prop('disabled', true)
      //         }
      //         $('#cancel-wrapper #cancel-against-extra-container .extra-lecture').html(ajaxData).attr("disabled", false)
      //       },
      //       error: err => {
      //         console.log('Error: ', err)
      //       }
      //     })
      //       })


      //     //GET CANCEL LECTURES
      //     //   $("#cancel-against-extra-class-date").on('change',function(){
      //     //     let date_str = $(this).val()
      //     //     console.log('date_str:::::::::::::::>>',date_str)
      //     //     $.ajax({
      //     //   type: 'POST',
      //     //   url: '/admin/rescheduling/get-new-extra-lectures',
      //     //   dataType: "JSON",
      //     //   data: {
      //     //           program_lid: program_lid,
      //     //           division_lid: division_lid,
      //     //           module_lid: module_lid,
      //     //           acad_session_lid: acad_session_lid,
      //     //           date_str: date_str
      //     //   },
      //     //   success: data => {
      //     //     let lectureList = data.lectureList;
      //     //     console.log('lectureList: ', lectureList)
      //     //     let ajaxData = `<option value selected disabled>--Select Extra Lecture--</option>`;
      //     //     if(lectureList.length > 0){
      //     //       for (let lecture of lectureList) {
      //     //       ajaxData +=
      //     //         `<option value="${lecture.event_name}" data-lid="${lecture.id}" data-unx-lid="${lecture.unx_lid}" data-sap-event-id="${lecture.sap_event_id}" data-module-id="${lecture.module_id}" data-program-id="${lecture.program_id}" data-division="${lecture.div}" data-event-type="${lecture.event_type}" data-date="${lecture.date_str}" data-room-no="${lecture.room_no}" data-acad-year="${lecture.acad_year}" data-acad-session="${lecture.acad_session}" data-faculty-id="${lecture.faculty_id}" data-start-time="${lecture.start_time}" data-end-time="${lecture.end_time}" data-slot-name=${lecture.slot_name}>${lecture.event_name} | ${lecture.start_time} to ${lecture.end_time} | ${lecture.date_str} | ${lecture.room_no}</option>`;
      //     //    $("#cancel-against-extra-class-btn").prop('disabled', false)
      //     //       }
      //     //     }else{
      //     //       ajaxData +=
      //     //         `<option value="">Lecture Not Found</option>`;
      //     //         $("#cancel-against-extra-class-btn").prop('disabled', true)
      //     //     }
      //     //     $('#cancel-wrapper #cancel-against-extra-container .extra-lecture').html(ajaxData).attr("disabled", false)
      //     //   },
      //     //   error: err => {
      //     //     console.log('Error: ', err)
      //     //   }
      //     // })
      //     //   })




      //     $('#cancel-wrapper #cancel-against-extra-container').removeClass('d-none')

      //   }

      //   console.log('resflag====>>> ', rescheduleObj.reschFlag)
      // })

      // $(`#bulk-cancel-without-report`).on('change', function () {
      //   let isChecked = $(this).is(':checked');

      //   if (isChecked) {
      //     rescheduleObj.reschFlag = 'Z'
      //   } else {
      //     rescheduleObj.reschFlag = 'C'
      //   }

      //   console.log(rescheduleObj.reschFlag)

      // })

      $('#cancel-wrapper #cancel-against-extra-container .extra-lecture').on('change', function() {

        let $this = $(this);

        rescheduleObj.lecLid = $this.find('option:selected').attr('data-lid');
        rescheduleObj.sapEventId = $this.find('option:selected').attr('data-sap-event-id');
        rescheduleObj.eventName = $this.find('option:selected').val();
        rescheduleObj.programId = $this.find('option:selected').attr('data-program-id');
        rescheduleObj.moduleId = $this.find('option:selected').attr('data-module-id');
        rescheduleObj.acadYear = $this.find('option:selected').attr('data-acad-year');
        rescheduleObj.acadSession = $this.find('option:selected').attr('data-acad-session');
        rescheduleObj.division = $this.find('option:selected').attr('data-division');
        rescheduleObj.eventType = $this.find('option:selected').attr('data-event-type');

        rescheduleObj.toRoom = $this.find('option:selected').attr('data-room-no');
        rescheduleObj.toStartTime = $this.find('option:selected').attr('data-start-time');
        rescheduleObj.toEndTime = $this.find('option:selected').attr('data-end-time');
        rescheduleObj.toSlot = $this.find('option:selected').attr('data-slot-name');
        rescheduleObj.toFacultyId = $this.find('option:selected').attr('data-faculty-id');
        rescheduleObj.toDate = $this.find('option:selected').attr('data-date');

      })




      $('#fetch-reschedule-bulk-cancel').on('click', function() {
        console.log('rescheduleObj::::::::: fetch-event-data', rescheduleObj)
        let fromDate = rescheduleObj.fromDate
        let toDate = rescheduleObj.toDate
        let facultyLid = $('#reschedule-faculty-dropdown').val()
        let program_lid = $("#ProgramFilter").val()
        let division_lid = $("#DivisionFilter").val()
        let module_lid = $("#ModuleFilter").val()
        let acad_session_lid = $("#SessionFilter").val()

        let obj = {
          fromDate: fromDate,
          toDate: toDate,
          facultyLid: facultyLid,
          program_lid: program_lid,
          division_lid: division_lid,
          module_lid: module_lid,
          acad_session_lid: acad_session_lid,
          pageNo: 1
        }

        console.log('API DATA obj:::::::', obj)

        let ApiObj = {
          type: 'POST',
          url: '/admin/rescheduling/fetch-lecture-by-date-range-faculty',
          data: {
            fromDate: fromDate,
            toDate: toDate,
            facultyLid: facultyLid,
            program_lid: program_lid,
            division_lid: division_lid,
            module_lid: module_lid,
            acad_session_lid: acad_session_lid,
            pageNo: 1
          },
          dataType: 'JSON'
        }

        ajaxApi(ApiObj).then(data => {
          ajaxTable(data.lectureList)
        }).catch(error => {
          //  showError(error.responseJSON)
        })
      })


      //bulk reschedule
      $('#replace-faculty-checkbox').on('click', function() {
        rescheduleObj.bulkModify = $(this).is(':checked')
        console.log('rescheduleObj.bulkModify:  ', rescheduleObj.bulkModify)

        if (rescheduleObj.bulkModify) {
          $('#normal-modify').addClass('d-none')
          $('.from-date').attr('disabled', false)
          $('#bulk-modify').removeClass('d-none')
        } else {
          $('#normal-modify').removeClass('d-none')
          $('#bulk-modify').addClass('d-none')
          $(`.from-date`).val('').change()
          $(`.to-date`).val('') //.change()
          $('#replacing-lecture-count .count').text('0')
          $('#bulk-lecture-list-card').addClass('d-none')

        }
      })



    

   


      let currenBulkTr;

      $(document).on('click', '#bulk-lecture-list .change-time', function() {
        currenBulkTr = $(this).closest('tr');
        $('#bulkChangeTimeModal').modal('show')
        $('#bulkChangeTimeModal .to-date').val(currenBulkTr.attr('data-date')).change()

        $('.old-details .date').text(currenBulkTr.attr('data-date'))
        $('.old-details .time').text(
          `${currenBulkTr.attr('data-start-time')} to ${currenBulkTr.attr('data-end-time')}`)
        $('.old-details .room').text(currenBulkTr.attr('data-room'))
      })

      $('#bulkChangeTimeModal .to-date').on('change', function() {
        $.ajax({
          type: 'POST',
          url: '/simulation/reschedule/get-slots/',
          dataType: "JSON",
          data: {
            facultyId: rescheduleObj.toFacultyId,
            dateStr: $(this).val()
          },
          success: data => {
            console.log('Success: ', data)
            let slotStr = `<option disabled selected value>--Select Time--</option>`

            for (let slot of data.slotList) {
              slotStr +=
                `<option value="${slot.slotName}" data-sap-start-time="${slot.sapStartTime}" data-sap-end-time="${slot.sapEndTime}">${slot.starttime} - ${slot.endtime}</option>`
            }

            $('#bulkChangeTimeModal .to-time').html(slotStr).attr('disabled', false)
          },
          error: err => {
            console.log('Error: ', err)
          }
        })
      })


      $('#bulkChangeTimeModal .to-time').on('change', function() {
        $.ajax({
          type: 'POST',
          url: '/simulation/reschedule/get-rooms/',
          dataType: "JSON",
          data: {
            dateStr: $('#bulkChangeTimeModal .to-date').val(),
            slotName: $(this).val()
          },
          success: data => {
            console.log('Success: ', data)
            let roomStr = `<option selected disabled value>--Select Room--</option>`

            for (let room of data.roomList) {
              roomStr += `<option value="${room.room_no}">${room.room_no}</option>`
            }

            $('#bulkChangeTimeModal .to-room').html(roomStr).attr('disabled', false)
          },
          error: err => {
            console.log('Error: ', err)
          }
        })
      })

      $('#bulkChangeTimeModal .change').on('click', function() {
        currenBulkTr.attr('data-new-room', $('#bulkChangeTimeModal .to-room').val())
        currenBulkTr.attr('data-new-date', $('#bulkChangeTimeModal .to-date').val())
        currenBulkTr.attr('data-new-slot', $('#bulkChangeTimeModal .to-time').val())
        currenBulkTr.find('.new-time').text($('#bulkChangeTimeModal .to-time option:selected').text())
        currenBulkTr.find('.new-date').text($('#bulkChangeTimeModal .to-date').val())
        currenBulkTr.find('.new-room').text($('#bulkChangeTimeModal .to-room').val())
        currenBulkTr.find('.remark').html(`<i class="fas fa-exclamation-triangle text-info"></i>`)
        $('#bulkChangeTimeModal').modal('hide')
      })


      $('#reschReason').on('change', function() {
        rescheduleObj.reasonId = $(this).val()
        if ($(this).val() == 12 && rescheduleObj.reschFlag == 'C') {
          rescheduleObj.reschFlag = 'Z';
        }

        console.log('rescheduleObj.reschFlag>>>> ', rescheduleObj.reschFlag)
      })

      // $('#reschDesc').on('input', function () {
      //   rescheduleObj.reasonDetail = $(this).val()
      // })

      $(`#reschedule-date-dropdown`).on('change', function() {
        rescheduleObj.fromDate = $(this).val();
        console.log('reschedule-date-dropdown:::::::::::::', rescheduleObj.fromDate)
        $('#reschedule-faculty-dropdown').attr('disabled', false)
        $('#reschedule-to-date-dropdown').attr('disabled', false)
        // getFacultiesRoomsForModify(rescheduleObj.toDate)
      })

      $(`#reschedule-to-date-dropdown`).on('change', function() {
        rescheduleObj.toDate = $(this).val();
        console.log('reschedule-from-date-dropdown fromDate:::::::::::::', rescheduleObj.fromDate)
        console.log('reschedule-to-date-dropdown toDate:::::::::::::', rescheduleObj.toDate)

        getFacultiesRoomsForModify(rescheduleObj.toDate, rescheduleObj.fromDate)
      })

      $(`#reschedule-faculty-dropdown`).on('change', function() {
        rescheduleObj.toFacultyId = $(this).val();
        console.log('reschedule-faculty-dropdown::::::::::::::::>>>')
        if (rescheduleObj.reschFlag !== 'R') {
          return false;
        }

        $.ajax({
          type: 'POST',
          url: '/admin/rescheduling/get-slots',
          dataType: "JSON",
          data: {
            facultyId: $(this).val(),
            dateStr: rescheduleObj.toDate
          },
          success: data => {
            console.log('Success: ', data)
            let slotStr = `<option disabled selected value>--Select Time--</option>`

            for (let slot of data.slotList) {
              slotStr +=
                `<option value="${slot.id}" data-sap-start-time="${slot.sap_start_time}" data-sap-end-time="${slot.sap_end_time}">${slot.start_time} - ${slot.end_time}</option>`
            }

            $('#reschedule-slot-dropdown').html(slotStr).attr('disabled', false)
          },
          error: err => {
            console.log('Error: ', err)
          }
        })
      })


      $(`#reschedule-slot-dropdown`).on('change', function() {

        console.log('reschedule-slot-dropdown::::::::::::::::::>>>>', rescheduleObj)

        if (rescheduleObj.reschFlag !== 'R') {
          return false;
        }

        rescheduleObj.toSlot = $(this).val()
        rescheduleObj.toStartTime = $(this).find(`option:selected`).attr('data-sap-start-time')
        rescheduleObj.toEndTime = $(this).find(`option:selected`).attr('data-sap-end-time')

        $.ajax({
          type: 'POST',
          url: '/simulation/reschedule/get-rooms/',
          dataType: "JSON",
          data: {
            dateStr: rescheduleObj.toDate,
            slotName: $(this).val()
          },
          success: data => {
            console.log('Success: ', data)
            let roomStr = `<option selected disabled value>--Select Room--</option>`

            for (let room of data.roomList) {
              roomStr += `<option value="${room.room_no}">${room.room_no}</option>`
            }

            $('#reschedule-room-dropdown').html(roomStr).attr('disabled', false)
          },
          error: err => {
            console.log('Error RESCHEDULE: ', err)
          }
        })
      })

      $(`#reschedule-room-dropdown`).on('change', function() {
        rescheduleObj.toRoom = $(this).val()
      })


      $("#rescheduleWrapper").on("change", ".dropped-slot", function() {
        $(".loaderBody").removeClass('d-none');
        let $this = $(this);
        let optionSelected = $('option:selected', $this);

        $.ajax({
          type: 'POST',
          url: '/simulation/getFacultyList/',
          dataType: "json",
          data: {
            inputDate: inputDate,
            slotName: slotName,
            campusId: optionSelected.attr("data-campusid").trim(),
            programId: optionSelected.attr("data-programid").trim(),
            moduleId: optionSelected.attr("data-moduleid").trim()
          },
          success: function(data) {
            if (data.cause == "permission denied") {
              window.location = data.reqUrl
              return
            }
            let facultyList = data.facultyList;
            let faculty;
            let ajaxData = "";
            if (facultyList.length === 0) {
              ajaxData += `<option value selected disabled>--No faculty available--</option>`;
            } else {
              ajaxData += "<option value selected disabled>--Select Faculty--</option>";
              for (faculty of facultyList) {
                ajaxData += `<option value="${faculty.facultyId}">${faculty.facultyName}</option>`;
              }
            }

            $("#rescheduleWrapper .dropped-faculty").html(ajaxData).attr("disabled", false);
            $(".loaderBody").addClass('d-none');
          }
        })
      })


      $('#extraClassModal').on('hidden.bs.modal', function(e) {
        $('#simulatedDataModal').modal('hide');
        openAgain = true;
        $('#simulatedDataModal').on('hidden.bs.modal', function(e) {
          if (openAgain) {
            $(`#calendar td[data-date="${convertDate($('#simulatedDataModalTitle').text().trim(), '/')}"]`).click();
            openAgain = false;
            $('.loaderBody').addClass('d-none');
          }
        })
      })

      $('#editSimulatedModalData').on('hidden.bs.modal', function(e) {
        openAgain = true;

        $('#simulatedDataModal').modal('hide')
        $(`#flag-radio-group input[name='schedule-type`).prop('checked', false);
        $("#rescheduleWrapper").addClass("d-none");

        $('#reschedule-date-dropdown').val('').change()
        $('#reschedule-faculty-dropdown').val('')
        $('#reschedule-slot-dropdown').val('')
        $('#reschedule-room-dropdown').val('').change()
        $('#reschReason').val('').change()
        $('#reschDesc').val('')


        $("#rescheduleWrapper .dropped-faculty").attr("disabled", true).html(
          `<option value selected disabled>--Select Faculty--</option>`);

        $('#resch-filter-wrapper select, #resch-filter-wrapper select').attr('disabled', true);
        $('#resch-filter-wrapper').addClass('blur');
        $('#bulk-lecture-list-card').addClass('d-none')


        $('#simulatedDataModal').on('hidden.bs.modal', function(e) {
          if (openAgain) {
            $(`#calendar td[data-date="${convertDate($('#resModalData .current-date').text().trim(), '/')}"]`).click();
            openAgain = false;
            $('.loaderBody').addClass('d-none');
          }
        })

        // setTimeout(function () {
        //   console.log('>>>>>>>>>>>> Opening new modal')


        //   //$('.loaderBody').addClass('d-none')
        // }, 100)

      })


      $("#submit-event-list-btn").click(function() {

        console.log('Obj >>>> ', rescheduleObj.reschFlag)

        if (rescheduleObj.reschFlag === 'R') {

        

        } else if (rescheduleObj.reschFlag === 'C' && $(`#cancel-wrapper input[name="cancel-type"]:checked`).val() !== 'cae') {

         
        } else if (rescheduleObj.reschFlag === 'M') {
          
        } else if (rescheduleObj.reschFlag === 'Y') {
          if (!isChangeTimetable()) {
            alert('Please fill all the mandatory fields.')
          } else {
            let isConfirmed = confirm('Do you really want to change the timetable?')
            if (isConfirmed) {

              let resJson = []

              $('#bulk-lecture-list tbody tr').each(function() {
                resJson.push({
                  id: $(this).attr('data-lid'),
                  date: $(this).attr('data-date'),
                  slot: $(this).attr('data-slot'),
                  room: $(this).attr('data-room'),
                  newDate: $(this).attr('data-new-date'),
                  newSlot: $(this).attr('data-new-slot'),
                  newRoom: $(this).attr('data-new-room'),
                  zFlag: 'Y'
                })
              })

              console.log(resJson)
              console.log(rescheduleObj.reschFlag)

              $('.loaderBody').removeClass('d-none')

              // socket.emit('changeTimetable', {
              //   transJson: JSON.stringify(resJson),
              //   slugName: "<%- slug %>",
              //   resObj: rescheduleObj
              // })

            }
          }
        } else {
          alert('Please select a reschedule option.')
        }
      })


      //EXTRA CLASS LOGIC

      $(document).on('change', `#extraClassModal input[name='extra-class']`, function() {

        console.log('>>>>>>>>>>Extra Class Changinf<<<<<<<<<<<<')

        let extraClassType = $(this).val()

        rescheduleObj.fromDate = ""
        rescheduleObj.fromRoom = ""
        rescheduleObj.fromSlot = ""
        rescheduleObj.fromSlotUuid = ""
        rescheduleObj.fromFacultyId = ""
        rescheduleObj.acadSession = ""
        rescheduleObj.acadYear = "2021"
        rescheduleObj.division = ""
        rescheduleObj.programId = ""
        rescheduleObj.fromStartTime = ""
        rescheduleObj.fromEndTime = ""
        rescheduleObj.uniqueIdForSap = ""
        rescheduleObj.sapFlag = "E"
        rescheduleObj.sapEventId = ""
        rescheduleObj.eventType = ""
        rescheduleObj.eventName = ""
        rescheduleObj.moduleId = ""
        rescheduleObj.extraClassType = extraClassType
        $('#select-new-ec-program').val('').change()
        $('#ec-drop-reason').val('').change()




        console.log('extraClassType: ', extraClassType)

        rescheduleObj.reschFlag = "E"

        if (extraClassType === 'EC') {
          $('#en-wrapper').addClass('d-none')
          $('#ec-wrapper').removeClass('d-none')
          $.ajax({
            type: 'GET',
            url: '/admin/rescheduling/get-cancelled-lectures',
            dataType: "json",
            success: function(data) {
              let lectureList = data.lectureList;
              console.log('lectureList: ', lectureList)
              let ajaxData = `<option value selected disabled>--Select Lecture--</option>`;
              for (let lecture of lectureList) {
                ajaxData +=
                  `<option value="${lecture.event_name}" data-lid="${lecture.id}" data-transaction-id="${lecture.transaction_id}" data-sap-event-id="${lecture.sap_event_id}" data-module-id="${lecture.module_id}" data-program-id="${lecture.program_id}" data-division="${lecture.division}" data-event-type="${lecture.event_type}" data-date="${lecture.date_str}" data-room-no="${lecture.room_no}" data-acad-year="${lecture.acad_year}" data-acad-session="${lecture.acad_session}" data-faculty-id="${lecture.faculty_id}" data-start-time="${lecture.start_time}" data-end-time="${lecture.end_time}" data-slot-name=${lecture.slot_name}>${lecture.event_name} | ${lecture.start_time} to ${lecture.end_time} | ${lecture.date_str}</option>`;
              }
              $("#selectDroppedSlot").html(ajaxData).attr("disabled", false)

            }
          })
        } else {
          $('#ec-wrapper').addClass('d-none')
          $('#en-wrapper').removeClass('d-none')
        }

        console.log('RESOBJ: ', rescheduleObj)

      })

      $("#selectDroppedSlot").on('change', function() {
        let $this = $(this)

        console.log('changed: ', $this.val())
        // $this.find('option:selected').attr('data-program-id')

        rescheduleObj.transLid = $this.find('option:selected').attr('data-lid');
        rescheduleObj.sapEventId = $this.find('option:selected').attr('data-sap-event-id');
        rescheduleObj.eventName = $this.find('option:selected').val();
        rescheduleObj.programId = $this.find('option:selected').attr('data-program-id');
        rescheduleObj.moduleId = $this.find('option:selected').attr('data-module-id');
        rescheduleObj.fromFacultyId = $this.find('option:selected').attr('data-faculty-id');
        rescheduleObj.fromDate = $this.find('option:selected').attr('data-date');
        rescheduleObj.acadYear = $this.find('option:selected').attr('data-acad-year');
        rescheduleObj.acadSession = $this.find('option:selected').attr('data-acad-session');
        rescheduleObj.fromRoom = $this.find('option:selected').attr('data-room-no');
        rescheduleObj.fromStartTime = $this.find('option:selected').attr('data-start-time');
        rescheduleObj.fromEndTime = $this.find('option:selected').attr('data-end-time');
        rescheduleObj.fromSlot = $this.find('option:selected').attr('data-slot-name');
        rescheduleObj.toFacultyId = $this.find('option:selected').attr('data-faculty-id');
        rescheduleObj.division = $this.find('option:selected').attr('data-division');
        rescheduleObj.eventType = $this.find('option:selected').attr('data-event-type');
      })


      $('#ec-drop-reason').on('change', function() {
        rescheduleObj.reasonId = $(this).val()
      })

      // $('#ec-cancellation-desc').on('input', function () {
      //   rescheduleObj.reasonDetail = $(this).val()
      // })


      //NEW EXTRA CLASS LOGIC

      $('#select-new-ec-program').on('change', function() {
        rescheduleObj.programId = $(this).val()

        $.ajax({
          type: 'POST',
          url: '/simulation/reschedule/get-acad-sessions/',
          dataType: "JSON",
          data: {
            programId: $(this).val()
          },
          success: data => {
            console.log('Success: ', data)
            let acadSessionListStr = `<option selected disabled value>--Select Acad Session--</option>`

            for (let session of data.sessionList) {
              acadSessionListStr +=
                `<option value="${session.acad_session}">${session.acad_session}</option>`
            }

            $('#select-new-ec-session').html(acadSessionListStr).attr('disabled', false)

          },
          error: err => {
            console.log('Error: ', err)
          }
        })
      })

      $('#select-new-ec-session').on('change', function() {
        rescheduleObj.acadSession = $(this).val()
        $.ajax({
          type: 'POST',
          url: '/simulation/reschedule/get-divisions/',
          dataType: "JSON",
          data: {
            programId: $('#select-new-ec-program').val(),
            acadSession: $(this).val(),
          },
          success: data => {
            console.log('Success: ', data)
            let divisionListStr = `<option selected disabled value>--Select Division--</option>`

            for (let div of data.divisionList) {
              divisionListStr += `<option value="${div.div}">${div.div}</option>`
            }

            $('#select-new-ec-div').html(divisionListStr).attr('disabled', false)

          },
          error: err => {
            console.log('Error: ', err)
          }
        })

      })

      $('#select-new-ec-div').on('change', function() {
        rescheduleObj.division = $(this).val()
        $.ajax({
          type: 'POST',
          url: '/simulation/reschedule/get-lectures/',
          dataType: "JSON",
          data: {
            programId: $('#select-new-ec-program').val(),
            acadSession: $('#select-new-ec-session').val(),
            division: $(this).val()
          },
          success: data => {
            console.log('Success: ', data)
            let lectureListStr = `<option selected disabled value>--Select Lecture--</option>`

            for (let lecture of data.lectureList) {

              lectureListStr +=
                `<option value="${lecture.module_id}" data-sap-event-id="${lecture.sap_event_id}" data-event-name="${lecture.event_name}" data-event-abbr="${lecture.event_abbr}"  data-acad-year="${lecture.acad_year}" data-event-type="${lecture.event_type}" data-unique-id-for-sap="${lecture.unique_id_for_sap}" data-uuid="${lecture.uuid}" data-event-id="${lecture.event_id}">${lecture.event_name}</option>`
            }

            $('#select-new-ec-lecture').html(lectureListStr).attr('disabled', false)

          },
          error: err => {
            console.log('Error: ', err)
          }
        })

      })


      $('#select-new-ec-lecture').on('change', function() {
        rescheduleObj.moduleId = $(this).val()
        rescheduleObj.sapEventId = $(this).find('option:selected').attr('data-sap-event-id')
        rescheduleObj.eventAbbr = $(this).find('option:selected').attr('data-event-abbr')
        rescheduleObj.acadYear = $(this).find('option:selected').attr('data-acad-year')
        rescheduleObj.eventType = $(this).find('option:selected').attr('data-event-type')
        rescheduleObj.uniqueIdForSap = $(this).find('option:selected').attr('data-unique-id-for-sap')
        //rescheduleObj.newEventId = $('#select-new-ec-faculty').val()
        //rescheduleObj.newEventName = $(this).find('option:selected').attr('data-event-name')


        $.ajax({
          type: 'POST',
          url: '/admin/rescheduling/get-extra-class-faculties/',
          dataType: "JSON",
          data: {
            programId: $('#select-new-ec-program').val(),
            acadSession: $('#select-new-ec-session').val(),
            division: $('#select-new-ec-div').val(),
            moduleId: $(this).val(),
            dateStr: rescheduleObj.toDate,
            slotName: rescheduleObj.toSlot,
            roomNo: rescheduleObj.toRoom
          },
          success: data => {
            console.log('Success: ', data)
            let facultyListStr = `<option selected disabled value>--Select Faculty--</option>`

            for (let faculty of data.facultyList) {
              facultyListStr +=
                `<option value="${faculty.facultyId}" data-lid="${faculty.id}" data-faculty-name="${faculty.facultyName}">${faculty.facultyName}/${faculty.facultyId}</option>`
            }

            $('#select-new-ec-faculty').html(facultyListStr).attr('disabled', false)

          },
          error: err => {
            console.log('Error: ', err)
          }
        })

      })

      // $('#select-new-ec-faculty').on('change', function () {
      //   rescheduleObj.toFacultyId = $(this).val()
      //   rescheduleObj.toFacultyName = $(this).find('option:selected').attr('data-faculty-name')
      //   // rescheduleObj.newEventId = $('#select-new-ec-faculty').val()

      //   // let eventIdArr = rescheduleObj.newEventId.split('-')
      //   // rescheduleObj.newEventId =
      //   //   `${eventIdArr[0]}-${eventIdArr[1]}-${eventIdArr[2]}- ${$(this).find('option:selected').attr('data-lid')}`

      //   // rescheduleObj.newEventId = rescheduleObj.newEventId.trim()
      //   //select-new-ec-lecture
      //   let fullEventName = `${$('#select-new-ec-lecture option:selected').attr('data-event-name').trim()} - TH - ${$('#select-new-ec-div').val().trim()} - ${$('#select-new-ec-session').val().trim()} - ${$('#select-new-ec-program option:selected').attr('data-program-name').trim()} - (${rescheduleObj.toFacultyName})`
      //   console.log('fullEventName>>>>> ', fullEventName)
      //   rescheduleObj.newEventName = fullEventName.trim()

      //   //${$('#select-new-ec-lecture').val().trim()} - TH - ${$('#select-new-ec-div').val().trim()} - ${$(this).find('option:selected').attr('data-lid')}
      //   let newEventId = `${$('#select-new-ec-lecture').val().trim()} - TH - ${$('#select-new-ec-div').val().trim()} - ${$(this).find('option:selected').attr('data-lid')}`

      //   rescheduleObj.newEventId = newEventId;

      //   console.log('fullEventName>>>>> ', newEventId)

      //   console.log(rescheduleObj.newEventId)
      //   console.log(rescheduleObj.newEventName)
      //   console.log(rescheduleObj)

      // })


      $('#scheduleExtraClass').on('click', function() {
        console.log('Extra Class Res Obj: ', rescheduleObj)


        if (rescheduleObj.extraClassType == 'EC' && isValidEC()) {
          let confirmed = confirm('Do you want to procedd with the extra class allocation?')
          if (confirmed) {
            $('.loaderBody').removeClass('d-none')
            socket.emit('scheduleExtraClass', {
              slugName: "<%- slug %>",
              resObj: rescheduleObj
            })
          }

        } else if (rescheduleObj.extraClassType == 'EN' && isValidEN()) {
          let confirmed = confirm('Do you want to procedd with the extra class allocation?')
          if (confirmed) {
            $('.loaderBody').removeClass('d-none')
            socket.emit('scheduleExtraClassNew', {
              slugName: "<%- slug %>",
              resObj: rescheduleObj
            })
          }

        } else {
          alert('Please fill all the mandatory fields.')
        }

      })


      $("#extraClassModal").on('hidden.bs.modal', function(e) {
        $(`#extraClassModal input[name='extra-class']`).prop("checked", false);
        $("#selectDroppedSlot").html(`<option value selected disabled>--Select Lecture--</option>`).attr(
          "disabled", true);
        $("#selectDroppedFaculty").html(`<option value selected disabled>--Select Faculty--</option>`).attr(
          "disabled", true);
        $('#select-new-ec-program').val('')
        $('#select-new-ec-session').val('').attr('disabled', true)
        $('#select-new-ec-div').val('').attr('disabled', true)
        $('#select-new-ec-lecture').val('').attr('disabled', true)
        $('#select-new-ec-faculty').val('').attr('disabled', true)
        $('#ec-wrapper').addClass('d-none')
        $('#en-wrapper').addClass('d-none')
      })



      //AFTER SOCKET EVENTS
      



      socket.on("droppedEventedSlot", async function(data) {
        console.log('<<<<<HELLO>>>>>>')
        console.log("SAPDATA1===>>> ", data)
        if (data.status == 'success' && data.slugName == "<%- slug %>") {
          console.log("FLAG===>>> ", data.resFlag)
          if (data.resFlag == 'C' || data.resFlag == 'Z') {
            $(`#simulatedDataModal[data-modalDate = '${data.inputDate}'] tr[data-room='${data.roomNo}'] td[data-slot='${data.slotName}']`)
              .html('')
            alert(data.msg)
            $("#editSimulatedModalData").modal("hide");
            $('.loaderBody').addClass('d-none')
            // setTimeout(function () {
            //   console.log('>>>>>>>>>>>> Opening new modal', data)

            //   $(`#calendar td[data-date="${convertDate(data.inputDate)}"]`).click()
            //   $('.loaderBody').addClass('d-none')
            // }, 1000)
          } else if (data.resFlag == 'R' || data.resFlag == 'M') {
            console.log('SAPDATA==>> ', data)
            // $(`#simulatedDataModal[data-modalDate = '${data.inputDate}'] tr[data-room='${data.oldRoomNo}'] td[data-slot='${data.fromSlot}']`)
            //   .html('')

            // if (data.isSameDay) {
            //   let newSlot = $(
            //     `#simulatedDataModal[data-modalDate = '${data.inputDate}'] tr[data-room='${data.newRoomNo}'] td[data-slot='${data.toSlot}']`
            //   )

            //   newSlot.html(data.slotDetail.eventName)
            //   newSlot.attr('data-slot', data.toSlot)
            //   newSlot.attr('data-uuid', data.slotDetail.uuid)
            //   newSlot.attr('data-facultyid', data.slotDetail.facultyId)
            //   newSlot.attr('data-acad-session', data.slotDetail.bookedAcadSession)
            //   newSlot.attr('data-div', data.slotDetail.bookedDiv)
            //   newSlot.attr('data-programid', data.slotDetail.bookedProgramId)
            //   newSlot.attr('data-start-time', data.slotDetail.starttime)
            //   newSlot.attr('data-end-time', data.slotDetail.endtime)
            //   newSlot.attr('data-uniqueidforsap', data.slotDetail.uniqueIdForSAP)
            //   newSlot.attr('data-sapflag', data.slotDetail.sapFlag)
            //   newSlot.attr('data-sapeventid', data.slotDetail.sapEventId)
            //   newSlot.attr('data-eventtype', data.slotDetail.eventType)
            //   newSlot.attr('data-eventname', data.slotDetail.eventName)
            //   newSlot.attr('data-acad-year', data.slotDetail.bookedAcadYear)
            //   newSlot.attr('data-moduleid', data.slotDetail.eventId.split('-')[0].trim())

            // }

            alert(data.msg)
            $("#editSimulatedModalData").modal("hide");
            // $('.loaderBody').addClass('d-none')
            // setTimeout(function () {
            //   console.log('>>>>>>>>>>>> Opening new modal', data)
            //   $(`#calendar td[data-date="${convertDate(data.inputDate)}"]`).click()
            //   $('.loaderBody').addClass('d-none')
            // }, 1000)
          } else if (data.resFlag == 'E') {
            console.log('SAPDATA==>> ', data)
            console.log('SAPDATA==>> ', data.slotDetail)
            $(`#simulatedDataModal[data-modalDate = '${data.inputDate}'] tr[data-room='${data.oldRoomNo}'] td[data-slot='${data.fromSlot}']`)
              .html('')
            let newSlot = $(
              `#simulatedDataModal[data-modalDate = '${data.inputDate}'] tr[data-room='${data.newRoomNo}'] td[data-slot='${data.toSlot}']`
            )

            newSlot.html(data.slotDetail.eventName)
            newSlot.attr('data-slot', data.toSlot)
            newSlot.attr('data-uuid', data.slotDetail.uuid)
            newSlot.attr('data-facultyid', data.slotDetail.facultyId)
            newSlot.attr('data-acad-session', data.slotDetail.bookedAcadSession)
            newSlot.attr('data-div', data.slotDetail.bookedDiv)
            newSlot.attr('data-programid', data.slotDetail.bookedProgramId)
            newSlot.attr('data-start-time', data.slotDetail.starttime)
            newSlot.attr('data-end-time', data.slotDetail.endtime)
            newSlot.attr('data-uniqueidforsap', data.slotDetail.uniqueIdForSAP)
            newSlot.attr('data-sapflag', data.slotDetail.sapFlag)
            newSlot.attr('data-sapeventid', data.slotDetail.sapEventId)
            newSlot.attr('data-eventtype', data.slotDetail.eventType)
            newSlot.attr('data-eventname', data.slotDetail.eventName)
            newSlot.attr('data-acad-year', data.slotDetail.bookedAcadYear)
            newSlot.attr('data-moduleid', data.slotDetail.eventId.split('-')[0].trim())
            alert(data.msg)
            $("#extraClassModal").modal("hide");
            $("#editSimulatedModalData").modal("hide");
            //$('.loaderBody').addClass('d-none')
          }

        } else if (data.status !== 'success' && data.slugName == "<%- slug %>") {
          console.log(data)
          alert('Rescheduling failed! ' + data.msg)
          $('.loaderBody').addClass('d-none')
        }
      })

      socket.on("bulkModified", async function(data) {
        console.log(data);
        if (data.isUpdated) {
          for (let status of data.updatedLectureList) {
            $(`#bulk-lecture-list tbody .status[data-date='${status.date_str}'][data-room='${status.room_no}'][data-slot='${status.slot_name}']`)
              .text(status.status)
            $(`#bulk-lecture-list tbody .remark[data-date='${status.date_str}'][data-room='${status.room_no}'][data-slot='${status.slot_name}']`)
              .text(status.status_remark)
          }
        } else {
          alert('There are no lectures to be updated.')
        }
        $('.loaderBody').addClass('d-none')
      })

      socket.on("scheduleCompleted", async function(data) {
        console.log("Data===>> ", data)
        if (data.isScheduled == 1 && data.slugName == "<%- slug %>") {
          $("#simulatedDataModal[data-modalDate = '" + data.inputDate + "'] tr[data-room='" + data
            .roomNo + "'] td[data-slot='" + data.slotName + "']").html(data.tdData)
          $("#extraClassModal").modal("hide");
        }
      })


      socket.on("bulkCancelled", async function(data) {
        console.log(data);
        if (data.isUpdated) {
          for (let status of data.updatedLectureList) {
            $(`.event-list-table-container tbody .status[data-date='${status.date_str}'][data-room='${status.room_no}'][data-slot='${status.slot_name}']`)
              .text(status.status)
            $(`.event-list-table-container tbody .remark[data-date='${status.date_str}'][data-room='${status.room_no}'][data-slot='${status.slot_name}']`)
              .text(status.status_remark)
          }
        } else {
          alert('There are no lectures to be updated.')
        }
        $('.loaderBody').addClass('d-none')
      })

      //Calendar Utils Functions
      function getMonth() {
        let date = calendar.state.currentDate
        let monthInt = date.getMonth();
        return monthInt
      }

      //get faculty for modulen and render
      function getFacultiesForModule() {
        console.log('getFacultiesForModule rescheduleObj', rescheduleObj)
        $.ajax({
          type: 'POST',
          url: '/admin/rescheduling/get-faculties/',
          dataType: "JSON",
          data: {
            moduleId: rescheduleObj.moduleId,
            programId: rescheduleObj.programId
          },
          success: data => {
            console.log('Success: ', data)
            let facultyListStr = `<option selected disabled value>--Select Faculty--</option>`

            for (let faculty of data.facultyList) {
              facultyListStr +=
                `<option value="${faculty.facultyId}">${faculty.facultyName}/${faculty.facultyId}</option>`
            }

            $('#reschedule-faculty-dropdown').html(facultyListStr)

          },
          error: err => {
            console.log('Error: ', err)
          }
        })
      }


      function getFacultiesRoomsForModify(todate, fromDate) {
        console.log('getFacultiesRoomsForModify TO DATE:::::::::::::>>>', todate, fromDate)
        $.ajax({
          type: 'POST',
          url: '/admin/rescheduling/get-faculties-rooms-modify/',
          dataType: "JSON",
          data: {
            // moduleId: rescheduleObj.moduleId,
            // programId: rescheduleObj.programId,
            toDate: todate,
            fromDate: fromDate
            // slotName: rescheduleObj.fromSlot,
            // roomNo: rescheduleObj.fromRoom
          },
          success: data => {
            console.log('Success: ', data)
            let facultyListStr = `<option selected disabled value>--Select Faculty--</option>`
            //let roomStr = `<option selected disabled value>--Select Room--</option>`

            for (let faculty of data.facultyList) {
              facultyListStr +=
                `<option value="${faculty.faculty_id}">${faculty.faculty_name}/${faculty.faculty_id}</option>`
            }

            // for (let room of data.roomList) {
            //   roomStr += `<option value="${room.room_no}">${room.room_no}</option>`
            // }

            // $('#reschedule-slot-dropdown').html(
            //   `<option value="${rescheduleObj.fromSlot}">${rescheduleObj.fromStartTime} - ${rescheduleObj.fromEndTime}</option>`
            // )
            //$('#reschedule-room-dropdown').html(roomStr).attr('disabled', false)
            $("#reschedule-faculty-dropdown").attr('disabled', false)
            $('#reschedule-faculty-dropdown').html(facultyListStr)

          },
          error: err => {
            console.log('Error: ', err)
          }
        })
      }

      //Cancel Flag validation
      let isValidCancel = function() {
        if ($('#reschReason').val()) {
          return true;
        } else {
          return false
        }
      }

      let isValidCancelCae = function() {
        if ($('#reschReason').val() && $("#reschDesc").val() && $("input[name='regularLectureOpn']:checked").val() && $("#extra-lecture-list").val() && $('#cancel-wrapper .extra-lecture').val()) {
          return true;
        } else {
          return false
        }
      }


      let isValidExtraClass = function() {
        if ($('#ProgramFilter').val() && $("#SessionFilter").val() && $("#ModuleFilter").val() && $("#DivisionFilter").val() && $('#extra-lecture-to-date').val() && $("#select-new-ec-start-time").val() && $("#select-new-ec-end-time").val() && $("#select-new-ec-room").val() && $("#select-new-ec-faculty").val() && $("#reschDesc").val() && $('#reschReason').val()) {
          return true;
        } else {
          return false
        }
      }


      let isValidRegularClass = function() {
        if ($('#ProgramFilter').val() && $("#SessionFilter").val() && $("#ModuleFilter").val() && $("#DivisionFilter").val() && $('.from-date').val() && $(".to-date").val() && $(".select-faculty").val() && $("#replace-faculty-dropdown").val() && $("#reschDesc").val() && $('#reschReason').val()) {
          return true;
        } else {
          return false
        }
      }



      let isValidBulkCancel = function() {
        if ($('#reschReason').val() && $('.is-cancel:checked').length) {
          return true;
        } else {
          return false
        }
      }

      //Reschedule Flag validation
      let isValidReschedule = function() {
        if ($('#reschReason').val() && $('#reschedule-date-dropdown').val() && $('#reschedule-faculty-dropdown')
          .val() && $('#reschedule-slot-dropdown').val() && $('#reschedule-room-dropdown').val()) {
          return true;
        } else {
          return false
        }
      }

     

      let isValidBulkModify = function() {
        if (rescheduleObj.reschFlag == 'M' && rescheduleObj.bulkModify && $('#reschReason').val() && rescheduleObj
          .dateRangeFrom && rescheduleObj.dateRangeTo && $('.select-faculty').val()) {
          return true;
        } else {
          return false
        }
      }

      let isChangeTimetable = function() {
        if (rescheduleObj.reschFlag == 'Y' && $('#reschReason').val() && rescheduleObj
          .dateRangeFrom && rescheduleObj.dateRangeTo && $('.select-faculty').val()) {
          return true;
        } else {
          return false
        }
      }

      //extra class cancelled validation
      isValidEC = function() {
        if (rescheduleObj.reschFlag == 'E' && rescheduleObj.extraClassType == 'EC' && $('#selectDroppedSlot')
          .val() && $('#ec-drop-reason').val()) {
          return true;
        } else {
          return false;
        }
      }

      //extra class new validation
      isValidEN = function() {
        if (rescheduleObj.reschFlag == 'E' && rescheduleObj.extraClassType == 'EN' && $('#select-new-ec-program')
          .val() && $('#select-new-ec-session').val() && $('#select-new-ec-div').val() && $(
            '#select-new-ec-lecture').val() && $('#select-new-ec-faculty').val() && $('#ec-drop-reason').val()) {
          return true;
        } else {
          return false;
        }
      }




      //select2 init

      $('.modal-selct2').select2({
        dropdownParent: $('#editSimulatedModalData')
      })

      $('.ec-modal-select2').select2({
        dropdownParent: $('#extraClassModal')
      })

      $('.bulkChangeTimeModal-selct2').select2({
        dropdownParent: $('#bulkChangeTimeModal')
      })



      function callDatatable() {
        if ($('.event-list-table').length > 0) {
          //CALL DATATABLE

          $('.event-list-table').DataTable({
            autoFill: false,
            aLengthMenu: [
              [25, 50, 100, 200, -1],
              [25, 50, 100, 200, "All"]
            ],
            scrollX: '100%',
            deferRender: true,
            scrollY: true,
            scrollX: true,
            paging: true,
            initComplete: function() {
              this.api().columns().every(function() {
                var column = this;
                var select = $(
                    '<select><option value="">-Select-</option></select>'
                  )
                  .appendTo($(column.footer()).empty())
                  .on('change', function() {
                    var val = $.fn.dataTable.util.escapeRegex(
                      $(this).val()
                    );

                    column
                      .search(val ? '^' + val + '$' : '',
                        true, false)
                      .draw();
                  });

                column.data().unique().sort().each(function(d, j) {
                  select.append('<option value="' + d +
                    '">' + d + '</option>')
                });
              });
            }
          })
          //CALL DATATABLE END
        }
      }
      //  callDatatable();


      



      //CHANGE ENTRIES
      $("#changeEntry").on('change', function() {
        let fromDate = convertDate(rescheduleObj.dateRangeFrom, '-')
        let toDate = convertDate(rescheduleObj.dateRangeTo, '-')
        let facultyId = $('.select-faculty').val()
        let rowcount = $(this).val()
        console.log('CHANGE ENTRY:::::::::::::>>>', 'fromDate:', fromDate, 'toDate:', toDate, 'facultyId:', facultyId)
        $.ajax({
          type: "POST",
          url: "/admin/rescheduling/show-entries",
          data: {
            // fromDate: fromDate ,
            // toDate: toDate,
            // facultyId: facultyId,
            rowcount: rowcount
          },
          success: function(data) {
            console.log('TOP ROW COUNT VALUES::::::::::::::>', data)
            ajaxTable(data.lectureList)
          }
        })
      })


      //Pagination Start Here
      // function Pagination(data){
      let pageCount = `<%- pageCount %>`
      console.log("Page Count=====>>>", pageCount)
      let pageNos = Math.ceil(Number(pageCount) / 10)
      console.log("Page Numbers", pageNos)
      $('#pagination').bootpag({
        total: pageNos,
        page: 1,
        maxVisible: 10,
        leaps: true,
        firstLastUse: true,
        first: '←',
        last: '→',
        wrapClass: 'pagination',
        activeClass: 'active',
        disabledClass: 'disabled',
        nextClass: 'next',
        prevClass: 'prev',
        lastClass: 'last',
        firstClass: 'first'
      }).on("page", function(event, num) {
        $.ajax({
          type: "POST",
          url: "/admin/rescheduling/fetch-event-data-pagination",
          data: {
            fromDate: convertDate(rescheduleObj.dateRangeFrom, '-'),
            toDate: convertDate(rescheduleObj.dateRangeTo, '-'),
            facultyId: $('.select-faculty').val(),
            pageNo: num
          },
          success: function(data) {
            console.log('PAGINATED DATA:::::::::::::::::', data.lectureList)
            ajaxTable(data.lectureList)
          }
        })
      });
      // }
      //Pagination End Here


      //FILTER API
      $("#ProgramFilter").on('change', function() {
        let program_lid = $(this).val()
        // $(".schedule-type").attr('disabled',true)
        // $(".schedule-type").removeAttr('checked')
        console.log('ProgramFilter program_id::::::::::', program_lid)
        let ApiObj = {
          type: 'POST',
          url: '/admin/rescheduling/findby-programid',
          data: {
            program_lid: program_lid
          },
          dataType: 'JSON'
        }
        ajaxApi(ApiObj).then(result => {
          console.log('api returnssss:', result)
          let sessionList = `<option value="">Select Session Name</option>`;
          if (result.sessionList.length > 0) {
            result.sessionList.forEach(element => {
              sessionList += `<option value="${element.acad_session_lid}">${element.acad_session}</option>`;
            });
          } else {
            sessionList += `<option value="">No Session Found!</option>`;
          }
          $("#SessionFilter").html(sessionList)
          //ajaxTable(result.lectureList)
        }).catch(error => {
          showError(error.responseJSON)
        })
      })

      //SEMESTER API
      $("#SessionFilter").on('change', function() {
        let program_lid = $("#ProgramFilter").val()
        let acad_session = $("#SessionFilter").val()
        // $(".schedule-type").attr('disabled',true)
        // $(".schedule-type").removeAttr('checked')
        console.log('ProgramFilter program_id::::::::::', program_lid, acad_session)
        let ApiObj = {
          type: 'POST',
          url: '/admin/rescheduling/find-division-by-programid-acadsession',
          data: {
            program_lid: program_lid,
            acad_session: acad_session
          },
          dataType: 'JSON'
        }
        ajaxApi(ApiObj).then(result => {
          let moduleList = `<option value="">Select Module</option>`;
          if (result.moduleList.length > 0) {
            result.moduleList.forEach(element => {
              moduleList += `<option value="${element.module_lid}">${element.module_name}</option>`;
            });
          } else {
            moduleList += `<option value="">No Session Found!</option>`;
          }
          $("#ModuleFilter").html(moduleList)
          //ajaxTable(result.lectureList)
        }).catch(error => {
          showError(error.responseJSON)
        })
      })

      $("#ModuleFilter").on('change', function() {
        let program_lid = $("#ProgramFilter").val()
        let acad_session_lid = $("#SessionFilter").val()
        let module_lid = $("#ModuleFilter").val()
        // $(".schedule-type").attr('disabled',true)
        // $(".schedule-type").removeAttr('checked')
        console.log('ModuleFilter::::::::::', program_lid, acad_session_lid, module_lid)
        let ApiObj = {
          type: 'POST',
          url: '/admin/rescheduling/get-divisionby-program-session-module',
          data: {
            program_lid: program_lid,
            acad_session_lid: acad_session_lid,
            module_lid: module_lid
          },
          dataType: 'JSON'
        }
        ajaxApi(ApiObj).then(result => {
          console.log('api returnssss:', result)
          let divisionList = `<option value="">Select Division</option>`;
          if (result.divisionList.length > 0) {
            result.divisionList.forEach(element => {
              divisionList += `<option value="${element.division_lid}">${element.division}</option>`;
            });

          } else {
            divisionList += `<option value="">No Session Found!</option>`;
          }
          $("#DivisionFilter").html(divisionList)
        }).catch(error => {
          console.log('error::::::::::::::::', error)
          showError(error.responseJSON)
        })
      })

      //   $(".schedule-type").attr('disabled',false)

      console.log('DivisionFilter:::::::::::::::', typeof($("#DivisionFilter").val()))


      // $("#DivisionFilter").on('change',function(){
      //   $(".schedule-type").attr('disabled',false)
      // })



      //EMPY TIME SELECTION
      $("#select-new-ec-start-time").on('change', function() {
        // $("#select-new-ec-end-time").val('')
        $(document).find("#select-new-ec-end-time").html('')

        let endTimeOption = '<option value="">--Select End Time--</option>';
        let startTimeLid = parseInt($(this).val())

        for (let time of timeListJson) {
          if ((startTimeLid + 11) == time.id) {
            endTimeOption += `<option value="${time.id}">${time.end_time}</option>`
          }
        }

        $(document).find("#select-new-ec-end-time").append(endTimeOption)
      })


      //DIVISION API
      // $("#DivisionFilter").on('change',function(){
      //   let program_lid = $("#ProgramFilter").val()
      //   let acad_session = $("#SessionFilter").val()
      //   let division = $("#DivisionFilter").val()
      //   console.log('ProgramFilter program_id::::::::::',program_lid)
      //   let ApiObj = {
      //             type: 'POST',
      //             url: '/admin/rescheduling/find-by-div-program-session',
      //             data: {
      //               program_lid: program_lid,
      //               acad_session: acad_session,
      //               division: division
      //             },
      //             dataType: 'JSON'
      //         }
      //         ajaxApi(ApiObj).then(result => {
      //             console.log('api returnssss:', result)
      //         }).catch(error => {
      //           console.log('error::::::::::::::::',error)
      //             showError(error.responseJSON)
      //         })
      // })

      //EXTRA CLASS API CALLING
      $("#select-new-ec-end-time").on('change', function() {
        // $("#select-new-ec-start-time").html(startTimeList).attr('disabled', false)
        // $("#select-new-ec-end-time").html(endTimeList).attr('disabled', false)
        console.log('EXTRA CLASS API CALLING::::::::::::::::>>>>')
        let program_lid = $("#ProgramFilter").val()
        let division_lid = $("#DivisionFilter").val()
        let module_lid = $("#ModuleFilter").val()
        let acad_session_lid = $("#SessionFilter").val()
        let toDate = convertDate($("#extra-lecture-to-date").val(), '-')
        let startTime = $("#select-new-ec-start-time").val()
        let endTime = $("#select-new-ec-end-time").val()

        let data = {
          program_lid: program_lid,
          division_lid: division_lid,
          module_lid: module_lid,
          acad_session_lid: acad_session_lid,
          toDate: toDate,
          startTime: startTime,
          endTime: endTime
        }

        console.log('data:::::::::::::::::::>>>>>>>>>>>', data)
        let ApiObj = {
          type: 'POST',
          url: '/admin/rescheduling/fetch-available-room-faculty-for-extra-class',
          data: {
            program_lid: program_lid,
            division_lid: division_lid,
            module_lid: module_lid,
            acad_session_lid: acad_session_lid,
            date: toDate,
            startTimeLid: startTime,
            endTimeLid: endTime
          },
          dataType: 'JSON'
        }
        ajaxApi(ApiObj).then(result => {
          console.log('api returnssss:', result)
          let availableRoomHTML = `<option value="">Select Room</option>`;
          if (result.availableRoom.length > 0) {
            result.availableRoom.forEach(element => {
              availableRoomHTML += `<option value="${element.room_lid}">${element.room_number}</option>`;
            });
          } else {
            availableRoomHTML += `<option value="">Room Not Found!</option>`;
          }

          $("#select-new-ec-room").html(availableRoomHTML).attr('disabled', false)


        }).catch(error => {
          console.log('error::::::::::::::::', error)
          showError(error.responseJSON)
        })
      })

      //GET AVAILABLE FACULTY BY ROOM AND PROGRAM, SESSSION, DIVISION, MODULE, DATE, SLOT START/ END 
      $("#select-new-ec-room").on('change', function() {
        console.log('EXTRA CLASS API CALLING::::::::::::::::>>>>')
        let program_lid = $("#ProgramFilter").val()
        let division_lid = $("#DivisionFilter").val()
        let module_lid = $("#ModuleFilter").val()
        let acad_session_lid = $("#SessionFilter").val()
        let toDate = convertDate($("#extra-lecture-to-date").val(), '-')
        let startTime = $("#select-new-ec-start-time").val()
        let endTime = $("#select-new-ec-end-time").val()
        let roomLid = $(this).val()

        let ApiObj = {
          type: 'POST',
          url: '/admin/rescheduling/fetch-available-faculty-for-extra-class',
          data: {
            program_lid: program_lid,
            division_lid: division_lid,
            module_lid: module_lid,
            acad_session_lid: acad_session_lid,
            date: toDate,
            startTimeLid: startTime,
            endTimeLid: endTime,
            roomLid: roomLid
          },
          dataType: 'JSON'
        }
        ajaxApi(ApiObj).then(result => {
          console.log('available faculty for extra class', result)
          let availableFacultyHTML = `<option value="">Select Faculty</option>`;
          if (result.availableFaculty.length > 0) {
            result.availableFaculty.forEach(element => {
              availableFacultyHTML += `<option value="${element.faculty_lid}">${element.faculty_name} - ${element.faculty_id}</option>`;
            });
          } else {
            availableFacultyHTML += `<option value="">Faculty Not Found!</option>`;
          }

          $("#select-new-ec-faculty").html(availableFacultyHTML).attr('disabled', false)

        }).catch(error => {
          console.log('error::::::::::::::::', error)
          showError(error.responseJSON)
        })
      })



      //API FOR EXTRA CLASS SENDING DATA 
      $("#schedule-extra-class").on('click', function() {
        //EXTRA AND REGULAR CLASS API CALLING
        let program_lid = $("#ProgramFilter").val()
        let division_lid = $("#DivisionFilter").val()
        let module_lid = $("#ModuleFilter").val()
        let acad_session_lid = $("#SessionFilter").val()
        let date = convertDate($("#extra-lecture-to-date").val(), '-')
        let startTime = $("#select-new-ec-start-time").val()
        let endTime = $("#select-new-ec-end-time").val()
        let roomLid = $("#select-new-ec-room").val()

        let extraclassData = {
          program_lid: program_lid,
          division_lid: division_lid,
          module_lid: module_lid,
          acad_session_lid: acad_session_lid,
          date: date,
          startTime: startTime,
          endTime: endTime,
          roomLid: roomLid,
          sapFlag: rescheduleObj.reschFlag
        }
        console.log('SCHEDULE EXTRA CLASS::::::::::::>>>>', rescheduleObj)

        if (!isValidExtraClass()) {
          alert('Please fill all the mandatory fields.')
        } else {
          let isConfirmed = confirm('Do you really want to add new lecture?')

          if (isConfirmed) {
            console.log('>>>>>>>>>>>>>>>> Cancelling the event')
            $('.loaderBody').removeClass('d-none')
            // socket.emit('scheduleExtraClass', {
            //   slugName: "<%- slug %>",
            //   resObj: extraclassData
            // })

          }
        }
      })

      //API FOR REGULAR CLASS CLASS SENDING DATA 
      //     $("#replace-faculty-btn").on('click',function(){
      //   //EXTRA AND REGULAR CLASS API CALLING
      //   let program_lid = $("#ProgramFilter").val()
      //   let division_lid = $("#DivisionFilter").val()
      //   let module_lid = $("#ModuleFilter").val()
      //   let acad_session_lid = $("#SessionFilter").val()
      //   let fromdate =  convertDate($(".from-date").val(), '-')
      //   let todate = convertDate($(".to-date").val(),'-')
      //   let fromfaculty = $(".select-faculty").val()
      //   let tofaculty = $("#replace-faculty-dropdown").val()


      //   let regularclassData = {
      //     program_lid: program_lid,
      //     division_lid: division_lid,
      //     module_lid: module_lid,
      //     acad_session_lid: acad_session_lid,
      //     fromdate: fromdate,
      //     todate: todate,
      //     fromfaculty: fromfaculty,
      //     tofaculty: tofaculty
      //   }
      //   console.log('SCHEDULE EXTRA CLASS::::::::::::>>>>', regularclassData)

      //               if (!isValidRegularClass()) {
      //                 alert('Please fill all the mandatory fields.')
      //               } else {
      //                 let isConfirmed = confirm('Do you really want to add new lecture?')

      //                 if (isConfirmed) {
      //                   console.log('>>>>>>>>>>>>>>>> Cancelling the event')
      //                   $('.loaderBody').removeClass('d-none')
      //                   // socket.emit('scheduleExtraClass', {
      //                   //   slugName: "<%- slug %>",
      //                   //   resObj: regularclassData
      //                   // })

      //                 }
      //               }
      // })

      //#cancel-against-extra-class-btn
      //CANCEL AGAINST EXTRA CLASS API CALLING
      $("#cancel-against-extra-class-btn").on('click', function() {
        console.log('CANCEL AGAINST EXTRA CLASS API CALLING >>>> ', rescheduleObj)
        if (rescheduleObj.reschFlag === 'C' && $(`#cancel-wrapper input[name="cancel-type"]:checked`).val() == 'cae') {
          let ides = []
          console.log('ides::::::::::::', ides)
          let regularLectureOpn = $("input[name='regularLectureOpn']:checked").val()
          console.log('regularLectureOpn:::::::::::::::::::', regularLectureOpn)
          ides.push($('#extra-lecture-list option:selected').attr("data-lid"))
          rescheduleData.ids = ides
          rescheduleData.sapFlagId = $("input[name='schedule-type']").val();
          rescheduleData.sapFlag = rescheduleObj.reschFlag
          rescheduleData.reasonID = $('#reschReason').val();
          rescheduleData.reasonText = $('#reschDesc').val();
          rescheduleData.regularlectid = regularLectureOpn
          console.log('rescheduleData::::::::::::', rescheduleData)
          if (!isValidCancelCae()) {
            alert('Please fill all the mandatory fields.')
          } else {
            let isConfirmed = confirm('Do you really want to cancel the event?')

            if (isConfirmed) {
              console.log('>>>>>>>>>>>>>>>> Cancelling the event')
              $('.loaderBody').removeClass('d-none')
              // socket.emit('cancelEventedSlotCae', {
              //   slugName: "<%- slug %>",
              //   resObj: rescheduleData
              // })

            }
          }
        }

      })



      function ajaxTable(lectureList, actionType, replaceToFacultyObj) {

        let tableHtml= ``;
        let count = 0;
        if (lectureList.length > 0) {
          console.log('cancel data', actionType)
          if (actionType == 'Cancel') {
            tableHtml = `  <table class="table table-bordered table-striped event-list-table">
<thead>
<tr>
  <th>#</th>
  <th>Event Id</th>
  <th>Event Name</th>
  <th>Faculty Name</th>
  <th>Date</th>
  <th>Time</th>
  <th>Room</th>
  <th>Cancel <input id="cancel-all" type="checkbox" checked="checked" />
    <label>All</label>
  </th>
</tr>
</thead>
<tbody>
`

            for (let lecture of lectureList) {
              tableHtml += `<tr data-lid="${lecture.id}" data-date="${lecture.date_str}" data-start-time="${lecture.start_time}" data-end-time="${lecture.end_time}" data-slot="${lecture.slot_name}" data-room="${lecture.room_no}">
  <td>${++count}</td>
  <td>${lecture.sap_event_id ? lecture.sap_event_id : 'Not Created'}</td>
  <td>${lecture.event_name}</td>
  <td>${lecture.faculty_name}</td>
  <td class="date" data-day-lid="${lecture.day_lid}">${lecture.date_str}</td>
  <td class="time" data-start-time-lid="${lecture.start_time_lid}" data-end-time-lid="${lecture.end_time_lid}">${lecture.start_time}-${lecture.end_time}</td>
  <td class="room" data-room-lid="${lecture.room_lid}">${lecture.room_no}</td>
  <td>
    <input type='checkbox' class='is-cancel' style="width: 25px; height: 25px;" checked="checked"/>
  </td>
  </tr>
  `
            }

            tableHtml += `</tbody></table> <div class="d-grid gap-2 mt-2 w-50 mx-auto">
              <button class="btn btn-primary rounded-0" id="cancel-event-btn" type="button">Cancel Events</button>
            </div>`
            $(document).find('.event-list-table-container').html(tableHtml)
          } else if (actionType == 'Modify') {
            
            tableHtml = `  <table class="table table-bordered table-striped event-list-table">
<thead>
<tr>
  <th>#</th>
  <th>Event Id</th>
  <th>Event Name</th>
  <th>Faculty Name</th>
  <th>New Faculty Name</th>
  <th>Date</th>
  <th>Time</th>
  <th>Room</th>
  <th>New Room</th>
  <th>Action</th>
  <th>Select <input id="select-all" type="checkbox" checked="checked" />
    <label>All</label>
  </th>
</tr>
</thead>
<tbody>
`

            for (let lecture of lectureList) {
              tableHtml += `<tr data-lid="${lecture.id}" data-date="${lecture.date_str}" data-start-time="${lecture.start_time}" data-end-time="${lecture.end_time}" data-slot="${lecture.slot_name}" data-room="${lecture.room_no}">
  <td>${++count}</td>
  <td>${lecture.sap_event_id ? lecture.sap_event_id : 'Not Created'}</td>
  <td>${lecture.event_name}</td>
  <td data-faculty-lid="${lecture.faculty_lid}" data-faculty-id="${lecture.faculty_id}" data-faculty-type="${lecture.faculty_type}">${lecture.faculty_name}</td>
  <td class='new-faculty-name' data-new-faculty-lid="" data-new-faculty-id="" data-new-faculty-type=""></td>
  <td class="date" data-day-lid="${lecture.day_lid}" data-date="${lecture.date_str}" >${lecture.date_str}</td>
  <td class="time" data-start-time-lid="${lecture.start_time_lid}" data-start-time="${lecture.start_time}" data-end-time-lid="${lecture.end_time_lid}" data-end-time="${lecture.end_time}">${lecture.start_time}-${lecture.end_time}</td>
  <td class="room" data-room-lid="${lecture.room_lid}" data-room-abbr="${lecture.room_abbr}">${lecture.room_no}</td>
  <td class="new-room" data-new-room-lid="" data-new-room-abbr=""></td>
  <td><i class="fa-solid fa-square-pen reschedule-edit" data-lid="${lecture.id}"></i></td>
  <td>
    <input type='checkbox' class='is-select' style="width: 25px; height: 25px;" checked="checked" data-lid="${lecture.id}"/>
  </td>
  </tr>
  `
            }

            tableHtml += `</tbody></table><div class="d-grid gap-2 mt-2 w-50 mx-auto">
              <button class="btn btn-primary rounded-0" id="modify-event-btn" type="button">Modify Events</button>
            </div>`
            $(document).find('.event-list-table-container').html(tableHtml)
          } else if (actionType == "Reschedule") {

            tableHtml = `  <table class="table table-bordered table-striped event-list-table">
<thead>
<tr>
  <th>#</th>
  <th>Event Id</th>
  <th>Event Name</th>
  <th>Faculty Name</th>
  <th>New Faculty Name</th>
  <th>Date</th>
  <th>New Date</th>
  <th>Time</th>
  <th>New Time</th>
  <th>Room</th>
  <th>New Room</th>
  <th>Action</th>
  <th>Select <input id="select-all" type="checkbox" checked="checked" />
    <label>All</label>
  </th>
</tr>
</thead>
<tbody>
`

            for (let lecture of lectureList) {
              tableHtml += `<tr data-lid="${lecture.id}" data-date="${lecture.date_str}" data-start-time="${lecture.start_time}" data-end-time="${lecture.end_time}" data-slot="${lecture.slot_name}" data-room="${lecture.room_no}">
  <td>${++count}</td>
  <td>${lecture.sap_event_id ? lecture.sap_event_id : 'Not Created'}</td>
  <td>${lecture.event_name}</td>
  <td data-faculty-lid="${lecture.faculty_lid}" data-faculty-id="${lecture.faculty_id}" data-faculty-type="${lecture.faculty_type}">${lecture.faculty_name}</td>
  <td class='new-faculty-name' data-new-faculty-lid="" data-new-faculty-id="" data-new-faculty-type=""></td>
  <td class="date" data-day-lid="${lecture.day_lid}" data-date="${lecture.date_str}">${lecture.date_str}</td>
  <td  data-new-day-lid="" data-new-date=""></td>
  <td class="time" data-start-time-lid="${lecture.start_time_lid}" data-end-time-lid="${lecture.end_time_lid}">${lecture.start_time}-${lecture.end_time}</td>
  <td  data-new-start-time-lid="" data-new-end-time-lid=""></td>
  <td class="room" data-room-lid="${lecture.room_lid}" data-room-abbr="${lecture.room_abbr}">${lecture.room_no}</td>
  <td class="new-room" data-new-room-lid="" data-new-room-abbr=""></td>
  <td><i class="fa-solid fa-square-pen reschedule-edit" data-lid="${lecture.id}"></i></td>
  <td>
    <input type='checkbox' class='is-select' style="width: 25px; height: 25px;" checked="checked" data-lid="${lecture.id}"/>
  </td>
  </tr>
  `
            }

            tableHtml += `</tbody></table><div class="d-grid gap-2 mt-2 w-50 mx-auto">
              <button class="btn btn-primary rounded-0" id="reschedule-event-btn" type="button">Reschedule Events</button>
            </div>`
            $(document).find('.event-list-table-container').html(tableHtml)

          } else if (actionType == "Replace") {

            console.log('inside replace faculty', replaceToFacultyObj)
            tableHtml = `  <table class="table table-bordered table-striped event-list-table">
<thead>
<tr>
  <th>#</th>
  <th>Event Id</th>
  <th>Event Name</th>
  <th>Faculty Name</th>
  <th>New Faculty Name</th>
  <th>Date</th>
  <th>New Date</th>
  <th>Time</th>
  <th>New Time</th>
  <th>Room</th>
  <th>New Room</th>
  <th>Action</th>
  <th>Select <input id="select-all" type="checkbox" checked="checked" />
    <label>All</label>
  </th>
</tr>
</thead>
<tbody>
`

            for (let lecture of lectureList) {
              tableHtml += `<tr data-lid="${lecture.id}" data-date="${lecture.date_str}" data-start-time="${lecture.start_time}" data-end-time="${lecture.end_time}" data-slot="${lecture.slot_name}" data-room="${lecture.room_no}">
  <td>${++count}</td>
  <td>${lecture.sap_event_id ? lecture.sap_event_id : 'Not Created'}</td>
  <td>${lecture.event_name}</td>
  <td data-faculty-lid="${lecture.faculty_lid}" data-faculty-id="${lecture.faculty_id}" data-faculty-type="${lecture.faculty_type}">${lecture.faculty_name}</td>
  <td class='new-faculty-name' data-new-faculty-lid="${replaceToFacultyObj.lid}" data-new-faculty-id="${replaceToFacultyObj.id}" data-new-faculty-type="${replaceToFacultyObj.type}">${replaceToFacultyObj.name}</td>
  <td class="date" data-day-lid="${lecture.day_lid}" data-date="${lecture.date_str}">${lecture.date_str}</td>
  <td  data-new-day-lid="" data-new-date=""></td>
  <td class="time" data-start-time-lid="${lecture.start_time_lid}" data-end-time-lid="${lecture.end_time_lid}">${lecture.start_time}-${lecture.end_time}</td>
  <td  data-new-start-time-lid="" data-new-end-time-lid=""></td>
  <td class="room" data-room-lid="${lecture.room_lid}" data-room-abbr="${lecture.room_abbr}">${lecture.room_no}</td>
  <td class="new-room" data-new-room-lid="" data-new-room-abbr=""></td>
  <td><i class="fa-solid fa-square-pen reschedule-edit" data-lid="${lecture.id}"></i></td>
  <td>
    <input type='checkbox' class='is-select' style="width: 25px; height: 25px;" checked="checked" data-lid="${lecture.id}"/>
  </td>
  </tr>
  `
            }

            tableHtml += `</tbody></table><div class="d-grid gap-2 mt-2 w-50 mx-auto">
              <button class="btn btn-primary rounded-0" id="replace-event-btn" type="button">Reschedule Events</button>
            </div>`
            $(document).find('.event-list-table-container').html(tableHtml)
          }
        } else {
          tableHtml += `No lecture found for the given date range.`
          $('#event-list-table-card table tbody').html(tableHtml)
        }
        $('#event-list-table-card').removeClass('d-none')
      }

    })
  </script>
  <%- include("../partials/footerEnd") %>